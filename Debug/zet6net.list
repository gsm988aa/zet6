
zet6net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08006694  08006694  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006694  08006694  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800669c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  200000b8  08006754  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  08006754  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9bd  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f3  00000000  00000000  0002fa9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000338d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2a1  00000000  00000000  00034498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c09  00000000  00000000  00050739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cbf6  00000000  00000000  00062342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fef38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  000fef8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b8 	.word	0x200000b8
 8000200:	00000000 	.word	0x00000000
 8000204:	08006390 	.word	0x08006390

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000bc 	.word	0x200000bc
 8000220:	08006390 	.word	0x08006390

08000224 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b82      	ldr	r3, [pc, #520]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000236:	4a83      	ldr	r2, [pc, #524]	; (8000444 <MX_ADC1_Init+0x220>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b81      	ldr	r3, [pc, #516]	; (8000440 <MX_ADC1_Init+0x21c>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000242:	4b7f      	ldr	r3, [pc, #508]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000244:	2201      	movs	r2, #1
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b7d      	ldr	r3, [pc, #500]	; (8000440 <MX_ADC1_Init+0x21c>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b7c      	ldr	r3, [pc, #496]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b7a      	ldr	r3, [pc, #488]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 800025c:	4b78      	ldr	r3, [pc, #480]	; (8000440 <MX_ADC1_Init+0x21c>)
 800025e:	2210      	movs	r2, #16
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	4877      	ldr	r0, [pc, #476]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000264:	f002 fd10 	bl	8002c88 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fcb2 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	486f      	ldr	r0, [pc, #444]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000284:	f002 fdea 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fca2 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000292:	2301      	movs	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4868      	ldr	r0, [pc, #416]	; (8000440 <MX_ADC1_Init+0x21c>)
 80002a0:	f002 fddc 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fc94 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4861      	ldr	r0, [pc, #388]	; (8000440 <MX_ADC1_Init+0x21c>)
 80002bc:	f002 fdce 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fc86 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ca:	2303      	movs	r3, #3
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	485a      	ldr	r0, [pc, #360]	; (8000440 <MX_ADC1_Init+0x21c>)
 80002d8:	f002 fdc0 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002e2:	f000 fc78 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002e6:	2304      	movs	r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002ea:	2305      	movs	r3, #5
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4853      	ldr	r0, [pc, #332]	; (8000440 <MX_ADC1_Init+0x21c>)
 80002f4:	f002 fdb2 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002fe:	f000 fc6a 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000302:	2305      	movs	r3, #5
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000306:	2306      	movs	r3, #6
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	484c      	ldr	r0, [pc, #304]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000310:	f002 fda4 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800031a:	f000 fc5c 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800031e:	2306      	movs	r3, #6
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000322:	2307      	movs	r3, #7
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4619      	mov	r1, r3
 800032a:	4845      	ldr	r0, [pc, #276]	; (8000440 <MX_ADC1_Init+0x21c>)
 800032c:	f002 fd96 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000336:	f000 fc4e 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800033a:	2307      	movs	r3, #7
 800033c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800033e:	2308      	movs	r3, #8
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	483e      	ldr	r0, [pc, #248]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000348:	f002 fd88 	bl	8002e5c <HAL_ADC_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000352:	f000 fc40 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000356:	2308      	movs	r3, #8
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800035a:	2309      	movs	r3, #9
 800035c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4837      	ldr	r0, [pc, #220]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000364:	f002 fd7a 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800036e:	f000 fc32 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000372:	2309      	movs	r3, #9
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000376:	230a      	movs	r3, #10
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4619      	mov	r1, r3
 800037e:	4830      	ldr	r0, [pc, #192]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000380:	f002 fd6c 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800038a:	f000 fc24 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800038e:	230a      	movs	r3, #10
 8000390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000392:	230b      	movs	r3, #11
 8000394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4829      	ldr	r0, [pc, #164]	; (8000440 <MX_ADC1_Init+0x21c>)
 800039c:	f002 fd5e 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80003a6:	f000 fc16 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003aa:	230b      	movs	r3, #11
 80003ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80003ae:	230c      	movs	r3, #12
 80003b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4822      	ldr	r0, [pc, #136]	; (8000440 <MX_ADC1_Init+0x21c>)
 80003b8:	f002 fd50 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80003c2:	f000 fc08 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80003c6:	230c      	movs	r3, #12
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80003ca:	230d      	movs	r3, #13
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	481b      	ldr	r0, [pc, #108]	; (8000440 <MX_ADC1_Init+0x21c>)
 80003d4:	f002 fd42 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 80003de:	f000 fbfa 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80003e2:	230d      	movs	r3, #13
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80003e6:	230e      	movs	r3, #14
 80003e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4814      	ldr	r0, [pc, #80]	; (8000440 <MX_ADC1_Init+0x21c>)
 80003f0:	f002 fd34 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 80003fa:	f000 fbec 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003fe:	230e      	movs	r3, #14
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000402:	230f      	movs	r3, #15
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <MX_ADC1_Init+0x21c>)
 800040c:	f002 fd26 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8000416:	f000 fbde 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800041a:	230f      	movs	r3, #15
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800041e:	2310      	movs	r3, #16
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_ADC1_Init+0x21c>)
 8000428:	f002 fd18 	bl	8002e5c <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000432:	f000 fbd0 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000148 	.word	0x20000148
 8000444:	40012400 	.word	0x40012400

08000448 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_ADC3_Init+0xcc>)
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <MX_ADC3_Init+0xd0>)
 800045c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_ADC3_Init+0xcc>)
 8000460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000464:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_ADC3_Init+0xcc>)
 8000468:	2201      	movs	r2, #1
 800046a:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <MX_ADC3_Init+0xcc>)
 800046e:	2200      	movs	r2, #0
 8000470:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_ADC3_Init+0xcc>)
 8000474:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000478:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047a:	4b26      	ldr	r3, [pc, #152]	; (8000514 <MX_ADC3_Init+0xcc>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 4;
 8000480:	4b24      	ldr	r3, [pc, #144]	; (8000514 <MX_ADC3_Init+0xcc>)
 8000482:	2204      	movs	r2, #4
 8000484:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000486:	4823      	ldr	r0, [pc, #140]	; (8000514 <MX_ADC3_Init+0xcc>)
 8000488:	f002 fbfe 	bl	8002c88 <HAL_ADC_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 8000492:	f000 fba0 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000496:	2305      	movs	r3, #5
 8000498:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049a:	2301      	movs	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	481b      	ldr	r0, [pc, #108]	; (8000514 <MX_ADC3_Init+0xcc>)
 80004a8:	f002 fcd8 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80004b2:	f000 fb90 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004b6:	2306      	movs	r3, #6
 80004b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4814      	ldr	r0, [pc, #80]	; (8000514 <MX_ADC3_Init+0xcc>)
 80004c4:	f002 fcca 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fb82 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004d2:	2307      	movs	r3, #7
 80004d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_ADC3_Init+0xcc>)
 80004e0:	f002 fcbc 	bl	8002e5c <HAL_ADC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 80004ea:	f000 fb74 	bl	8000bd6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80004ee:	2308      	movs	r3, #8
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004f2:	2304      	movs	r3, #4
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_ADC3_Init+0xcc>)
 80004fc:	f002 fcae 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC3_Init+0xc2>
  {
    Error_Handler();
 8000506:	f000 fb66 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000178 	.word	0x20000178
 8000518:	40013c00 	.word	0x40013c00

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a66      	ldr	r2, [pc, #408]	; (80006d0 <HAL_ADC_MspInit+0x1b4>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d175      	bne.n	8000628 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800053c:	4b65      	ldr	r3, [pc, #404]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a64      	ldr	r2, [pc, #400]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b62      	ldr	r3, [pc, #392]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000554:	4b5f      	ldr	r3, [pc, #380]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a5e      	ldr	r2, [pc, #376]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800055a:	f043 0310 	orr.w	r3, r3, #16
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b5c      	ldr	r3, [pc, #368]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b56      	ldr	r3, [pc, #344]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b53      	ldr	r3, [pc, #332]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a52      	ldr	r2, [pc, #328]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b50      	ldr	r3, [pc, #320]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693b      	ldr	r3, [r7, #16]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800059c:	233f      	movs	r3, #63	; 0x3f
 800059e:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4619      	mov	r1, r3
 80005aa:	484b      	ldr	r0, [pc, #300]	; (80006d8 <HAL_ADC_MspInit+0x1bc>)
 80005ac:	f003 f948 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005b0:	23ff      	movs	r3, #255	; 0xff
 80005b2:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4619      	mov	r1, r3
 80005be:	4847      	ldr	r0, [pc, #284]	; (80006dc <HAL_ADC_MspInit+0x1c0>)
 80005c0:	f003 f93e 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	2303      	movs	r3, #3
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4619      	mov	r1, r3
 80005d2:	4843      	ldr	r0, [pc, #268]	; (80006e0 <HAL_ADC_MspInit+0x1c4>)
 80005d4:	f003 f934 	bl	8003840 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005da:	4a43      	ldr	r2, [pc, #268]	; (80006e8 <HAL_ADC_MspInit+0x1cc>)
 80005dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005de:	4b41      	ldr	r3, [pc, #260]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 8000600:	2220      	movs	r2, #32
 8000602:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800060a:	4836      	ldr	r0, [pc, #216]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 800060c:	f002 fe66 	bl	80032dc <HAL_DMA_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8000616:	f000 fade 	bl	8000bd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 800061e:	621a      	str	r2, [r3, #32]
 8000620:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <HAL_ADC_MspInit+0x1c8>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000626:	e04e      	b.n	80006c6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC3)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <HAL_ADC_MspInit+0x1d0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d149      	bne.n	80006c6 <HAL_ADC_MspInit+0x1aa>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_ADC_MspInit+0x1b8>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000662:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000668:	2303      	movs	r3, #3
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4619      	mov	r1, r3
 8000672:	481f      	ldr	r0, [pc, #124]	; (80006f0 <HAL_ADC_MspInit+0x1d4>)
 8000674:	f003 f8e4 	bl	8003840 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <HAL_ADC_MspInit+0x1dc>)
 800067c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 8000692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000696:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 80006a0:	2220      	movs	r2, #32
 80006a2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 80006ac:	f002 fe16 	bl	80032dc <HAL_DMA_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 80006b6:	f000 fa8e 	bl	8000bd6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 80006be:	621a      	str	r2, [r3, #32]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x1d8>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80006c6:	bf00      	nop
 80006c8:	3730      	adds	r7, #48	; 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	200001a8 	.word	0x200001a8
 80006e8:	40020008 	.word	0x40020008
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40011c00 	.word	0x40011c00
 80006f4:	20000104 	.word	0x20000104
 80006f8:	40020458 	.word	0x40020458

080006fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_DMA_Init+0x60>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_DMA_Init+0x60>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_DMA_Init+0x60>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_DMA_Init+0x60>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_DMA_Init+0x60>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_DMA_Init+0x60>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	200b      	movs	r0, #11
 8000738:	f002 fd99 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800073c:	200b      	movs	r0, #11
 800073e:	f002 fdb2 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	203b      	movs	r0, #59	; 0x3b
 8000748:	f002 fd91 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800074c:	203b      	movs	r0, #59	; 0x3b
 800074e:	f002 fdaa 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a33      	ldr	r2, [pc, #204]	; (8000848 <MX_GPIO_Init+0xe8>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_GPIO_Init+0xe8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_GPIO_Init+0xe8>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0xec>)
 80007f4:	f003 f9b8 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_GPIO_Init+0xf0>)
 8000800:	f003 f9b2 	bl	8003b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000804:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xec>)
 800081e:	f003 f80f 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2302      	movs	r3, #2
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xf0>)
 800083c:	f003 f800 	bl	8003840 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40011400 	.word	0x40011400

08000854 <W5500_Select>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void W5500_Select(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085e:	4802      	ldr	r0, [pc, #8]	; (8000868 <W5500_Select+0x14>)
 8000860:	f003 f982 	bl	8003b68 <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40010c00 	.word	0x40010c00

0800086c <W5500_Unselect>:

void W5500_Unselect(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000876:	4802      	ldr	r0, [pc, #8]	; (8000880 <W5500_Unselect+0x14>)
 8000878:	f003 f976 	bl	8003b68 <HAL_GPIO_WritePin>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40010c00 	.word	0x40010c00

08000884 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000890:	887a      	ldrh	r2, [r7, #2]
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <W5500_ReadBuff+0x24>)
 800089a:	f004 f80d 	bl	80048b8 <HAL_SPI_Receive>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000b40 	.word	0x20000b40

080008ac <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 80008b8:	887a      	ldrh	r2, [r7, #2]
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <W5500_WriteBuff+0x24>)
 80008c2:	f003 febd 	bl	8004640 <HAL_SPI_Transmit>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000b40 	.word	0x20000b40

080008d4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  uint8_t byte;
  W5500_ReadBuff(&byte, sizeof(byte));
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffd0 	bl	8000884 <W5500_ReadBuff>
  return byte;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
  W5500_WriteBuff(&byte, sizeof(byte));
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffd5 	bl	80008ac <W5500_WriteBuff>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <network_init>:

void network_init(void)
{
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af04      	add	r7, sp, #16
  uint8_t tmpstr[6];
  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000912:	4939      	ldr	r1, [pc, #228]	; (80009f8 <network_init+0xec>)
 8000914:	2000      	movs	r0, #0
 8000916:	f001 fd6f 	bl	80023f8 <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 800091a:	4937      	ldr	r1, [pc, #220]	; (80009f8 <network_init+0xec>)
 800091c:	2001      	movs	r0, #1
 800091e:	f001 fd6b 	bl	80023f8 <ctlnetwork>

  // Display Network Information
  ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	2008      	movs	r0, #8
 8000928:	f001 fc88 	bl	800223c <ctlwizchip>
  printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4832      	ldr	r0, [pc, #200]	; (80009fc <network_init+0xf0>)
 8000932:	f004 fdfd 	bl	8005530 <iprintf>
  printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <network_init+0xec>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <network_init+0xec>)
 800093e:	785b      	ldrb	r3, [r3, #1]
 8000940:	461c      	mov	r4, r3
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <network_init+0xec>)
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	461d      	mov	r5, r3
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <network_init+0xec>)
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	461a      	mov	r2, r3
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <network_init+0xec>)
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	4619      	mov	r1, r3
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <network_init+0xec>)
 8000956:	795b      	ldrb	r3, [r3, #5]
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	9101      	str	r1, [sp, #4]
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	462b      	mov	r3, r5
 8000960:	4622      	mov	r2, r4
 8000962:	4601      	mov	r1, r0
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <network_init+0xf4>)
 8000966:	f004 fde3 	bl	8005530 <iprintf>
  printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <network_init+0xec>)
 800096c:	799b      	ldrb	r3, [r3, #6]
 800096e:	4619      	mov	r1, r3
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <network_init+0xec>)
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	461a      	mov	r2, r3
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <network_init+0xec>)
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	4618      	mov	r0, r3
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <network_init+0xec>)
 800097e:	7a5b      	ldrb	r3, [r3, #9]
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4603      	mov	r3, r0
 8000984:	481f      	ldr	r0, [pc, #124]	; (8000a04 <network_init+0xf8>)
 8000986:	f004 fdd3 	bl	8005530 <iprintf>
  printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <network_init+0xec>)
 800098c:	7b9b      	ldrb	r3, [r3, #14]
 800098e:	4619      	mov	r1, r3
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <network_init+0xec>)
 8000992:	7bdb      	ldrb	r3, [r3, #15]
 8000994:	461a      	mov	r2, r3
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <network_init+0xec>)
 8000998:	7c1b      	ldrb	r3, [r3, #16]
 800099a:	4618      	mov	r0, r3
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <network_init+0xec>)
 800099e:	7c5b      	ldrb	r3, [r3, #17]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4603      	mov	r3, r0
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <network_init+0xfc>)
 80009a6:	f004 fdc3 	bl	8005530 <iprintf>
  printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <network_init+0xec>)
 80009ac:	7a9b      	ldrb	r3, [r3, #10]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <network_init+0xec>)
 80009b2:	7adb      	ldrb	r3, [r3, #11]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <network_init+0xec>)
 80009b8:	7b1b      	ldrb	r3, [r3, #12]
 80009ba:	4618      	mov	r0, r3
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <network_init+0xec>)
 80009be:	7b5b      	ldrb	r3, [r3, #13]
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4603      	mov	r3, r0
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <network_init+0x100>)
 80009c6:	f004 fdb3 	bl	8005530 <iprintf>
  printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <network_init+0xec>)
 80009cc:	7c9b      	ldrb	r3, [r3, #18]
 80009ce:	4619      	mov	r1, r3
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <network_init+0xec>)
 80009d2:	7cdb      	ldrb	r3, [r3, #19]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <network_init+0xec>)
 80009d8:	7d1b      	ldrb	r3, [r3, #20]
 80009da:	4618      	mov	r0, r3
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <network_init+0xec>)
 80009de:	7d5b      	ldrb	r3, [r3, #21]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4603      	mov	r3, r0
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <network_init+0x104>)
 80009e6:	f004 fda3 	bl	8005530 <iprintf>
  printf("======================\r\n");
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <network_init+0x108>)
 80009ec:	f004 fe26 	bl	800563c <puts>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bdb0      	pop	{r4, r5, r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	080063a8 	.word	0x080063a8
 8000a00:	080063c0 	.word	0x080063c0
 8000a04:	080063e8 	.word	0x080063e8
 8000a08:	080063fc 	.word	0x080063fc
 8000a0c:	08006410 	.word	0x08006410
 8000a10:	08006424 	.word	0x08006424
 8000a14:	08006438 	.word	0x08006438

08000a18 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a20:	1d39      	adds	r1, r7, #4
 8000a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a26:	2201      	movs	r2, #1
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <__io_putchar+0x20>)
 8000a2a:	f004 fb3e 	bl	80050aa <HAL_UART_Transmit>
  return ch;
 8000a2e:	687b      	ldr	r3, [r7, #4]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000b98 	.word	0x20000b98

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t tmp;
  int32_t retr = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <main+0xb0>)
 8000a48:	463c      	mov	r4, r7
 8000a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f002 f8b8 	bl	8002bc4 <HAL_Init>
  /* USER CODE BEGIN Init */
//  Spi_Buff[]=0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f862 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f7ff fe82 	bl	8000760 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5c:	f7ff fe4e 	bl	80006fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a60:	f000 fa58 	bl	8000f14 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000a64:	f000 f8be 	bl	8000be4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000a68:	f7ff fbdc 	bl	8000224 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000a6c:	f7ff fcec 	bl	8000448 <MX_ADC3_Init>
   * ############*/
  /* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
//  printf("y1");

  reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000a70:	491f      	ldr	r1, [pc, #124]	; (8000af0 <main+0xb4>)
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <main+0xb8>)
 8000a74:	f001 fb66 	bl	8002144 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8000a78:	491f      	ldr	r1, [pc, #124]	; (8000af8 <main+0xbc>)
 8000a7a:	4820      	ldr	r0, [pc, #128]	; (8000afc <main+0xc0>)
 8000a7c:	f001 fb86 	bl	800218c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000a80:	491f      	ldr	r1, [pc, #124]	; (8000b00 <main+0xc4>)
 8000a82:	4820      	ldr	r0, [pc, #128]	; (8000b04 <main+0xc8>)
 8000a84:	f001 fbae 	bl	80021e4 <reg_wizchip_spiburst_cbfunc>



    /* WIZCHIP SOCKET Buffer initialize */
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fbd5 	bl	800223c <ctlwizchip>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a98:	d103      	bne.n	8000aa2 <main+0x66>
    {
       printf("WIZCHIP Initialized fail.\r\n");
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <main+0xcc>)
 8000a9c:	f004 fdce 	bl	800563c <puts>
       while(1);
 8000aa0:	e7fe      	b.n	8000aa0 <main+0x64>
    }

    /* PHY link status check */
    do
    {
       if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000aa2:	f107 0313 	add.w	r3, r7, #19
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	200f      	movs	r0, #15
 8000aaa:	f001 fbc7 	bl	800223c <ctlwizchip>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d102      	bne.n	8000abc <main+0x80>
          printf("Unknown PHY Link stauts.\r\n");
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <main+0xd0>)
 8000ab8:	f004 fdc0 	bl	800563c <puts>
    }while(tmp == PHY_LINK_OFF);
 8000abc:	7cfb      	ldrb	r3, [r7, #19]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0ef      	beq.n	8000aa2 <main+0x66>
  	printf("SOCKET ERROR =1");
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <main+0xd4>)
 8000ac4:	f004 fd34 	bl	8005530 <iprintf>
    network_init();
 8000ac8:	f7ff ff20 	bl	800090c <network_init>
//	          {
//	            printf("SPIbuffer[%d] = %d \r\n", j, aRxBuffer[j]);
//	            HAL_Delay(1);
//	          }
//	          HAL_Delay(500);
	  		if( (retr = loopback_udps(SOCK_UDPS, gDATABUF, 3000)) < 0) {
 8000acc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ad0:	4910      	ldr	r1, [pc, #64]	; (8000b14 <main+0xd8>)
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 faba 	bl	800104c <loopback_udps>
 8000ad8:	6178      	str	r0, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	daf5      	bge.n	8000acc <main+0x90>
	  			printf("SOCKET ERROR : %ld\r\n", retr);
 8000ae0:	6979      	ldr	r1, [r7, #20]
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <main+0xdc>)
 8000ae4:	f004 fd24 	bl	8005530 <iprintf>
	  		if( (retr = loopback_udps(SOCK_UDPS, gDATABUF, 3000)) < 0) {
 8000ae8:	e7f0      	b.n	8000acc <main+0x90>
 8000aea:	bf00      	nop
 8000aec:	080064b0 	.word	0x080064b0
 8000af0:	0800086d 	.word	0x0800086d
 8000af4:	08000855 	.word	0x08000855
 8000af8:	080008ef 	.word	0x080008ef
 8000afc:	080008d5 	.word	0x080008d5
 8000b00:	080008ad 	.word	0x080008ad
 8000b04:	08000885 	.word	0x08000885
 8000b08:	08006450 	.word	0x08006450
 8000b0c:	0800646c 	.word	0x0800646c
 8000b10:	08006488 	.word	0x08006488
 8000b14:	20000244 	.word	0x20000244
 8000b18:	08006498 	.word	0x08006498

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b26:	2228      	movs	r2, #40	; 0x28
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fc52 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b6c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f80e 	bl	8003b98 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f828 	bl	8000bd6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fa78 	bl	8004098 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bae:	f000 f812 	bl	8000bd6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fc04 	bl	80043cc <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bca:	f000 f804 	bl	8000bd6 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3758      	adds	r7, #88	; 0x58
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	printf("no");
  /* USER CODE END Error_Handler_Debug */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
	...

08000be4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <MX_SPI2_Init+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c36:	f003 fc7f 	bl	8004538 <HAL_SPI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c40:	f7ff ffc9 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000b40 	.word	0x20000b40
 8000c4c:	40003800 	.word	0x40003800

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d131      	bne.n	8000cd4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	61d3      	str	r3, [r2, #28]
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_SPI_MspInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ca0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000cb6:	f002 fdc3 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x94>)
 8000cd0:	f002 fdb6 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40003800 	.word	0x40003800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_MspInit+0x5c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_MspInit+0x5c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x5c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x5c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_MspInit+0x60>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_MspInit+0x60>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <HardFault_Handler+0x4>

08000d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f001 ff5a 	bl	8002c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA1_Channel1_IRQHandler+0x10>)
 8000da6:	f002 fb0f 	bl	80033c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001a8 	.word	0x200001a8

08000db4 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA2_Channel4_5_IRQHandler+0x10>)
 8000dba:	f002 fb05 	bl	80033c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000104 	.word	0x20000104

08000dc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
	}

return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e009      	b.n	8000e28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fdfb 	bl	8000a18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf1      	blt.n	8000e14 <_write+0x12>
	}
	return len;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_close>:

int _close(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e60:	605a      	str	r2, [r3, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b085      	sub	sp, #20
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f004 fa58 	bl	8005380 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20010000 	.word	0x20010000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	200000d4 	.word	0x200000d4
 8000f04:	20000bf0 	.word	0x20000bf0

08000f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_USART1_UART_Init+0x50>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART1_UART_Init+0x4c>)
 8000f4c:	f004 f860 	bl	8005010 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f56:	f7ff fe3e 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000b98 	.word	0x20000b98
 8000f64:	40013800 	.word	0x40013800

08000f68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <HAL_UART_MspInit+0x8c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d131      	bne.n	8000fec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_UART_MspInit+0x90>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_UART_MspInit+0x94>)
 8000fce:	f002 fc37 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_UART_MspInit+0x94>)
 8000fe8:	f002 fc2a 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800

08001000 <Reset_Handler>:
 8001000:	2100      	movs	r1, #0
 8001002:	e003      	b.n	800100c <LoopCopyDataInit>

08001004 <CopyDataInit>:
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <LoopFillZerobss+0x14>)
 8001006:	585b      	ldr	r3, [r3, r1]
 8001008:	5043      	str	r3, [r0, r1]
 800100a:	3104      	adds	r1, #4

0800100c <LoopCopyDataInit>:
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <LoopFillZerobss+0x18>)
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <LoopFillZerobss+0x1c>)
 8001010:	1842      	adds	r2, r0, r1
 8001012:	429a      	cmp	r2, r3
 8001014:	d3f6      	bcc.n	8001004 <CopyDataInit>
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x20>)
 8001018:	e002      	b.n	8001020 <LoopFillZerobss>

0800101a <FillZerobss>:
 800101a:	2300      	movs	r3, #0
 800101c:	f842 3b04 	str.w	r3, [r2], #4

08001020 <LoopFillZerobss>:
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <LoopFillZerobss+0x24>)
 8001022:	429a      	cmp	r2, r3
 8001024:	d3f9      	bcc.n	800101a <FillZerobss>
 8001026:	f7ff ff6f 	bl	8000f08 <SystemInit>
 800102a:	f004 f9af 	bl	800538c <__libc_init_array>
 800102e:	f7ff fd05 	bl	8000a3c <main>
 8001032:	4770      	bx	lr
 8001034:	0800669c 	.word	0x0800669c
 8001038:	20000000 	.word	0x20000000
 800103c:	200000b8 	.word	0x200000b8
 8001040:	200000b8 	.word	0x200000b8
 8001044:	20000bec 	.word	0x20000bec

08001048 <ADC1_2_IRQHandler>:
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3301      	adds	r3, #1
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f879 	bl	8001160 <WIZCHIP_READ>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d052      	beq.n	800111a <loopback_udps+0xce>
 8001074:	2b22      	cmp	r3, #34	; 0x22
 8001076:	d165      	bne.n	8001144 <loopback_udps+0xf8>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fa15 	bl	80014aa <getSn_RX_RSR>
 8001080:	4603      	mov	r3, r0
 8001082:	82fb      	strh	r3, [r7, #22]
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d05e      	beq.n	8001148 <loopback_udps+0xfc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800108a:	8afb      	ldrh	r3, [r7, #22]
 800108c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001090:	d902      	bls.n	8001098 <loopback_udps+0x4c>
 8001092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001096:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8001098:	f107 010c 	add.w	r1, r7, #12
 800109c:	8afa      	ldrh	r2, [r7, #22]
 800109e:	79f8      	ldrb	r0, [r7, #7]
 80010a0:	f107 030a 	add.w	r3, r7, #10
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	460b      	mov	r3, r1
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	f000 fe03 	bl	8001cb4 <recvfrom>
 80010ae:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dc07      	bgt.n	80010c6 <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <loopback_udps+0x108>)
 80010be:	f004 fa37 	bl	8005530 <iprintf>
#endif
               return ret;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	e042      	b.n	800114c <loopback_udps+0x100>
            }
            size = (uint16_t) ret;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 80010ce:	e01f      	b.n	8001110 <loopback_udps+0xc4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 80010d0:	8abb      	ldrh	r3, [r7, #20]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	18d1      	adds	r1, r2, r3
 80010d6:	8afa      	ldrh	r2, [r7, #22]
 80010d8:	8abb      	ldrh	r3, [r7, #20]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	897b      	ldrh	r3, [r7, #10]
 80010e0:	f107 040c 	add.w	r4, r7, #12
 80010e4:	79f8      	ldrb	r0, [r7, #7]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4623      	mov	r3, r4
 80010ea:	f000 fcad 	bl	8001a48 <sendto>
 80010ee:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da07      	bge.n	8001106 <loopback_udps+0xba>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <loopback_udps+0x10c>)
 80010fe:	f004 fa17 	bl	8005530 <iprintf>
#endif
                  return ret;
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	e022      	b.n	800114c <loopback_udps+0x100>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	b29a      	uxth	r2, r3
 800110a:	8abb      	ldrh	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8001110:	8aba      	ldrh	r2, [r7, #20]
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	429a      	cmp	r2, r3
 8001116:	d1db      	bne.n	80010d0 <loopback_udps+0x84>
            }
         }
         break;
 8001118:	e016      	b.n	8001148 <loopback_udps+0xfc>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 800111a:	88ba      	ldrh	r2, [r7, #4]
 800111c:	79f8      	ldrb	r0, [r7, #7]
 800111e:	2300      	movs	r3, #0
 8001120:	2102      	movs	r1, #2
 8001122:	f000 fb0d 	bl	8001740 <socket>
 8001126:	4603      	mov	r3, r0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <loopback_udps+0xea>
            return ret;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	e00a      	b.n	800114c <loopback_udps+0x100>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <loopback_udps+0x110>)
 800113e:	f004 f9f7 	bl	8005530 <iprintf>
#endif
         break;
 8001142:	e002      	b.n	800114a <loopback_udps+0xfe>
      default :
         break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <loopback_udps+0xfe>
         break;
 8001148:	bf00      	nop
   }
   return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	08006578 	.word	0x08006578
 8001158:	08006594 	.word	0x08006594
 800115c:	080065ac 	.word	0x080065ac

08001160 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <WIZCHIP_READ+0x94>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <WIZCHIP_READ+0x94>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <WIZCHIP_READ+0x94>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <WIZCHIP_READ+0x24>
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <WIZCHIP_READ+0x94>)
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	d114      	bne.n	80011ae <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <WIZCHIP_READ+0x94>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	0c12      	lsrs	r2, r2, #16
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	4610      	mov	r0, r2
 8001190:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <WIZCHIP_READ+0x94>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	0a12      	lsrs	r2, r2, #8
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	4610      	mov	r0, r2
 800119e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <WIZCHIP_READ+0x94>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	4610      	mov	r0, r2
 80011aa:	4798      	blx	r3
 80011ac:	e011      	b.n	80011d2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <WIZCHIP_READ+0x94>)
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	2103      	movs	r1, #3
 80011ce:	4610      	mov	r0, r2
 80011d0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <WIZCHIP_READ+0x94>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4798      	blx	r3
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <WIZCHIP_READ+0x94>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <WIZCHIP_READ+0x94>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	4798      	blx	r3
   return ret;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000020 	.word	0x20000020

080011f8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <WIZCHIP_WRITE+0x98>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4798      	blx	r3
   WIZCHIP.CS._select();
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <WIZCHIP_WRITE+0x98>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <WIZCHIP_WRITE+0x98>)
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	d119      	bne.n	8001254 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <WIZCHIP_WRITE+0x98>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	0c12      	lsrs	r2, r2, #16
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	4610      	mov	r0, r2
 800122c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <WIZCHIP_WRITE+0x98>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	0a12      	lsrs	r2, r2, #8
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <WIZCHIP_WRITE+0x98>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <WIZCHIP_WRITE+0x98>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	4610      	mov	r0, r2
 8001250:	4798      	blx	r3
 8001252:	e013      	b.n	800127c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	b2db      	uxtb	r3, r3
 800125a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b2db      	uxtb	r3, r3
 8001262:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <WIZCHIP_WRITE+0x98>)
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	2104      	movs	r1, #4
 8001278:	4610      	mov	r0, r2
 800127a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <WIZCHIP_WRITE+0x98>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <WIZCHIP_WRITE+0x98>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	4798      	blx	r3
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000020 	.word	0x20000020

08001294 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	4613      	mov	r3, r2
 80012a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <WIZCHIP_READ_BUF+0x2a>
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d126      	bne.n	800130c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	0c12      	lsrs	r2, r2, #16
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	4610      	mov	r0, r2
 80012ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	0a12      	lsrs	r2, r2, #8
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	4610      	mov	r0, r2
 80012d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	4610      	mov	r0, r2
 80012e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	82fb      	strh	r3, [r7, #22]
 80012ea:	e00a      	b.n	8001302 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	8afa      	ldrh	r2, [r7, #22]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	188c      	adds	r4, r1, r2
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80012fc:	8afb      	ldrh	r3, [r7, #22]
 80012fe:	3301      	adds	r3, #1
 8001300:	82fb      	strh	r3, [r7, #22]
 8001302:	8afa      	ldrh	r2, [r7, #22]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	429a      	cmp	r2, r3
 8001308:	d3f0      	bcc.n	80012ec <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800130a:	e017      	b.n	800133c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	b2db      	uxtb	r3, r3
 8001312:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b2db      	uxtb	r3, r3
 800131a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	f107 0210 	add.w	r2, r7, #16
 800132a:	2103      	movs	r1, #3
 800132c:	4610      	mov	r0, r2
 800132e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	88fa      	ldrh	r2, [r7, #6]
 8001336:	4611      	mov	r1, r2
 8001338:	68b8      	ldr	r0, [r7, #8]
 800133a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001342:	4b03      	ldr	r3, [pc, #12]	; (8001350 <WIZCHIP_READ_BUF+0xbc>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4798      	blx	r3
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000020 	.word	0x20000020

08001354 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	4613      	mov	r3, r2
 8001360:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2b00      	cmp	r3, #0
 800137c:	d126      	bne.n	80013cc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	0c12      	lsrs	r2, r2, #16
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	4610      	mov	r0, r2
 800138a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	0a12      	lsrs	r2, r2, #8
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	4610      	mov	r0, r2
 8001398:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	4610      	mov	r0, r2
 80013a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	82fb      	strh	r3, [r7, #22]
 80013aa:	e00a      	b.n	80013c2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	8afa      	ldrh	r2, [r7, #22]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	440a      	add	r2, r1
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	4610      	mov	r0, r2
 80013ba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80013bc:	8afb      	ldrh	r3, [r7, #22]
 80013be:	3301      	adds	r3, #1
 80013c0:	82fb      	strh	r3, [r7, #22]
 80013c2:	8afa      	ldrh	r2, [r7, #22]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3f0      	bcc.n	80013ac <WIZCHIP_WRITE_BUF+0x58>
 80013ca:	e017      	b.n	80013fc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f107 0210 	add.w	r2, r7, #16
 80013ea:	2103      	movs	r1, #3
 80013ec:	4610      	mov	r0, r2
 80013ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	4611      	mov	r1, r2
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <WIZCHIP_WRITE_BUF+0xbc>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	4798      	blx	r3
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000020 	.word	0x20000020

08001414 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800141e:	2300      	movs	r3, #0
 8001420:	81fb      	strh	r3, [r7, #14]
 8001422:	2300      	movs	r3, #0
 8001424:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	3301      	adds	r3, #1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe94 	bl	8001160 <WIZCHIP_READ>
 8001438:	4603      	mov	r3, r0
 800143a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800143c:	89bb      	ldrh	r3, [r7, #12]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b29c      	uxth	r4, r3
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3301      	adds	r3, #1
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe86 	bl	8001160 <WIZCHIP_READ>
 8001454:	4603      	mov	r3, r0
 8001456:	b29b      	uxth	r3, r3
 8001458:	4423      	add	r3, r4
 800145a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800145c:	89bb      	ldrh	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01a      	beq.n	8001498 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	3301      	adds	r3, #1
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe76 	bl	8001160 <WIZCHIP_READ>
 8001474:	4603      	mov	r3, r0
 8001476:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b29c      	uxth	r4, r3
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3301      	adds	r3, #1
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe68 	bl	8001160 <WIZCHIP_READ>
 8001490:	4603      	mov	r3, r0
 8001492:	b29b      	uxth	r3, r3
 8001494:	4423      	add	r3, r4
 8001496:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001498:	89fa      	ldrh	r2, [r7, #14]
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d1c2      	bne.n	8001426 <getSn_TX_FSR+0x12>
   return val;
 80014a0:	89fb      	ldrh	r3, [r7, #14]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}

080014aa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	2300      	movs	r3, #0
 80014ba:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe49 	bl	8001160 <WIZCHIP_READ>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80014d2:	89bb      	ldrh	r3, [r7, #12]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b29c      	uxth	r4, r3
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	3301      	adds	r3, #1
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe3b 	bl	8001160 <WIZCHIP_READ>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4423      	add	r3, r4
 80014f0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d01a      	beq.n	800152e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	3301      	adds	r3, #1
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe2b 	bl	8001160 <WIZCHIP_READ>
 800150a:	4603      	mov	r3, r0
 800150c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b29c      	uxth	r4, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	3301      	adds	r3, #1
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe1d 	bl	8001160 <WIZCHIP_READ>
 8001526:	4603      	mov	r3, r0
 8001528:	b29b      	uxth	r3, r3
 800152a:	4423      	add	r3, r4
 800152c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800152e:	89fa      	ldrh	r2, [r7, #14]
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	429a      	cmp	r2, r3
 8001534:	d1c2      	bne.n	80014bc <getSn_RX_RSR+0x12>
   return val;
 8001536:	89fb      	ldrh	r3, [r7, #14]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}

08001540 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d048      	beq.n	80015f0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3301      	adds	r3, #1
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fdf8 	bl	8001160 <WIZCHIP_READ>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b29c      	uxth	r4, r3
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	3301      	adds	r3, #1
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fdeb 	bl	8001160 <WIZCHIP_READ>
 800158a:	4603      	mov	r3, r0
 800158c:	b29b      	uxth	r3, r3
 800158e:	4423      	add	r3, r4
 8001590:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	3202      	adds	r2, #2
 800159c:	00d2      	lsls	r2, r2, #3
 800159e:	4413      	add	r3, r2
 80015a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7ff fed3 	bl	8001354 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80015ae:	89fa      	ldrh	r2, [r7, #14]
 80015b0:	88bb      	ldrh	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3301      	adds	r3, #1
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80015c2:	461a      	mov	r2, r3
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fe12 	bl	80011f8 <WIZCHIP_WRITE>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3301      	adds	r3, #1
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80015e0:	461a      	mov	r2, r3
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff fe05 	bl	80011f8 <WIZCHIP_WRITE>
 80015ee:	e000      	b.n	80015f2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80015f0:	bf00      	nop
}
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d048      	beq.n	80016a8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	3301      	adds	r3, #1
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fd9c 	bl	8001160 <WIZCHIP_READ>
 8001628:	4603      	mov	r3, r0
 800162a:	b29b      	uxth	r3, r3
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b29c      	uxth	r4, r3
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	3301      	adds	r3, #1
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fd8f 	bl	8001160 <WIZCHIP_READ>
 8001642:	4603      	mov	r3, r0
 8001644:	b29b      	uxth	r3, r3
 8001646:	4423      	add	r3, r4
 8001648:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	3203      	adds	r2, #3
 8001654:	00d2      	lsls	r2, r2, #3
 8001656:	4413      	add	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	6839      	ldr	r1, [r7, #0]
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f7ff fe17 	bl	8001294 <WIZCHIP_READ_BUF>
   ptr += len;
 8001666:	89fa      	ldrh	r2, [r7, #14]
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	3301      	adds	r3, #1
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800167a:	461a      	mov	r2, r3
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f7ff fdb6 	bl	80011f8 <WIZCHIP_WRITE>
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3301      	adds	r3, #1
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001698:	461a      	mov	r2, r3
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fda9 	bl	80011f8 <WIZCHIP_WRITE>
 80016a6:	e000      	b.n	80016aa <wiz_recv_data+0xb2>
   if(len == 0) return;
 80016a8:	bf00      	nop
}
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}

080016b0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3301      	adds	r3, #1
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd45 	bl	8001160 <WIZCHIP_READ>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29b      	uxth	r3, r3
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b29c      	uxth	r4, r3
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	3301      	adds	r3, #1
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd38 	bl	8001160 <WIZCHIP_READ>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4423      	add	r3, r4
 80016f6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80016f8:	89fa      	ldrh	r2, [r7, #14]
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	3301      	adds	r3, #1
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800170c:	461a      	mov	r2, r3
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	4610      	mov	r0, r2
 800171a:	f7ff fd6d 	bl	80011f8 <WIZCHIP_WRITE>
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	3301      	adds	r3, #1
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800172a:	461a      	mov	r2, r3
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7ff fd60 	bl	80011f8 <WIZCHIP_WRITE>
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4623      	mov	r3, r4
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	4603      	mov	r3, r0
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	460b      	mov	r3, r1
 8001758:	80bb      	strh	r3, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d902      	bls.n	800176a <socket+0x2a>
 8001764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001768:	e0f2      	b.n	8001950 <socket+0x210>
	switch(protocol)
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <socket+0x3c>
 8001770:	2b00      	cmp	r3, #0
 8001772:	dd11      	ble.n	8001798 <socket+0x58>
 8001774:	3b02      	subs	r3, #2
 8001776:	2b02      	cmp	r3, #2
 8001778:	d80e      	bhi.n	8001798 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800177a:	e011      	b.n	80017a0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2204      	movs	r2, #4
 8001782:	4619      	mov	r1, r3
 8001784:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001788:	f7ff fd84 	bl	8001294 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <socket+0x5e>
 8001792:	f06f 0302 	mvn.w	r3, #2
 8001796:	e0db      	b.n	8001950 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001798:	f06f 0304 	mvn.w	r3, #4
 800179c:	e0d8      	b.n	8001950 <socket+0x210>
	    break;
 800179e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <socket+0x70>
 80017aa:	f06f 0305 	mvn.w	r3, #5
 80017ae:	e0cf      	b.n	8001950 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d025      	beq.n	8001802 <socket+0xc2>
	{
   	switch(protocol)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <socket+0x82>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d008      	beq.n	80017d2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80017c0:	e024      	b.n	800180c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11c      	bne.n	8001806 <socket+0xc6>
 80017cc:	f06f 0305 	mvn.w	r3, #5
 80017d0:	e0be      	b.n	8001950 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80017dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db02      	blt.n	80017ea <socket+0xaa>
 80017e4:	f06f 0305 	mvn.w	r3, #5
 80017e8:	e0b2      	b.n	8001950 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00a      	beq.n	800180a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80017f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db06      	blt.n	800180a <socket+0xca>
 80017fc:	f06f 0305 	mvn.w	r3, #5
 8001800:	e0a6      	b.n	8001950 <socket+0x210>
   	}
   }
 8001802:	bf00      	nop
 8001804:	e002      	b.n	800180c <socket+0xcc>
   	      break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <socket+0xcc>
   	      break;
 800180a:	bf00      	nop
	close(sn);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8ac 	bl	800196c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3301      	adds	r3, #1
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4618      	mov	r0, r3
 800181e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001822:	f023 030f 	bic.w	r3, r3, #15
 8001826:	b25a      	sxtb	r2, r3
 8001828:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800182c:	4313      	orrs	r3, r2
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff fce0 	bl	80011f8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d110      	bne.n	8001860 <socket+0x120>
	{
	   port = sock_any_port++;
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <socket+0x218>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	b291      	uxth	r1, r2
 8001846:	4a44      	ldr	r2, [pc, #272]	; (8001958 <socket+0x218>)
 8001848:	8011      	strh	r1, [r2, #0]
 800184a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <socket+0x218>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001854:	4293      	cmp	r3, r2
 8001856:	d103      	bne.n	8001860 <socket+0x120>
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <socket+0x218>)
 800185a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800185e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	3301      	adds	r3, #1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186c:	461a      	mov	r2, r3
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff fcbd 	bl	80011f8 <WIZCHIP_WRITE>
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	3301      	adds	r3, #1
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	461a      	mov	r2, r3
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff fcb0 	bl	80011f8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3301      	adds	r3, #1
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018a4:	2101      	movs	r1, #1
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fca6 	bl	80011f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80018ac:	bf00      	nop
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	3301      	adds	r3, #1
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc50 	bl	8001160 <WIZCHIP_READ>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f3      	bne.n	80018ae <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2201      	movs	r2, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b21      	ldr	r3, [pc, #132]	; (800195c <socket+0x21c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <socket+0x21c>)
 80018e2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <socket+0x21c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <socket+0x21c>)
 8001900:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2201      	movs	r2, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	b21b      	sxth	r3, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <socket+0x220>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	b21b      	sxth	r3, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <socket+0x220>)
 800191e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <socket+0x224>)
 8001924:	2100      	movs	r1, #0
 8001926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <socket+0x228>)
 800192e:	2100      	movs	r1, #0
 8001930:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001932:	bf00      	nop
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	3301      	adds	r3, #1
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fc0d 	bl	8001160 <WIZCHIP_READ>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f3      	beq.n	8001934 <socket+0x1f4>
   return (int8_t)sn;
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	2000001c 	.word	0x2000001c
 800195c:	200000d8 	.word	0x200000d8
 8001960:	200000da 	.word	0x200000da
 8001964:	200000dc 	.word	0x200000dc
 8001968:	200000ec 	.word	0x200000ec

0800196c <close>:

int8_t close(uint8_t sn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d902      	bls.n	8001982 <close+0x16>
 800197c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001980:	e055      	b.n	8001a2e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	3301      	adds	r3, #1
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800198e:	2110      	movs	r1, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fc31 	bl	80011f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001996:	bf00      	nop
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	3301      	adds	r3, #1
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fbdb 	bl	8001160 <WIZCHIP_READ>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f3      	bne.n	8001998 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019bc:	211f      	movs	r1, #31
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fc1a 	bl	80011f8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2201      	movs	r2, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <close+0xcc>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4013      	ands	r3, r2
 80019da:	b21b      	sxth	r3, r3
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <close+0xcc>)
 80019e0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2201      	movs	r2, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <close+0xd0>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4013      	ands	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <close+0xd0>)
 80019fe:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <close+0xd4>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <close+0xd8>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001a12:	bf00      	nop
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	3301      	adds	r3, #1
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb9d 	bl	8001160 <WIZCHIP_READ>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f3      	bne.n	8001a14 <close+0xa8>
	return SOCK_OK;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200000d8 	.word	0x200000d8
 8001a3c:	200000da 	.word	0x200000da
 8001a40:	200000dc 	.word	0x200000dc
 8001a44:	200000ec 	.word	0x200000ec

08001a48 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	4613      	mov	r3, r2
 8001a58:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d902      	bls.n	8001a6e <sendto+0x26>
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6c:	e11b      	b.n	8001ca6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	3301      	adds	r3, #1
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb72 	bl	8001160 <WIZCHIP_READ>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b02      	subs	r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d902      	bls.n	8001a8e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001a88:	f06f 0304 	mvn.w	r3, #4
 8001a8c:	e10b      	b.n	8001ca6 <sendto+0x25e>
         break;
 8001a8e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001a90:	89bb      	ldrh	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <sendto+0x54>
 8001a96:	f06f 030d 	mvn.w	r3, #13
 8001a9a:	e104      	b.n	8001ca6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	3201      	adds	r2, #1
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	3202      	adds	r2, #2
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	3203      	adds	r2, #3
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <sendto+0xa8>
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb40 	bl	8001160 <WIZCHIP_READ>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d002      	beq.n	8001af0 <sendto+0xa8>
 8001aea:	f06f 030b 	mvn.w	r3, #11
 8001aee:	e0da      	b.n	8001ca6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001af0:	8c3b      	ldrh	r3, [r7, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10e      	bne.n	8001b14 <sendto+0xcc>
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	3301      	adds	r3, #1
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb2e 	bl	8001160 <WIZCHIP_READ>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d002      	beq.n	8001b14 <sendto+0xcc>
 8001b0e:	f06f 030a 	mvn.w	r3, #10
 8001b12:	e0c8      	b.n	8001ca6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	3301      	adds	r3, #1
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb1d 	bl	8001160 <WIZCHIP_READ>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b42      	cmp	r3, #66	; 0x42
 8001b2e:	d008      	beq.n	8001b42 <sendto+0xfa>
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b22      	cmp	r3, #34	; 0x22
 8001b34:	d005      	beq.n	8001b42 <sendto+0xfa>
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	2b32      	cmp	r3, #50	; 0x32
 8001b3a:	d002      	beq.n	8001b42 <sendto+0xfa>
 8001b3c:	f06f 0306 	mvn.w	r3, #6
 8001b40:	e0b1      	b.n	8001ca6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	3301      	adds	r3, #1
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001b4e:	2204      	movs	r2, #4
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fbfe 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b64:	461a      	mov	r2, r3
 8001b66:	8c3b      	ldrh	r3, [r7, #32]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff fb41 	bl	80011f8 <WIZCHIP_WRITE>
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b82:	461a      	mov	r2, r3
 8001b84:	8c3b      	ldrh	r3, [r7, #32]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f7ff fb34 	bl	80011f8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3301      	adds	r3, #1
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fadf 	bl	8001160 <WIZCHIP_READ>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001baa:	89ba      	ldrh	r2, [r7, #12]
 8001bac:	8abb      	ldrh	r3, [r7, #20]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d901      	bls.n	8001bb6 <sendto+0x16e>
 8001bb2:	8abb      	ldrh	r3, [r7, #20]
 8001bb4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fc2b 	bl	8001414 <getSn_TX_FSR>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fac6 	bl	8001160 <WIZCHIP_READ>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <sendto+0x198>
 8001bda:	f06f 0303 	mvn.w	r3, #3
 8001bde:	e062      	b.n	8001ca6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001be0:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <sendto+0x268>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	fa42 f303 	asr.w	r3, r2, r3
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <sendto+0x1b8>
 8001bf4:	89ba      	ldrh	r2, [r7, #12]
 8001bf6:	8abb      	ldrh	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d901      	bls.n	8001c00 <sendto+0x1b8>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e052      	b.n	8001ca6 <sendto+0x25e>
      if(len <= freesize) break;
 8001c00:	89ba      	ldrh	r2, [r7, #12]
 8001c02:	8abb      	ldrh	r3, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d900      	bls.n	8001c0a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8001c08:	e7d5      	b.n	8001bb6 <sendto+0x16e>
      if(len <= freesize) break;
 8001c0a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001c0c:	89ba      	ldrh	r2, [r7, #12]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc94 	bl	8001540 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c24:	2120      	movs	r1, #32
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fae6 	bl	80011f8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001c2c:	bf00      	nop
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	3301      	adds	r3, #1
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa90 	bl	8001160 <WIZCHIP_READ>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f3      	bne.n	8001c2e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa84 	bl	8001160 <WIZCHIP_READ>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3301      	adds	r3, #1
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c76:	2110      	movs	r1, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fabd 	bl	80011f8 <WIZCHIP_WRITE>
         break;
 8001c7e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	e010      	b.n	8001ca6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0db      	beq.n	8001c46 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3301      	adds	r3, #1
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff faab 	bl	80011f8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001ca2:	f06f 030c 	mvn.w	r3, #12
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200000d8 	.word	0x200000d8

08001cb4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d902      	bls.n	8001cd6 <recvfrom+0x22>
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd4:	e1d4      	b.n	8002080 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3301      	adds	r3, #1
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa3e 	bl	8001160 <WIZCHIP_READ>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	777b      	strb	r3, [r7, #29]
 8001ce8:	7f7b      	ldrb	r3, [r7, #29]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b02      	subs	r3, #2
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d902      	bls.n	8001cfa <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001cf4:	f06f 0304 	mvn.w	r3, #4
 8001cf8:	e1c2      	b.n	8002080 <recvfrom+0x3cc>
         break;
 8001cfa:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001cfc:	89bb      	ldrh	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <recvfrom+0x54>
 8001d02:	f06f 030d 	mvn.w	r3, #13
 8001d06:	e1bb      	b.n	8002080 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4a88      	ldr	r2, [pc, #544]	; (8001f2c <recvfrom+0x278>)
 8001d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d128      	bne.n	8001d66 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fbc7 	bl	80014aa <getSn_RX_RSR>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	3301      	adds	r3, #1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fa17 	bl	8001160 <WIZCHIP_READ>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <recvfrom+0x8a>
 8001d38:	f06f 0303 	mvn.w	r3, #3
 8001d3c:	e1a0      	b.n	8002080 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001d3e:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <recvfrom+0x27c>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	fa42 f303 	asr.w	r3, r2, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <recvfrom+0xa8>
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <recvfrom+0xa8>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e191      	b.n	8002080 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8001d5c:	8bfb      	ldrh	r3, [r7, #30]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d100      	bne.n	8001d64 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8001d62:	e7d7      	b.n	8001d14 <recvfrom+0x60>
         if(pack_len != 0) break;
 8001d64:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001d66:	7f7b      	ldrb	r3, [r7, #29]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d079      	beq.n	8001e64 <recvfrom+0x1b0>
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	f300 8142 	bgt.w	8001ffa <recvfrom+0x346>
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <recvfrom+0xce>
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f000 80dc 	beq.w	8001f38 <recvfrom+0x284>
 8001d80:	e13b      	b.n	8001ffa <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	4a69      	ldr	r2, [pc, #420]	; (8001f2c <recvfrom+0x278>)
 8001d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d152      	bne.n	8001e34 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8001d8e:	f107 0114 	add.w	r1, r7, #20
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2208      	movs	r2, #8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fc2e 	bl	80015f8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3301      	adds	r3, #1
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fa24 	bl	80011f8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001db0:	bf00      	nop
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	3301      	adds	r3, #1
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9ce 	bl	8001160 <WIZCHIP_READ>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f3      	bne.n	8001db2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8001dca:	7d3a      	ldrb	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	7d7a      	ldrb	r2, [r7, #21]
 8001dd6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	7dba      	ldrb	r2, [r7, #22]
 8001dde:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3303      	adds	r3, #3
 8001de4:	7dfa      	ldrb	r2, [r7, #23]
 8001de6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8001de8:	7e3b      	ldrb	r3, [r7, #24]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	7e7b      	ldrb	r3, [r7, #25]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8001e04:	7eba      	ldrb	r2, [r7, #26]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	b291      	uxth	r1, r2
 8001e0a:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <recvfrom+0x278>)
 8001e0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <recvfrom+0x278>)
 8001e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	7efb      	ldrb	r3, [r7, #27]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	440a      	add	r2, r1
 8001e24:	b291      	uxth	r1, r2
 8001e26:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <recvfrom+0x278>)
 8001e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4a41      	ldr	r2, [pc, #260]	; (8001f34 <recvfrom+0x280>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <recvfrom+0x278>)
 8001e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d202      	bcs.n	8001e48 <recvfrom+0x194>
 8001e42:	89bb      	ldrh	r3, [r7, #12]
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	e004      	b.n	8001e52 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <recvfrom+0x278>)
 8001e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e50:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001e56:	8bfa      	ldrh	r2, [r7, #30]
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fbcb 	bl	80015f8 <wiz_recv_data>
			break;
 8001e62:	e0d6      	b.n	8002012 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <recvfrom+0x278>)
 8001e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d146      	bne.n	8001efe <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8001e70:	f107 0114 	add.w	r1, r7, #20
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	2202      	movs	r2, #2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fbbd 	bl	80015f8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3301      	adds	r3, #1
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f9b3 	bl	80011f8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001e92:	bf00      	nop
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3301      	adds	r3, #1
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f95d 	bl	8001160 <WIZCHIP_READ>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f3      	bne.n	8001e94 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8001eac:	7d3a      	ldrb	r2, [r7, #20]
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b291      	uxth	r1, r2
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <recvfrom+0x278>)
 8001eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <recvfrom+0x278>)
 8001ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	7d7b      	ldrb	r3, [r7, #21]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	3a02      	subs	r2, #2
 8001ed0:	b291      	uxth	r1, r2
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <recvfrom+0x278>)
 8001ed4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <recvfrom+0x278>)
 8001edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d906      	bls.n	8001ef6 <recvfrom+0x242>
   			{
   			   close(sn);
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd3e 	bl	800196c <close>
   			   return SOCKFATAL_PACKLEN;
 8001ef0:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8001ef4:	e0c4      	b.n	8002080 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <recvfrom+0x280>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <recvfrom+0x278>)
 8001f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f06:	89ba      	ldrh	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d202      	bcs.n	8001f12 <recvfrom+0x25e>
 8001f0c:	89bb      	ldrh	r3, [r7, #12]
 8001f0e:	83fb      	strh	r3, [r7, #30]
 8001f10:	e004      	b.n	8001f1c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <recvfrom+0x278>)
 8001f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f1a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8001f1c:	8bfa      	ldrh	r2, [r7, #30]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fb68 	bl	80015f8 <wiz_recv_data>
		   break;
 8001f28:	e073      	b.n	8002012 <recvfrom+0x35e>
 8001f2a:	bf00      	nop
 8001f2c:	200000dc 	.word	0x200000dc
 8001f30:	200000d8 	.word	0x200000d8
 8001f34:	200000ec 	.word	0x200000ec
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	4a53      	ldr	r2, [pc, #332]	; (8002088 <recvfrom+0x3d4>)
 8001f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d144      	bne.n	8001fce <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8001f44:	f107 0114 	add.w	r1, r7, #20
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fb53 	bl	80015f8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3301      	adds	r3, #1
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f949 	bl	80011f8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001f66:	bf00      	nop
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f8f3 	bl	8001160 <WIZCHIP_READ>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f3      	bne.n	8001f68 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8001f80:	7d3a      	ldrb	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	7d7a      	ldrb	r2, [r7, #21]
 8001f8c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3302      	adds	r3, #2
 8001f92:	7dba      	ldrb	r2, [r7, #22]
 8001f94:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	7dfa      	ldrb	r2, [r7, #23]
 8001f9c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8001f9e:	7e3a      	ldrb	r2, [r7, #24]
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	b291      	uxth	r1, r2
 8001fa4:	4a38      	ldr	r2, [pc, #224]	; (8002088 <recvfrom+0x3d4>)
 8001fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	4a36      	ldr	r2, [pc, #216]	; (8002088 <recvfrom+0x3d4>)
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	7e7b      	ldrb	r3, [r7, #25]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	b291      	uxth	r1, r2
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <recvfrom+0x3d4>)
 8001fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4a30      	ldr	r2, [pc, #192]	; (800208c <recvfrom+0x3d8>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <recvfrom+0x3d4>)
 8001fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fd6:	89ba      	ldrh	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d202      	bcs.n	8001fe2 <recvfrom+0x32e>
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	83fb      	strh	r3, [r7, #30]
 8001fe0:	e004      	b.n	8001fec <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <recvfrom+0x3d4>)
 8001fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fea:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001fec:	8bfa      	ldrh	r2, [r7, #30]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb00 	bl	80015f8 <wiz_recv_data>
			break;
 8001ff8:	e00b      	b.n	8002012 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fb55 	bl	80016b0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	491f      	ldr	r1, [pc, #124]	; (8002088 <recvfrom+0x3d4>)
 800200a:	8bfa      	ldrh	r2, [r7, #30]
 800200c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002010:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3301      	adds	r3, #1
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f8e9 	bl	80011f8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002026:	bf00      	nop
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3301      	adds	r3, #1
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f893 	bl	8001160 <WIZCHIP_READ>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f3      	bne.n	8002028 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <recvfrom+0x3d4>)
 8002044:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	8bfa      	ldrh	r2, [r7, #30]
 800204c:	1a8a      	subs	r2, r1, r2
 800204e:	b291      	uxth	r1, r2
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <recvfrom+0x3d4>)
 8002052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <recvfrom+0x3d4>)
 800205a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <recvfrom+0x3d8>)
 8002066:	5cd2      	ldrb	r2, [r2, r3]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	b2d1      	uxtb	r1, r2
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <recvfrom+0x3d8>)
 8002072:	54d1      	strb	r1, [r2, r3]
 8002074:	e003      	b.n	800207e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <recvfrom+0x3d8>)
 800207a:	2100      	movs	r1, #0
 800207c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800207e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200000dc 	.word	0x200000dc
 800208c:	200000ec 	.word	0x200000ec

08002090 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	2300      	movs	r3, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <reg_wizchip_cs_cbfunc+0x16>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <reg_wizchip_cs_cbfunc+0x3c>)
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <reg_wizchip_cs_cbfunc+0x40>)
 800215e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <reg_wizchip_cs_cbfunc+0x3c>)
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <reg_wizchip_cs_cbfunc+0x44>)
 8002164:	619a      	str	r2, [r3, #24]
 8002166:	e006      	b.n	8002176 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <reg_wizchip_cs_cbfunc+0x3c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <reg_wizchip_cs_cbfunc+0x3c>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6193      	str	r3, [r2, #24]
   }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000020 	.word	0x20000020
 8002184:	080020a9 	.word	0x080020a9
 8002188:	080020b5 	.word	0x080020b5

0800218c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002196:	bf00      	nop
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <reg_wizchip_spi_cbfunc+0x4c>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f9      	beq.n	8002198 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <reg_wizchip_spi_cbfunc+0x24>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <reg_wizchip_spi_cbfunc+0x50>)
 80021b4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80021b8:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <reg_wizchip_spi_cbfunc+0x54>)
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	e006      	b.n	80021cc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6213      	str	r3, [r2, #32]
   }
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000020 	.word	0x20000020
 80021dc:	080020f5 	.word	0x080020f5
 80021e0:	08002103 	.word	0x08002103

080021e4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80021ee:	bf00      	nop
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f9      	beq.n	80021f0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <reg_wizchip_spiburst_cbfunc+0x24>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <reg_wizchip_spiburst_cbfunc+0x50>)
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
 8002214:	e006      	b.n	8002224 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002216:	4a06      	ldr	r2, [pc, #24]	; (8002230 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000020 	.word	0x20000020
 8002234:	08002117 	.word	0x08002117
 8002238:	0800212d 	.word	0x0800212d

0800223c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f200 80c2 	bhi.w	80023e0 <ctlwizchip+0x1a4>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <ctlwizchip+0x28>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	080022a5 	.word	0x080022a5
 8002268:	080022ab 	.word	0x080022ab
 800226c:	080022d7 	.word	0x080022d7
 8002270:	080022cb 	.word	0x080022cb
 8002274:	080022e5 	.word	0x080022e5
 8002278:	080022f1 	.word	0x080022f1
 800227c:	080022ff 	.word	0x080022ff
 8002280:	08002325 	.word	0x08002325
 8002284:	0800234b 	.word	0x0800234b
 8002288:	08002385 	.word	0x08002385
 800228c:	0800238b 	.word	0x0800238b
 8002290:	08002393 	.word	0x08002393
 8002294:	080023e7 	.word	0x080023e7
 8002298:	0800239b 	.word	0x0800239b
 800229c:	080023a9 	.word	0x080023a9
 80022a0:	080023c5 	.word	0x080023c5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80022a4:	f000 f8e6 	bl	8002474 <wizchip_sw_reset>
         break;
 80022a8:	e09e      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3308      	adds	r3, #8
 80022b8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f923 	bl	800250c <wizchip_init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	e08f      	b.n	80023ea <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f9a8 	bl	8002624 <wizchip_clrinterrupt>
         break;
 80022d4:	e088      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80022d6:	f000 f9d9 	bl	800268c <wizchip_getinterrupt>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	801a      	strh	r2, [r3, #0]
         break;
 80022e2:	e081      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f9f4 	bl	80026d6 <wizchip_setinterruptmask>
         break;         
 80022ee:	e07b      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80022f0:	f000 fa0c 	bl	800270c <wizchip_getinterruptmask>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	801a      	strh	r2, [r3, #0]
         break;
 80022fc:	e074      	b.n	80023e8 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800230e:	f7fe ff73 	bl	80011f8 <WIZCHIP_WRITE>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800231e:	f7fe ff6b 	bl	80011f8 <WIZCHIP_WRITE>
         break;
 8002322:	e061      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002324:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002328:	f7fe ff1a 	bl	8001160 <WIZCHIP_READ>
 800232c:	4603      	mov	r3, r0
 800232e:	b29b      	uxth	r3, r3
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b29c      	uxth	r4, r3
 8002334:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002338:	f7fe ff12 	bl	8001160 <WIZCHIP_READ>
 800233c:	4603      	mov	r3, r0
 800233e:	b29b      	uxth	r3, r3
 8002340:	4423      	add	r3, r4
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	801a      	strh	r2, [r3, #0]
         break;
 8002348:	e04e      	b.n	80023e8 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <ctlwizchip+0x1b8>)
 800234c:	789a      	ldrb	r2, [r3, #2]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <ctlwizchip+0x1b8>)
 8002358:	78d2      	ldrb	r2, [r2, #3]
 800235a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <ctlwizchip+0x1b8>)
 8002362:	7912      	ldrb	r2, [r2, #4]
 8002364:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3303      	adds	r3, #3
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <ctlwizchip+0x1b8>)
 800236c:	7952      	ldrb	r2, [r2, #5]
 800236e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3304      	adds	r3, #4
 8002374:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <ctlwizchip+0x1b8>)
 8002376:	7992      	ldrb	r2, [r2, #6]
 8002378:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3305      	adds	r3, #5
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
         break;
 8002382:	e031      	b.n	80023e8 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002384:	f000 fa14 	bl	80027b0 <wizphy_reset>
         break;
 8002388:	e02e      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800238a:	6838      	ldr	r0, [r7, #0]
 800238c:	f000 fa37 	bl	80027fe <wizphy_setphyconf>
         break;
 8002390:	e02a      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	f000 fa75 	bl	8002882 <wizphy_getphyconf>
         break;
 8002398:	e026      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fad8 	bl	8002954 <wizphy_setphypmode>
 80023a4:	4603      	mov	r3, r0
 80023a6:	e020      	b.n	80023ea <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80023a8:	f000 f9e9 	bl	800277e <wizphy_getphypmode>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d102      	bne.n	80023bc <ctlwizchip+0x180>
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ba:	e016      	b.n	80023ea <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7dfa      	ldrb	r2, [r7, #23]
 80023c0:	701a      	strb	r2, [r3, #0]
         break;
 80023c2:	e011      	b.n	80023e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80023c4:	f000 f9c5 	bl	8002752 <wizphy_getphylink>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d102      	bne.n	80023d8 <ctlwizchip+0x19c>
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d6:	e008      	b.n	80023ea <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7dfa      	ldrb	r2, [r7, #23]
 80023dc:	701a      	strb	r2, [r3, #0]
         break;
 80023de:	e003      	b.n	80023e8 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e4:	e001      	b.n	80023ea <ctlwizchip+0x1ae>
         break;
 80023e6:	bf00      	nop
   }
   return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000020 	.word	0x20000020

080023f8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d82c      	bhi.n	8002464 <ctlnetwork+0x6c>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <ctlnetwork+0x18>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002429 	.word	0x08002429
 8002414:	08002431 	.word	0x08002431
 8002418:	08002439 	.word	0x08002439
 800241c:	08002447 	.word	0x08002447
 8002420:	08002455 	.word	0x08002455
 8002424:	0800245d 	.word	0x0800245d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f000 fadd 	bl	80029e8 <wizchip_setnetinfo>
         break;
 800242e:	e01c      	b.n	800246a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f000 fb19 	bl	8002a68 <wizchip_getnetinfo>
         break;
 8002436:	e018      	b.n	800246a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fb53 	bl	8002ae8 <wizchip_setnetmode>
 8002442:	4603      	mov	r3, r0
 8002444:	e012      	b.n	800246c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002446:	f000 fb71 	bl	8002b2c <wizchip_getnetmode>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	701a      	strb	r2, [r3, #0]
         break;
 8002452:	e00a      	b.n	800246a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f000 fb71 	bl	8002b3c <wizchip_settimeout>
         break;
 800245a:	e006      	b.n	800246a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f000 fb8e 	bl	8002b7e <wizchip_gettimeout>
         break;
 8002462:	e002      	b.n	800246a <ctlnetwork+0x72>
      default:
         return -1;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002468:	e000      	b.n	800246c <ctlnetwork+0x74>
   }
   return 0;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2206      	movs	r2, #6
 800247e:	4619      	mov	r1, r3
 8002480:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002484:	f7fe ff06 	bl	8001294 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2204      	movs	r2, #4
 800248e:	4619      	mov	r1, r3
 8002490:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002494:	f7fe fefe 	bl	8001294 <WIZCHIP_READ_BUF>
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	2204      	movs	r2, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80024a4:	f7fe fef6 	bl	8001294 <WIZCHIP_READ_BUF>
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2204      	movs	r2, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80024b4:	f7fe feee 	bl	8001294 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fe9c 	bl	80011f8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe fe4d 	bl	8001160 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2206      	movs	r2, #6
 80024ca:	4619      	mov	r1, r3
 80024cc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80024d0:	f7fe ff40 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2204      	movs	r2, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024e0:	f7fe ff38 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2204      	movs	r2, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80024f0:	f7fe ff30 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	2204      	movs	r2, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002500:	f7fe ff28 	bl	8001354 <WIZCHIP_WRITE_BUF>
}
 8002504:	bf00      	nop
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800251a:	f7ff ffab 	bl	8002474 <wizchip_sw_reset>
   if(txsize)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d03b      	beq.n	800259c <wizchip_init+0x90>
   {
      tmp = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e015      	b.n	800255a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	4413      	add	r3, r2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002544:	2b10      	cmp	r3, #16
 8002546:	dd02      	ble.n	800254e <wizchip_init+0x42>
 8002548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254c:	e066      	b.n	800261c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	2b07      	cmp	r3, #7
 8002560:	dde5      	ble.n	800252e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e015      	b.n	8002594 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3301      	adds	r3, #1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002576:	4618      	mov	r0, r3
 8002578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fe38 	bl	80011f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3301      	adds	r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002598:	2b07      	cmp	r3, #7
 800259a:	dde5      	ble.n	8002568 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03b      	beq.n	800261a <wizchip_init+0x10e>
   {
      tmp = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e015      	b.n	80025d8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80025ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	4413      	add	r3, r2
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80025be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	dd02      	ble.n	80025cc <wizchip_init+0xc0>
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ca:	e027      	b.n	800261c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025dc:	2b07      	cmp	r3, #7
 80025de:	dde5      	ble.n	80025ac <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e015      	b.n	8002612 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80025f4:	4618      	mov	r0, r3
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fdf9 	bl	80011f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	2b07      	cmp	r3, #7
 8002618:	dde5      	ble.n	80025e6 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b29b      	uxth	r3, r3
 8002638:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	f023 030f 	bic.w	r3, r3, #15
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002648:	f7fe fdd6 	bl	80011f8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e014      	b.n	800267c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8002652:	7bba      	ldrb	r2, [r7, #14]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	fa42 f303 	asr.w	r3, r2, r3
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <wizchip_clrinterrupt+0x52>
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	3301      	adds	r3, #1
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800266e:	211f      	movs	r1, #31
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fdc1 	bl	80011f8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	3301      	adds	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b07      	cmp	r3, #7
 8002680:	d9e7      	bls.n	8002652 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800269e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80026a2:	f7fe fd5d 	bl	8001160 <WIZCHIP_READ>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80026ae:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80026b2:	f7fe fd55 	bl	8001160 <WIZCHIP_READ>
 80026b6:	4603      	mov	r3, r0
 80026b8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80026cc:	88bb      	ldrh	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	4619      	mov	r1, r3
 80026f0:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80026f4:	f7fe fd80 	bl	80011f8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	4619      	mov	r1, r3
 80026fc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002700:	f7fe fd7a 	bl	80011f8 <WIZCHIP_WRITE>
#endif   
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800271e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002722:	f7fe fd1d 	bl	8001160 <WIZCHIP_READ>
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800272a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800272e:	f7fe fd17 	bl	8001160 <WIZCHIP_READ>
 8002732:	4603      	mov	r3, r0
 8002734:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b29a      	uxth	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4413      	add	r3, r2
 8002746:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002748:	88bb      	ldrh	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002758:	2300      	movs	r3, #0
 800275a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800275c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002760:	f7fe fcfe 	bl	8001160 <WIZCHIP_READ>
 8002764:	4603      	mov	r3, r0
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800276e:	2301      	movs	r3, #1
 8002770:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002788:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800278c:	f7fe fce8 	bl	8001160 <WIZCHIP_READ>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002796:	2b30      	cmp	r3, #48	; 0x30
 8002798:	d102      	bne.n	80027a0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e001      	b.n	80027a4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80027a0:	2300      	movs	r3, #0
 80027a2:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80027b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027ba:	f7fe fcd1 	bl	8001160 <WIZCHIP_READ>
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027c8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027d2:	f7fe fd11 	bl	80011f8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80027d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027da:	f7fe fcc1 	bl	8001160 <WIZCHIP_READ>
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027e8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027f2:	f7fe fd01 	bl	80011f8 <WIZCHIP_WRITE>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d104      	bne.n	800281c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e003      	b.n	8002824 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002822:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d104      	bne.n	8002836 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e019      	b.n	800286a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10d      	bne.n	800285a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d104      	bne.n	8002850 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	f043 0318 	orr.w	r3, r3, #24
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e00c      	b.n	800286a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e007      	b.n	800286a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	789b      	ldrb	r3, [r3, #2]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d103      	bne.n	800286a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	4619      	mov	r1, r3
 800286e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002872:	f7fe fcc1 	bl	80011f8 <WIZCHIP_WRITE>
   wizphy_reset();
 8002876:	f7ff ff9b 	bl	80027b0 <wizphy_reset>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800288e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002892:	f7fe fc65 	bl	8001160 <WIZCHIP_READ>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	119b      	asrs	r3, r3, #6
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d001      	beq.n	80028b8 <wizphy_getphyconf+0x36>
 80028b4:	2b38      	cmp	r3, #56	; 0x38
 80028b6:	d103      	bne.n	80028c0 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	705a      	strb	r2, [r3, #1]
         break;
 80028be:	e003      	b.n	80028c8 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	705a      	strb	r2, [r3, #1]
         break;
 80028c6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ce:	3b10      	subs	r3, #16
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	bf8c      	ite	hi
 80028d4:	2201      	movhi	r2, #1
 80028d6:	2200      	movls	r2, #0
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d111      	bne.n	8002902 <wizphy_getphyconf+0x80>
 80028de:	2201      	movs	r2, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80028e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	709a      	strb	r2, [r3, #2]
         break;
 8002900:	e003      	b.n	800290a <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	709a      	strb	r2, [r3, #2]
         break;
 8002908:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002910:	3b08      	subs	r3, #8
 8002912:	2b18      	cmp	r3, #24
 8002914:	bf8c      	ite	hi
 8002916:	2201      	movhi	r2, #1
 8002918:	2200      	movls	r2, #0
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	2a00      	cmp	r2, #0
 800291e:	d111      	bne.n	8002944 <wizphy_getphyconf+0xc2>
 8002920:	2201      	movs	r2, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800292a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	70da      	strb	r2, [r3, #3]
         break;
 8002942:	e003      	b.n	800294c <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	70da      	strb	r2, [r3, #3]
         break;
 800294a:	bf00      	nop
   }
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002962:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002966:	f7fe fbfb 	bl	8001160 <WIZCHIP_READ>
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <wizphy_setphypmode+0x2a>
 8002978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800297c:	e030      	b.n	80029e0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002984:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d104      	bne.n	8002996 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e003      	b.n	800299e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800299c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029a6:	f7fe fc27 	bl	80011f8 <WIZCHIP_WRITE>
   wizphy_reset();
 80029aa:	f7ff ff01 	bl	80027b0 <wizphy_reset>
   tmp = getPHYCFGR();
 80029ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029b2:	f7fe fbd5 	bl	8001160 <WIZCHIP_READ>
 80029b6:	4603      	mov	r3, r0
 80029b8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <wizphy_setphypmode+0x88>
 80029ca:	2300      	movs	r3, #0
 80029cc:	e008      	b.n	80029e0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <wizphy_setphypmode+0x88>
 80029d8:	2300      	movs	r3, #0
 80029da:	e001      	b.n	80029e0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2206      	movs	r2, #6
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029fa:	f7fe fcab 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	330e      	adds	r3, #14
 8002a02:	2204      	movs	r2, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a0a:	f7fe fca3 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	330a      	adds	r3, #10
 8002a12:	2204      	movs	r2, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a1a:	f7fe fc9b 	bl	8001354 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3306      	adds	r3, #6
 8002a22:	2204      	movs	r2, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a2a:	f7fe fc93 	bl	8001354 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7c9a      	ldrb	r2, [r3, #18]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <wizchip_setnetinfo+0x78>)
 8002a34:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7cda      	ldrb	r2, [r3, #19]
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <wizchip_setnetinfo+0x78>)
 8002a3c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7d1a      	ldrb	r2, [r3, #20]
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <wizchip_setnetinfo+0x78>)
 8002a44:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7d5a      	ldrb	r2, [r3, #21]
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <wizchip_setnetinfo+0x78>)
 8002a4c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7d9a      	ldrb	r2, [r3, #22]
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <wizchip_setnetinfo+0x7c>)
 8002a54:	701a      	strb	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200000f4 	.word	0x200000f4
 8002a64:	200000f8 	.word	0x200000f8

08002a68 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2206      	movs	r2, #6
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a7a:	f7fe fc0b 	bl	8001294 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	330e      	adds	r3, #14
 8002a82:	2204      	movs	r2, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a8a:	f7fe fc03 	bl	8001294 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	330a      	adds	r3, #10
 8002a92:	2204      	movs	r2, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a9a:	f7fe fbfb 	bl	8001294 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3306      	adds	r3, #6
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002aaa:	f7fe fbf3 	bl	8001294 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <wizchip_getnetinfo+0x78>)
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <wizchip_getnetinfo+0x78>)
 8002ab8:	785a      	ldrb	r2, [r3, #1]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <wizchip_getnetinfo+0x78>)
 8002ac0:	789a      	ldrb	r2, [r3, #2]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <wizchip_getnetinfo+0x78>)
 8002ac8:	78da      	ldrb	r2, [r3, #3]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <wizchip_getnetinfo+0x7c>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	759a      	strb	r2, [r3, #22]
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200000f4 	.word	0x200000f4
 8002ae4:	200000f8 	.word	0x200000f8

08002ae8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <wizchip_setnetmode+0x1e>
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b04:	e00e      	b.n	8002b24 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fb2a 	bl	8001160 <WIZCHIP_READ>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fb6b 	bl	80011f8 <WIZCHIP_WRITE>
   return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe fb15 	bl	8001160 <WIZCHIP_READ>
 8002b36:	4603      	mov	r3, r0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002b4e:	f7fe fb53 	bl	80011f8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	885b      	ldrh	r3, [r3, #2]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002b62:	f7fe fb49 	bl	80011f8 <WIZCHIP_WRITE>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	885b      	ldrh	r3, [r3, #2]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002b72:	f7fe fb41 	bl	80011f8 <WIZCHIP_WRITE>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002b7e:	b590      	push	{r4, r7, lr}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002b86:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002b8a:	f7fe fae9 	bl	8001160 <WIZCHIP_READ>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002b96:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002b9a:	f7fe fae1 	bl	8001160 <WIZCHIP_READ>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002baa:	f7fe fad9 	bl	8001160 <WIZCHIP_READ>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4423      	add	r3, r4
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	805a      	strh	r2, [r3, #2]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
	...

08002bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_Init+0x28>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_Init+0x28>)
 8002bce:	f043 0310 	orr.w	r3, r3, #16
 8002bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	f000 fb3f 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f000 f808 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be0:	f7fe f882 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_InitTick+0x54>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x58>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb57 	bl	80032c2 <HAL_SYSTICK_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00e      	b.n	8002c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0f      	cmp	r3, #15
 8002c22:	d80a      	bhi.n	8002c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c24:	2200      	movs	r2, #0
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c2c:	f000 fb1f 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <HAL_InitTick+0x5c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000018 	.word	0x20000018
 8002c48:	20000050 	.word	0x20000050
 8002c4c:	2000004c 	.word	0x2000004c

08002c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_IncTick+0x1c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_IncTick+0x20>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <HAL_IncTick+0x20>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000050 	.word	0x20000050
 8002c70:	20000bd8 	.word	0x20000bd8

08002c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b02      	ldr	r3, [pc, #8]	; (8002c84 <HAL_GetTick+0x10>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000bd8 	.word	0x20000bd8

08002c88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0ce      	b.n	8002e48 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fc28 	bl	800051c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f9bd 	bl	800304c <ADC_ConversionStop_Disable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 80a9 	bne.w	8002e36 <HAL_ADC_Init+0x1ae>
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80a5 	bne.w	8002e36 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4951      	ldr	r1, [pc, #324]	; (8002e50 <HAL_ADC_Init+0x1c8>)
 8002d0a:	428b      	cmp	r3, r1
 8002d0c:	d10a      	bne.n	8002d24 <HAL_ADC_Init+0x9c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d16:	d002      	beq.n	8002d1e <HAL_ADC_Init+0x96>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_Init+0xa0>
 8002d1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d22:	e001      	b.n	8002d28 <HAL_ADC_Init+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7b1b      	ldrb	r3, [r3, #12]
 8002d2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d40:	d003      	beq.n	8002d4a <HAL_ADC_Init+0xc2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_ADC_Init+0xc8>
 8002d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_Init+0xca>
 8002d50:	2300      	movs	r3, #0
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7d1b      	ldrb	r3, [r3, #20]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d119      	bne.n	8002d94 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7b1b      	ldrb	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	035a      	lsls	r2, r3, #13
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e00b      	b.n	8002d94 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_ADC_Init+0x1cc>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc4:	d003      	beq.n	8002dce <HAL_ADC_Init+0x146>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d104      	bne.n	8002dd8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_ADC_Init+0x1d0>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d10b      	bne.n	8002e14 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e12:	e018      	b.n	8002e46 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	f023 0312 	bic.w	r3, r3, #18
 8002e1c:	f043 0210 	orr.w	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e34:	e007      	b.n	8002e46 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f043 0210 	orr.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40013c00 	.word	0x40013c00
 8002e54:	ffe1f7fd 	.word	0xffe1f7fd
 8002e58:	ff1f0efe 	.word	0xff1f0efe

08002e5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x20>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0dc      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1da>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d81c      	bhi.n	8002ec6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b05      	subs	r3, #5
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4019      	ands	r1, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b05      	subs	r3, #5
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec4:	e03c      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d81c      	bhi.n	8002f08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b23      	subs	r3, #35	; 0x23
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4019      	ands	r1, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b23      	subs	r3, #35	; 0x23
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
 8002f06:	e01b      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	3b41      	subs	r3, #65	; 0x41
 8002f1a:	221f      	movs	r2, #31
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4019      	ands	r1, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b41      	subs	r3, #65	; 0x41
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b09      	cmp	r3, #9
 8002f46:	d91c      	bls.n	8002f82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68d9      	ldr	r1, [r3, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	3b1e      	subs	r3, #30
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	4019      	ands	r1, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	3b1e      	subs	r3, #30
 8002f74:	fa00 f203 	lsl.w	r2, r0, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]
 8002f80:	e019      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6919      	ldr	r1, [r3, #16]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	2207      	movs	r2, #7
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4019      	ands	r1, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6898      	ldr	r0, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	fa00 f203 	lsl.w	r2, r0, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d003      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fc2:	2b11      	cmp	r3, #17
 8002fc4:	d132      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d125      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d126      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d11a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9a      	lsrs	r2, r3, #18
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800300c:	e002      	b.n	8003014 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f9      	bne.n	800300e <HAL_ADC_ConfigChannel+0x1b2>
 800301a:	e007      	b.n	800302c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012400 	.word	0x40012400
 8003044:	20000018 	.word	0x20000018
 8003048:	431bde83 	.word	0x431bde83

0800304c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d127      	bne.n	80030b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003076:	f7ff fdfd 	bl	8002c74 <HAL_GetTick>
 800307a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800307c:	e014      	b.n	80030a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800307e:	f7ff fdf9 	bl	8002c74 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d90d      	bls.n	80030a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e007      	b.n	80030b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d0e3      	beq.n	800307e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <__NVIC_EnableIRQ+0x34>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003238:	f7ff ff90 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff2d 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff42 	bl	8003108 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff90 	bl	80031b0 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5f 	bl	800315c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff35 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e059      	b.n	80033a6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_DMA_Init+0xd4>)
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d80f      	bhi.n	800331e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_DMA_Init+0xd8>)
 8003306:	4413      	add	r3, r2
 8003308:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_DMA_Init+0xdc>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	009a      	lsls	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_DMA_Init+0xe0>)
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
 800331c:	e00e      	b.n	800333c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_DMA_Init+0xe4>)
 8003326:	4413      	add	r3, r2
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_DMA_Init+0xdc>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	009a      	lsls	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_DMA_Init+0xe8>)
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003352:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40020407 	.word	0x40020407
 80033b4:	bffdfff8 	.word	0xbffdfff8
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	40020000 	.word	0x40020000
 80033c0:	bffdfbf8 	.word	0xbffdfbf8
 80033c4:	40020400 	.word	0x40020400

080033c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2204      	movs	r2, #4
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80d6 	beq.w	800359e <HAL_DMA_IRQHandler+0x1d6>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80d0 	beq.w	800359e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b9b      	ldr	r3, [pc, #620]	; (8003690 <HAL_DMA_IRQHandler+0x2c8>)
 8003424:	429a      	cmp	r2, r3
 8003426:	d958      	bls.n	80034da <HAL_DMA_IRQHandler+0x112>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a99      	ldr	r2, [pc, #612]	; (8003694 <HAL_DMA_IRQHandler+0x2cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04f      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x10a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a98      	ldr	r2, [pc, #608]	; (8003698 <HAL_DMA_IRQHandler+0x2d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d048      	beq.n	80034ce <HAL_DMA_IRQHandler+0x106>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a96      	ldr	r2, [pc, #600]	; (800369c <HAL_DMA_IRQHandler+0x2d4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d040      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x100>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a95      	ldr	r2, [pc, #596]	; (80036a0 <HAL_DMA_IRQHandler+0x2d8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d038      	beq.n	80034c2 <HAL_DMA_IRQHandler+0xfa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a93      	ldr	r2, [pc, #588]	; (80036a4 <HAL_DMA_IRQHandler+0x2dc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d030      	beq.n	80034bc <HAL_DMA_IRQHandler+0xf4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a92      	ldr	r2, [pc, #584]	; (80036a8 <HAL_DMA_IRQHandler+0x2e0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d028      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xee>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a89      	ldr	r2, [pc, #548]	; (8003690 <HAL_DMA_IRQHandler+0x2c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d020      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xe8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a8e      	ldr	r2, [pc, #568]	; (80036ac <HAL_DMA_IRQHandler+0x2e4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d019      	beq.n	80034ac <HAL_DMA_IRQHandler+0xe4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a8c      	ldr	r2, [pc, #560]	; (80036b0 <HAL_DMA_IRQHandler+0x2e8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d012      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xe0>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a8b      	ldr	r2, [pc, #556]	; (80036b4 <HAL_DMA_IRQHandler+0x2ec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00a      	beq.n	80034a2 <HAL_DMA_IRQHandler+0xda>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a89      	ldr	r2, [pc, #548]	; (80036b8 <HAL_DMA_IRQHandler+0x2f0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d102      	bne.n	800349c <HAL_DMA_IRQHandler+0xd4>
 8003496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800349a:	e01b      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 800349c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034a0:	e018      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	e015      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034a8:	2340      	movs	r3, #64	; 0x40
 80034aa:	e013      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e011      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034b4:	e00e      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ba:	e00b      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034c0:	e008      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c6:	e005      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034cc:	e002      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034ce:	2340      	movs	r3, #64	; 0x40
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_IRQHandler+0x10c>
 80034d2:	2304      	movs	r3, #4
 80034d4:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_DMA_IRQHandler+0x2f4>)
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e057      	b.n	800358a <HAL_DMA_IRQHandler+0x1c2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6d      	ldr	r2, [pc, #436]	; (8003694 <HAL_DMA_IRQHandler+0x2cc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04f      	beq.n	8003584 <HAL_DMA_IRQHandler+0x1bc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6b      	ldr	r2, [pc, #428]	; (8003698 <HAL_DMA_IRQHandler+0x2d0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d048      	beq.n	8003580 <HAL_DMA_IRQHandler+0x1b8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_DMA_IRQHandler+0x2d4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d040      	beq.n	800357a <HAL_DMA_IRQHandler+0x1b2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <HAL_DMA_IRQHandler+0x2d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d038      	beq.n	8003574 <HAL_DMA_IRQHandler+0x1ac>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a67      	ldr	r2, [pc, #412]	; (80036a4 <HAL_DMA_IRQHandler+0x2dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d030      	beq.n	800356e <HAL_DMA_IRQHandler+0x1a6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_DMA_IRQHandler+0x2e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d028      	beq.n	8003568 <HAL_DMA_IRQHandler+0x1a0>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5d      	ldr	r2, [pc, #372]	; (8003690 <HAL_DMA_IRQHandler+0x2c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d020      	beq.n	8003562 <HAL_DMA_IRQHandler+0x19a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a61      	ldr	r2, [pc, #388]	; (80036ac <HAL_DMA_IRQHandler+0x2e4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_DMA_IRQHandler+0x196>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a60      	ldr	r2, [pc, #384]	; (80036b0 <HAL_DMA_IRQHandler+0x2e8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d012      	beq.n	800355a <HAL_DMA_IRQHandler+0x192>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5e      	ldr	r2, [pc, #376]	; (80036b4 <HAL_DMA_IRQHandler+0x2ec>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00a      	beq.n	8003554 <HAL_DMA_IRQHandler+0x18c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5d      	ldr	r2, [pc, #372]	; (80036b8 <HAL_DMA_IRQHandler+0x2f0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d102      	bne.n	800354e <HAL_DMA_IRQHandler+0x186>
 8003548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800354c:	e01b      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 800354e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003552:	e018      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003558:	e015      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	e013      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 800355e:	2304      	movs	r3, #4
 8003560:	e011      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003566:	e00e      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800356c:	e00b      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 800356e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003572:	e008      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003578:	e005      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 800357a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357e:	e002      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003580:	2340      	movs	r3, #64	; 0x40
 8003582:	e000      	b.n	8003586 <HAL_DMA_IRQHandler+0x1be>
 8003584:	2304      	movs	r3, #4
 8003586:	4a4e      	ldr	r2, [pc, #312]	; (80036c0 <HAL_DMA_IRQHandler+0x2f8>)
 8003588:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8136 	beq.w	8003800 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800359c:	e130      	b.n	8003800 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2202      	movs	r2, #2
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80f8 	beq.w	80037a0 <HAL_DMA_IRQHandler+0x3d8>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80f2 	beq.w	80037a0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 020a 	bic.w	r2, r2, #10
 80035d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_DMA_IRQHandler+0x2c8>)
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d973      	bls.n	80036d6 <HAL_DMA_IRQHandler+0x30e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a28      	ldr	r2, [pc, #160]	; (8003694 <HAL_DMA_IRQHandler+0x2cc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d06a      	beq.n	80036ce <HAL_DMA_IRQHandler+0x306>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_DMA_IRQHandler+0x2d0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d063      	beq.n	80036ca <HAL_DMA_IRQHandler+0x302>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a25      	ldr	r2, [pc, #148]	; (800369c <HAL_DMA_IRQHandler+0x2d4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d05b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x2fc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <HAL_DMA_IRQHandler+0x2d8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d038      	beq.n	8003688 <HAL_DMA_IRQHandler+0x2c0>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <HAL_DMA_IRQHandler+0x2dc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d030      	beq.n	8003682 <HAL_DMA_IRQHandler+0x2ba>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_DMA_IRQHandler+0x2e0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d028      	beq.n	800367c <HAL_DMA_IRQHandler+0x2b4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_DMA_IRQHandler+0x2c8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d020      	beq.n	8003676 <HAL_DMA_IRQHandler+0x2ae>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_DMA_IRQHandler+0x2e4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d019      	beq.n	8003672 <HAL_DMA_IRQHandler+0x2aa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_DMA_IRQHandler+0x2e8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d012      	beq.n	800366e <HAL_DMA_IRQHandler+0x2a6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_DMA_IRQHandler+0x2ec>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00a      	beq.n	8003668 <HAL_DMA_IRQHandler+0x2a0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_DMA_IRQHandler+0x2f0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d102      	bne.n	8003662 <HAL_DMA_IRQHandler+0x29a>
 800365c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003660:	e036      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003666:	e033      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366c:	e030      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 800366e:	2320      	movs	r3, #32
 8003670:	e02e      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003672:	2302      	movs	r3, #2
 8003674:	e02c      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367a:	e029      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 800367c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003680:	e026      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003686:	e023      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 8003688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800368c:	e020      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 800368e:	bf00      	nop
 8003690:	40020080 	.word	0x40020080
 8003694:	40020008 	.word	0x40020008
 8003698:	4002001c 	.word	0x4002001c
 800369c:	40020030 	.word	0x40020030
 80036a0:	40020044 	.word	0x40020044
 80036a4:	40020058 	.word	0x40020058
 80036a8:	4002006c 	.word	0x4002006c
 80036ac:	40020408 	.word	0x40020408
 80036b0:	4002041c 	.word	0x4002041c
 80036b4:	40020430 	.word	0x40020430
 80036b8:	40020444 	.word	0x40020444
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40020000 	.word	0x40020000
 80036c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c8:	e002      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 80036ca:	2320      	movs	r3, #32
 80036cc:	e000      	b.n	80036d0 <HAL_DMA_IRQHandler+0x308>
 80036ce:	2302      	movs	r3, #2
 80036d0:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_DMA_IRQHandler+0x444>)
 80036d2:	6053      	str	r3, [r2, #4]
 80036d4:	e057      	b.n	8003786 <HAL_DMA_IRQHandler+0x3be>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a4d      	ldr	r2, [pc, #308]	; (8003810 <HAL_DMA_IRQHandler+0x448>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d04f      	beq.n	8003780 <HAL_DMA_IRQHandler+0x3b8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <HAL_DMA_IRQHandler+0x44c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d048      	beq.n	800377c <HAL_DMA_IRQHandler+0x3b4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <HAL_DMA_IRQHandler+0x450>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d040      	beq.n	8003776 <HAL_DMA_IRQHandler+0x3ae>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a48      	ldr	r2, [pc, #288]	; (800381c <HAL_DMA_IRQHandler+0x454>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d038      	beq.n	8003770 <HAL_DMA_IRQHandler+0x3a8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a47      	ldr	r2, [pc, #284]	; (8003820 <HAL_DMA_IRQHandler+0x458>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d030      	beq.n	800376a <HAL_DMA_IRQHandler+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a45      	ldr	r2, [pc, #276]	; (8003824 <HAL_DMA_IRQHandler+0x45c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d028      	beq.n	8003764 <HAL_DMA_IRQHandler+0x39c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_DMA_IRQHandler+0x460>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d020      	beq.n	800375e <HAL_DMA_IRQHandler+0x396>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a42      	ldr	r2, [pc, #264]	; (800382c <HAL_DMA_IRQHandler+0x464>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d019      	beq.n	800375a <HAL_DMA_IRQHandler+0x392>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a41      	ldr	r2, [pc, #260]	; (8003830 <HAL_DMA_IRQHandler+0x468>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d012      	beq.n	8003756 <HAL_DMA_IRQHandler+0x38e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <HAL_DMA_IRQHandler+0x46c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00a      	beq.n	8003750 <HAL_DMA_IRQHandler+0x388>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3e      	ldr	r2, [pc, #248]	; (8003838 <HAL_DMA_IRQHandler+0x470>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d102      	bne.n	800374a <HAL_DMA_IRQHandler+0x382>
 8003744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003748:	e01b      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 800374a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374e:	e018      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003754:	e015      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003756:	2320      	movs	r3, #32
 8003758:	e013      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 800375a:	2302      	movs	r3, #2
 800375c:	e011      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 800375e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003762:	e00e      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003768:	e00b      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 800376a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800376e:	e008      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003774:	e005      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377a:	e002      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 800377c:	2320      	movs	r3, #32
 800377e:	e000      	b.n	8003782 <HAL_DMA_IRQHandler+0x3ba>
 8003780:	2302      	movs	r3, #2
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_DMA_IRQHandler+0x474>)
 8003784:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d034      	beq.n	8003800 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800379e:	e02f      	b.n	8003800 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2208      	movs	r2, #8
 80037a6:	409a      	lsls	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d028      	beq.n	8003802 <HAL_DMA_IRQHandler+0x43a>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d023      	beq.n	8003802 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 020e 	bic.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
    }
  }
  return;
 8003800:	bf00      	nop
 8003802:	bf00      	nop
}
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40020400 	.word	0x40020400
 8003810:	40020008 	.word	0x40020008
 8003814:	4002001c 	.word	0x4002001c
 8003818:	40020030 	.word	0x40020030
 800381c:	40020044 	.word	0x40020044
 8003820:	40020058 	.word	0x40020058
 8003824:	4002006c 	.word	0x4002006c
 8003828:	40020080 	.word	0x40020080
 800382c:	40020408 	.word	0x40020408
 8003830:	4002041c 	.word	0x4002041c
 8003834:	40020430 	.word	0x40020430
 8003838:	40020444 	.word	0x40020444
 800383c:	40020000 	.word	0x40020000

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b08b      	sub	sp, #44	; 0x2c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003852:	e179      	b.n	8003b48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003854:	2201      	movs	r2, #1
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	f040 8168 	bne.w	8003b42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4aa0      	ldr	r2, [pc, #640]	; (8003af8 <HAL_GPIO_Init+0x2b8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 800387c:	4a9e      	ldr	r2, [pc, #632]	; (8003af8 <HAL_GPIO_Init+0x2b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d875      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 8003882:	4a9e      	ldr	r2, [pc, #632]	; (8003afc <HAL_GPIO_Init+0x2bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d058      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 8003888:	4a9c      	ldr	r2, [pc, #624]	; (8003afc <HAL_GPIO_Init+0x2bc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d86f      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 800388e:	4a9c      	ldr	r2, [pc, #624]	; (8003b00 <HAL_GPIO_Init+0x2c0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d052      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 8003894:	4a9a      	ldr	r2, [pc, #616]	; (8003b00 <HAL_GPIO_Init+0x2c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d869      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 800389a:	4a9a      	ldr	r2, [pc, #616]	; (8003b04 <HAL_GPIO_Init+0x2c4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04c      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 80038a0:	4a98      	ldr	r2, [pc, #608]	; (8003b04 <HAL_GPIO_Init+0x2c4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d863      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038a6:	4a98      	ldr	r2, [pc, #608]	; (8003b08 <HAL_GPIO_Init+0x2c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d046      	beq.n	800393a <HAL_GPIO_Init+0xfa>
 80038ac:	4a96      	ldr	r2, [pc, #600]	; (8003b08 <HAL_GPIO_Init+0x2c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d85d      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038b2:	2b12      	cmp	r3, #18
 80038b4:	d82a      	bhi.n	800390c <HAL_GPIO_Init+0xcc>
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d859      	bhi.n	800396e <HAL_GPIO_Init+0x12e>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_GPIO_Init+0x80>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	0800393b 	.word	0x0800393b
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003927 	.word	0x08003927
 80038cc:	08003969 	.word	0x08003969
 80038d0:	0800396f 	.word	0x0800396f
 80038d4:	0800396f 	.word	0x0800396f
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	0800396f 	.word	0x0800396f
 80038e0:	0800396f 	.word	0x0800396f
 80038e4:	0800396f 	.word	0x0800396f
 80038e8:	0800396f 	.word	0x0800396f
 80038ec:	0800396f 	.word	0x0800396f
 80038f0:	0800396f 	.word	0x0800396f
 80038f4:	0800396f 	.word	0x0800396f
 80038f8:	0800396f 	.word	0x0800396f
 80038fc:	0800396f 	.word	0x0800396f
 8003900:	0800396f 	.word	0x0800396f
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003931 	.word	0x08003931
 800390c:	4a7f      	ldr	r2, [pc, #508]	; (8003b0c <HAL_GPIO_Init+0x2cc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003912:	e02c      	b.n	800396e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	623b      	str	r3, [r7, #32]
          break;
 800391a:	e029      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	3304      	adds	r3, #4
 8003922:	623b      	str	r3, [r7, #32]
          break;
 8003924:	e024      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	3308      	adds	r3, #8
 800392c:	623b      	str	r3, [r7, #32]
          break;
 800392e:	e01f      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	330c      	adds	r3, #12
 8003936:	623b      	str	r3, [r7, #32]
          break;
 8003938:	e01a      	b.n	8003970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003942:	2304      	movs	r3, #4
 8003944:	623b      	str	r3, [r7, #32]
          break;
 8003946:	e013      	b.n	8003970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003950:	2308      	movs	r3, #8
 8003952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	611a      	str	r2, [r3, #16]
          break;
 800395a:	e009      	b.n	8003970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800395c:	2308      	movs	r3, #8
 800395e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	615a      	str	r2, [r3, #20]
          break;
 8003966:	e003      	b.n	8003970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
          break;
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x130>
          break;
 800396e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2bff      	cmp	r3, #255	; 0xff
 8003974:	d801      	bhi.n	800397a <HAL_GPIO_Init+0x13a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	e001      	b.n	800397e <HAL_GPIO_Init+0x13e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d802      	bhi.n	800398c <HAL_GPIO_Init+0x14c>
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	e002      	b.n	8003992 <HAL_GPIO_Init+0x152>
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	3b08      	subs	r3, #8
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	210f      	movs	r1, #15
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	401a      	ands	r2, r3
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80c1 	beq.w	8003b42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a52      	ldr	r2, [pc, #328]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_GPIO_Init+0x2d0>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039d8:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_GPIO_Init+0x2d4>)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a46      	ldr	r2, [pc, #280]	; (8003b18 <HAL_GPIO_Init+0x2d8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01f      	beq.n	8003a44 <HAL_GPIO_Init+0x204>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <HAL_GPIO_Init+0x2dc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d019      	beq.n	8003a40 <HAL_GPIO_Init+0x200>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <HAL_GPIO_Init+0x2e0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_GPIO_Init+0x1fc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_GPIO_Init+0x2e4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00d      	beq.n	8003a38 <HAL_GPIO_Init+0x1f8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	; (8003b28 <HAL_GPIO_Init+0x2e8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x1f4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a41      	ldr	r2, [pc, #260]	; (8003b2c <HAL_GPIO_Init+0x2ec>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_GPIO_Init+0x1f0>
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	e00a      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a30:	2306      	movs	r3, #6
 8003a32:	e008      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e006      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e004      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e002      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_GPIO_Init+0x206>
 8003a44:	2300      	movs	r3, #0
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	f002 0203 	and.w	r2, r2, #3
 8003a4c:	0092      	lsls	r2, r2, #2
 8003a4e:	4093      	lsls	r3, r2
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a56:	492f      	ldr	r1, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x2d4>)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d006      	beq.n	8003a7e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a70:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	492e      	ldr	r1, [pc, #184]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	492a      	ldr	r1, [pc, #168]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4924      	ldr	r1, [pc, #144]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	4920      	ldr	r1, [pc, #128]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	491a      	ldr	r1, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d025      	beq.n	8003b34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4910      	ldr	r1, [pc, #64]	; (8003b30 <HAL_GPIO_Init+0x2f0>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60cb      	str	r3, [r1, #12]
 8003af4:	e025      	b.n	8003b42 <HAL_GPIO_Init+0x302>
 8003af6:	bf00      	nop
 8003af8:	10320000 	.word	0x10320000
 8003afc:	10310000 	.word	0x10310000
 8003b00:	10220000 	.word	0x10220000
 8003b04:	10210000 	.word	0x10210000
 8003b08:	10120000 	.word	0x10120000
 8003b0c:	10110000 	.word	0x10110000
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40010800 	.word	0x40010800
 8003b1c:	40010c00 	.word	0x40010c00
 8003b20:	40011000 	.word	0x40011000
 8003b24:	40011400 	.word	0x40011400
 8003b28:	40011800 	.word	0x40011800
 8003b2c:	40011c00 	.word	0x40011c00
 8003b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_GPIO_Init+0x324>)
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	4909      	ldr	r1, [pc, #36]	; (8003b64 <HAL_GPIO_Init+0x324>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	3301      	adds	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f ae7e 	bne.w	8003854 <HAL_GPIO_Init+0x14>
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	372c      	adds	r7, #44	; 0x2c
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
 8003b74:	4613      	mov	r3, r2
 8003b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b78:	787b      	ldrb	r3, [r7, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b84:	e003      	b.n	8003b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	041a      	lsls	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e26c      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8087 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d00c      	beq.n	8003bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d112      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x5e>
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bde:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d06c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x12c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d168      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e246      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x76>
 8003c00:	4b80      	ldr	r3, [pc, #512]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7f      	ldr	r2, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e02e      	b.n	8003c6c <HAL_RCC_OscConfig+0xd4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b7b      	ldr	r3, [pc, #492]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7a      	ldr	r2, [pc, #488]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a77      	ldr	r2, [pc, #476]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xd4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0xbc>
 8003c3a:	4b72      	ldr	r3, [pc, #456]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a71      	ldr	r2, [pc, #452]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xd4>
 8003c54:	4b6b      	ldr	r3, [pc, #428]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b68      	ldr	r3, [pc, #416]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a67      	ldr	r2, [pc, #412]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fffe 	bl	8002c74 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fffa 	bl	8002c74 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1fa      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xe4>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe ffea 	bl	8002c74 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe ffe6 	bl	8002c74 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1e6      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x10c>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd2:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d11c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x18c>
 8003cea:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x176>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e1ba      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4939      	ldr	r1, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	e03a      	b.n	8003d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe ff9f 	bl	8002c74 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fe ff9b 	bl	8002c74 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e19b      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d58:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4927      	ldr	r1, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fe ff7e 	bl	8002c74 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7c:	f7fe ff7a 	bl	8002c74 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e17a      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03a      	beq.n	8003e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d019      	beq.n	8003de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_RCC_OscConfig+0x274>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db4:	f7fe ff5e 	bl	8002c74 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fe ff5a 	bl	8002c74 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e15a      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f000 fad8 	bl	8004390 <RCC_Delay>
 8003de0:	e01c      	b.n	8003e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_RCC_OscConfig+0x274>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de8:	f7fe ff44 	bl	8002c74 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dee:	e00f      	b.n	8003e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fe ff40 	bl	8002c74 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d908      	bls.n	8003e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e140      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	42420000 	.word	0x42420000
 8003e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b9e      	ldr	r3, [pc, #632]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e9      	bne.n	8003df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a6 	beq.w	8003f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b97      	ldr	r3, [pc, #604]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	4b94      	ldr	r3, [pc, #592]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	4a93      	ldr	r2, [pc, #588]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	61d3      	str	r3, [r2, #28]
 8003e46:	4b91      	ldr	r3, [pc, #580]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b8e      	ldr	r3, [pc, #568]	; (8004090 <HAL_RCC_OscConfig+0x4f8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d118      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4f8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a8a      	ldr	r2, [pc, #552]	; (8004090 <HAL_RCC_OscConfig+0x4f8>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe ff01 	bl	8002c74 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fe fefd 	bl	8002c74 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	; 0x64
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0fd      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b81      	ldr	r3, [pc, #516]	; (8004090 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x312>
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a7a      	ldr	r2, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	e02d      	b.n	8003f06 <HAL_RCC_OscConfig+0x36e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x334>
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4a75      	ldr	r2, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	4b73      	ldr	r3, [pc, #460]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a72      	ldr	r2, [pc, #456]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6213      	str	r3, [r2, #32]
 8003eca:	e01c      	b.n	8003f06 <HAL_RCC_OscConfig+0x36e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x356>
 8003ed4:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a6c      	ldr	r2, [pc, #432]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003eda:	f043 0304 	orr.w	r3, r3, #4
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4a69      	ldr	r2, [pc, #420]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6213      	str	r3, [r2, #32]
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x36e>
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a66      	ldr	r2, [pc, #408]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6213      	str	r3, [r2, #32]
 8003efa:	4b64      	ldr	r3, [pc, #400]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a63      	ldr	r2, [pc, #396]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d015      	beq.n	8003f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe feb1 	bl	8002c74 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fead 	bl	8002c74 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0ab      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b57      	ldr	r3, [pc, #348]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCC_OscConfig+0x37e>
 8003f38:	e014      	b.n	8003f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fe9b 	bl	8002c74 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fe fe97 	bl	8002c74 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e095      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ee      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b48      	ldr	r3, [pc, #288]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a47      	ldr	r2, [pc, #284]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8081 	beq.w	8004082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d061      	beq.n	8004050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d146      	bne.n	8004022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f94:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_OscConfig+0x4fc>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fe6b 	bl	8002c74 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fe fe67 	bl	8002c74 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e067      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d108      	bne.n	8003fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fca:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	492d      	ldr	r1, [pc, #180]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a19      	ldr	r1, [r3, #32]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	430b      	orrs	r3, r1
 8003fee:	4927      	ldr	r1, [pc, #156]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_RCC_OscConfig+0x4fc>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fe3b 	bl	8002c74 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004002:	f7fe fe37 	bl	8002c74 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e037      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x46a>
 8004020:	e02f      	b.n	8004082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <HAL_RCC_OscConfig+0x4fc>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fe24 	bl	8002c74 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe fe20 	bl	8002c74 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e020      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x498>
 800404e:	e018      	b.n	8004082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e013      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x4f4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	429a      	cmp	r2, r3
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
 8004094:	42420060 	.word	0x42420060

08004098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0d0      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d910      	bls.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0207 	bic.w	r2, r3, #7
 80040c2:	4965      	ldr	r1, [pc, #404]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a52      	ldr	r2, [pc, #328]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d040      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d115      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e073      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4b3d      	ldr	r3, [pc, #244]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e06b      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f023 0203 	bic.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4936      	ldr	r1, [pc, #216]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004188:	f7fe fd74 	bl	8002c74 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004190:	f7fe fd70 	bl	8002c74 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e053      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 020c 	and.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1eb      	bne.n	8004190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d210      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4922      	ldr	r1, [pc, #136]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1cc>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1d0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fcd2 	bl	8002bf0 <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	080065e4 	.word	0x080065e4
 8004264:	20000018 	.word	0x20000018
 8004268:	2000004c 	.word	0x2000004c

0800426c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	b490      	push	{r4, r7}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004272:	4b2a      	ldr	r3, [pc, #168]	; (800431c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004274:	1d3c      	adds	r4, r7, #4
 8004276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800427c:	f240 2301 	movw	r3, #513	; 0x201
 8004280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d002      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x40>
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x46>
 80042aa:	e02d      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ae:	623b      	str	r3, [r7, #32]
      break;
 80042b0:	e02d      	b.n	800430e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	0c9b      	lsrs	r3, r3, #18
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042be:	4413      	add	r3, r2
 80042c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c5b      	lsrs	r3, r3, #17
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042de:	4413      	add	r3, r2
 80042e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ea:	fb02 f203 	mul.w	r2, r2, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	e004      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	623b      	str	r3, [r7, #32]
      break;
 8004306:	e002      	b.n	800430e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCC_GetSysClockFreq+0xb8>)
 800430a:	623b      	str	r3, [r7, #32]
      break;
 800430c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430e:	6a3b      	ldr	r3, [r7, #32]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	; 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bc90      	pop	{r4, r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	080065d4 	.word	0x080065d4
 8004320:	40021000 	.word	0x40021000
 8004324:	007a1200 	.word	0x007a1200
 8004328:	003d0900 	.word	0x003d0900

0800432c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <HAL_RCC_GetHCLKFreq+0x10>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	20000018 	.word	0x20000018

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff2 	bl	800432c <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	080065f4 	.word	0x080065f4

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800436c:	f7ff ffde 	bl	800432c <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	0adb      	lsrs	r3, r3, #11
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	080065f4 	.word	0x080065f4

08004390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <RCC_Delay+0x34>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <RCC_Delay+0x38>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0a5b      	lsrs	r3, r3, #9
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043ac:	bf00      	nop
  }
  while (Delay --);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1e5a      	subs	r2, r3, #1
 80043b2:	60fa      	str	r2, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f9      	bne.n	80043ac <RCC_Delay+0x1c>
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	20000018 	.word	0x20000018
 80043c8:	10624dd3 	.word	0x10624dd3

080043cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d07d      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ec:	4b4f      	ldr	r3, [pc, #316]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10d      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	61d3      	str	r3, [r2, #28]
 8004404:	4b49      	ldr	r3, [pc, #292]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d118      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004420:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a42      	ldr	r2, [pc, #264]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442c:	f7fe fc22 	bl	8002c74 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004434:	f7fe fc1e 	bl	8002c74 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e06d      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02e      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	429a      	cmp	r2, r3
 800446e:	d027      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004470:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004486:	4a29      	ldr	r2, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d014      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fe fbed 	bl	8002c74 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449c:	e00a      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fe fbe9 	bl	8002c74 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e036      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ee      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4917      	ldr	r1, [pc, #92]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	490b      	ldr	r1, [pc, #44]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4904      	ldr	r1, [pc, #16]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	40007000 	.word	0x40007000
 8004534:	42420440 	.word	0x42420440

08004538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e076      	b.n	8004638 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455a:	d009      	beq.n	8004570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	61da      	str	r2, [r3, #28]
 8004562:	e005      	b.n	8004570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fb60 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	ea42 0103 	orr.w	r1, r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	0c1a      	lsrs	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f002 0204 	and.w	r2, r2, #4
 8004616:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004626:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_SPI_Transmit+0x22>
 800465e:	2302      	movs	r3, #2
 8004660:	e126      	b.n	80048b0 <HAL_SPI_Transmit+0x270>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800466a:	f7fe fb03 	bl	8002c74 <HAL_GetTick>
 800466e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004680:	2302      	movs	r3, #2
 8004682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004684:	e10b      	b.n	800489e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Transmit+0x52>
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004696:	e102      	b.n	800489e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2203      	movs	r2, #3
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046de:	d10f      	bne.n	8004700 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d007      	beq.n	800471e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004726:	d14b      	bne.n	80047c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_SPI_Transmit+0xf6>
 8004730:	8afb      	ldrh	r3, [r7, #22]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d13e      	bne.n	80047b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800475a:	e02b      	b.n	80047b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d112      	bne.n	8004790 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	881a      	ldrh	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	86da      	strh	r2, [r3, #54]	; 0x36
 800478e:	e011      	b.n	80047b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004790:	f7fe fa70 	bl	8002c74 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d803      	bhi.n	80047a8 <HAL_SPI_Transmit+0x168>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_Transmit+0x16e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047b2:	e074      	b.n	800489e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ce      	bne.n	800475c <HAL_SPI_Transmit+0x11c>
 80047be:	e04c      	b.n	800485a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_SPI_Transmit+0x18e>
 80047c8:	8afb      	ldrh	r3, [r7, #22]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d140      	bne.n	8004850 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047f4:	e02c      	b.n	8004850 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d113      	bne.n	800482c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	86da      	strh	r2, [r3, #54]	; 0x36
 800482a:	e011      	b.n	8004850 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482c:	f7fe fa22 	bl	8002c74 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d803      	bhi.n	8004844 <HAL_SPI_Transmit+0x204>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004842:	d102      	bne.n	800484a <HAL_SPI_Transmit+0x20a>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800484e:	e026      	b.n	800489e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cd      	bne.n	80047f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fbb8 	bl	8004fd4 <SPI_EndRxTxTransaction>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e000      	b.n	800489e <HAL_SPI_Transmit+0x25e>
  }

error:
 800489c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d4:	d112      	bne.n	80048fc <HAL_SPI_Receive+0x44>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10e      	bne.n	80048fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2204      	movs	r2, #4
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8f1 	bl	8004ada <HAL_SPI_TransmitReceive>
 80048f8:	4603      	mov	r3, r0
 80048fa:	e0ea      	b.n	8004ad2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_SPI_Receive+0x52>
 8004906:	2302      	movs	r3, #2
 8004908:	e0e3      	b.n	8004ad2 <HAL_SPI_Receive+0x21a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004912:	f7fe f9af 	bl	8002c74 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d002      	beq.n	800492a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004928:	e0ca      	b.n	8004ac0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Receive+0x7e>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800493a:	e0c1      	b.n	8004ac0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2204      	movs	r2, #4
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004982:	d10f      	bne.n	80049a4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d007      	beq.n	80049c2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d162      	bne.n	8004a90 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049ca:	e02e      	b.n	8004a2a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d115      	bne.n	8004a06 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f103 020c 	add.w	r2, r3, #12
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	7812      	ldrb	r2, [r2, #0]
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a04:	e011      	b.n	8004a2a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a06:	f7fe f935 	bl	8002c74 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d803      	bhi.n	8004a1e <HAL_SPI_Receive+0x166>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1c:	d102      	bne.n	8004a24 <HAL_SPI_Receive+0x16c>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a28:	e04a      	b.n	8004ac0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1cb      	bne.n	80049cc <HAL_SPI_Receive+0x114>
 8004a34:	e031      	b.n	8004a9a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d113      	bne.n	8004a6c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	1c9a      	adds	r2, r3, #2
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a6a:	e011      	b.n	8004a90 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6c:	f7fe f902 	bl	8002c74 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d803      	bhi.n	8004a84 <HAL_SPI_Receive+0x1cc>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a82:	d102      	bne.n	8004a8a <HAL_SPI_Receive+0x1d2>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a8e:	e017      	b.n	8004ac0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1cd      	bne.n	8004a36 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fa46 	bl	8004f30 <SPI_EndRxTransaction>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
 8004abc:	e000      	b.n	8004ac0 <HAL_SPI_Receive+0x208>
  }

error :
 8004abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b08c      	sub	sp, #48	; 0x30
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x26>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e18a      	b.n	8004e16 <HAL_SPI_TransmitReceive+0x33c>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b08:	f7fe f8b4 	bl	8002c74 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d00f      	beq.n	8004b4a <HAL_SPI_TransmitReceive+0x70>
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b30:	d107      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x68>
 8004b3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d003      	beq.n	8004b4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b48:	e15b      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x82>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x82>
 8004b56:	887b      	ldrh	r3, [r7, #2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b62:	e14e      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d003      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2205      	movs	r2, #5
 8004b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	887a      	ldrh	r2, [r7, #2]
 8004b9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d007      	beq.n	8004bcc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd4:	d178      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x10a>
 8004bde:	8b7b      	ldrh	r3, [r7, #26]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d166      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c08:	e053      	b.n	8004cb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d11b      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x176>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x176>
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d113      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d119      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x1b8>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d014      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	b292      	uxth	r2, r2
 8004c74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c92:	f7fd ffef 	bl	8002c74 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d807      	bhi.n	8004cb2 <HAL_SPI_TransmitReceive+0x1d8>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca8:	d003      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cb0:	e0a7      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1a6      	bne.n	8004c0a <HAL_SPI_TransmitReceive+0x130>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1a1      	bne.n	8004c0a <HAL_SPI_TransmitReceive+0x130>
 8004cc6:	e07c      	b.n	8004dc2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x1fc>
 8004cd0:	8b7b      	ldrh	r3, [r7, #26]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d16b      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cfc:	e057      	b.n	8004dae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d11c      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x26c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x26c>
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d114      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d119      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x2ae>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d84:	2301      	movs	r3, #1
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d88:	f7fd ff74 	bl	8002c74 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d803      	bhi.n	8004da0 <HAL_SPI_TransmitReceive+0x2c6>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x2cc>
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dac:	e029      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1a2      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x224>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d19d      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f904 	bl	8004fd4 <SPI_EndRxTxTransaction>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dde:	e010      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e000      	b.n	8004e02 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e30:	f7fd ff20 	bl	8002c74 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e40:	f7fd ff18 	bl	8002c74 <HAL_GetTick>
 8004e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	015b      	lsls	r3, r3, #5
 8004e4c:	0d1b      	lsrs	r3, r3, #20
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e56:	e054      	b.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5e:	d050      	beq.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e60:	f7fd ff08 	bl	8002c74 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d902      	bls.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8e:	d111      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e98:	d004      	beq.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d107      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d10f      	bne.n	8004ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e017      	b.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d19b      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000018 	.word	0x20000018

08004f30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f44:	d111      	bne.n	8004f6a <SPI_EndRxTransaction+0x3a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d004      	beq.n	8004f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f58:	d107      	bne.n	8004f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d117      	bne.n	8004fa4 <SPI_EndRxTransaction+0x74>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7c:	d112      	bne.n	8004fa4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2101      	movs	r1, #1
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff ff49 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e013      	b.n	8004fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff ff36 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e000      	b.n	8004fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff ff18 	bl	8004e20 <SPI_WaitFlagStateUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e000      	b.n	8005008 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e03f      	b.n	80050a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fb ff96 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f905 	bl	8005264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b08a      	sub	sp, #40	; 0x28
 80050ae:	af02      	add	r7, sp, #8
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d17c      	bne.n	80051c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_UART_Transmit+0x2c>
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e075      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Transmit+0x3e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e06e      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2221      	movs	r2, #33	; 0x21
 80050fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050fe:	f7fd fdb9 	bl	8002c74 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d108      	bne.n	800512c <HAL_UART_Transmit+0x82>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800513c:	e02a      	b.n	8005194 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f840 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e036      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1cf      	bne.n	800513e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f810 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e006      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051de:	e02c      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d028      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x30>
 80051ee:	f7fd fd41 	bl	8002c74 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d21d      	bcs.n	800523a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800520c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	429a      	cmp	r2, r3
 8005256:	d0c3      	beq.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800529e:	f023 030c 	bic.w	r3, r3, #12
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <UART_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7ff f84c 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	e002      	b.n	80052da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052d4:	f7ff f834 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <UART_SetConfig+0x118>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	0119      	lsls	r1, r3, #4
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009a      	lsls	r2, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <UART_SetConfig+0x118>)
 8005312:	fba3 0302 	umull	r0, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2064      	movs	r0, #100	; 0x64
 800531a:	fb00 f303 	mul.w	r3, r0, r3
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	3332      	adds	r3, #50	; 0x32
 8005324:	4a15      	ldr	r2, [pc, #84]	; (800537c <UART_SetConfig+0x118>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005330:	4419      	add	r1, r3
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <UART_SetConfig+0x118>)
 800534a:	fba3 0302 	umull	r0, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2064      	movs	r0, #100	; 0x64
 8005352:	fb00 f303 	mul.w	r3, r0, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <UART_SetConfig+0x118>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	440a      	add	r2, r1
 800536e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40013800 	.word	0x40013800
 800537c:	51eb851f 	.word	0x51eb851f

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000054 	.word	0x20000054

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	2600      	movs	r6, #0
 8005390:	4d0c      	ldr	r5, [pc, #48]	; (80053c4 <__libc_init_array+0x38>)
 8005392:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	42a6      	cmp	r6, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	f000 fff8 	bl	8006390 <_init>
 80053a0:	2600      	movs	r6, #0
 80053a2:	4d0a      	ldr	r5, [pc, #40]	; (80053cc <__libc_init_array+0x40>)
 80053a4:	4c0a      	ldr	r4, [pc, #40]	; (80053d0 <__libc_init_array+0x44>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	42a6      	cmp	r6, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b4:	4798      	blx	r3
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80053be:	4798      	blx	r3
 80053c0:	3601      	adds	r6, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08006694 	.word	0x08006694
 80053c8:	08006694 	.word	0x08006694
 80053cc:	08006694 	.word	0x08006694
 80053d0:	08006698 	.word	0x08006698

080053d4 <memset>:
 80053d4:	4603      	mov	r3, r0
 80053d6:	4402      	add	r2, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <_free_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4605      	mov	r5, r0
 80053e8:	2900      	cmp	r1, #0
 80053ea:	d043      	beq.n	8005474 <_free_r+0x90>
 80053ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f0:	1f0c      	subs	r4, r1, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bfb8      	it	lt
 80053f6:	18e4      	addlt	r4, r4, r3
 80053f8:	f000 fc8e 	bl	8005d18 <__malloc_lock>
 80053fc:	4a1e      	ldr	r2, [pc, #120]	; (8005478 <_free_r+0x94>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	4610      	mov	r0, r2
 8005402:	b933      	cbnz	r3, 8005412 <_free_r+0x2e>
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	6014      	str	r4, [r2, #0]
 8005408:	4628      	mov	r0, r5
 800540a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800540e:	f000 bc89 	b.w	8005d24 <__malloc_unlock>
 8005412:	42a3      	cmp	r3, r4
 8005414:	d90a      	bls.n	800542c <_free_r+0x48>
 8005416:	6821      	ldr	r1, [r4, #0]
 8005418:	1862      	adds	r2, r4, r1
 800541a:	4293      	cmp	r3, r2
 800541c:	bf01      	itttt	eq
 800541e:	681a      	ldreq	r2, [r3, #0]
 8005420:	685b      	ldreq	r3, [r3, #4]
 8005422:	1852      	addeq	r2, r2, r1
 8005424:	6022      	streq	r2, [r4, #0]
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6004      	str	r4, [r0, #0]
 800542a:	e7ed      	b.n	8005408 <_free_r+0x24>
 800542c:	461a      	mov	r2, r3
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	b10b      	cbz	r3, 8005436 <_free_r+0x52>
 8005432:	42a3      	cmp	r3, r4
 8005434:	d9fa      	bls.n	800542c <_free_r+0x48>
 8005436:	6811      	ldr	r1, [r2, #0]
 8005438:	1850      	adds	r0, r2, r1
 800543a:	42a0      	cmp	r0, r4
 800543c:	d10b      	bne.n	8005456 <_free_r+0x72>
 800543e:	6820      	ldr	r0, [r4, #0]
 8005440:	4401      	add	r1, r0
 8005442:	1850      	adds	r0, r2, r1
 8005444:	4283      	cmp	r3, r0
 8005446:	6011      	str	r1, [r2, #0]
 8005448:	d1de      	bne.n	8005408 <_free_r+0x24>
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4401      	add	r1, r0
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	6053      	str	r3, [r2, #4]
 8005454:	e7d8      	b.n	8005408 <_free_r+0x24>
 8005456:	d902      	bls.n	800545e <_free_r+0x7a>
 8005458:	230c      	movs	r3, #12
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	e7d4      	b.n	8005408 <_free_r+0x24>
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1821      	adds	r1, r4, r0
 8005462:	428b      	cmp	r3, r1
 8005464:	bf01      	itttt	eq
 8005466:	6819      	ldreq	r1, [r3, #0]
 8005468:	685b      	ldreq	r3, [r3, #4]
 800546a:	1809      	addeq	r1, r1, r0
 800546c:	6021      	streq	r1, [r4, #0]
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6054      	str	r4, [r2, #4]
 8005472:	e7c9      	b.n	8005408 <_free_r+0x24>
 8005474:	bd38      	pop	{r3, r4, r5, pc}
 8005476:	bf00      	nop
 8005478:	200000fc 	.word	0x200000fc

0800547c <_malloc_r>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	1ccd      	adds	r5, r1, #3
 8005480:	f025 0503 	bic.w	r5, r5, #3
 8005484:	3508      	adds	r5, #8
 8005486:	2d0c      	cmp	r5, #12
 8005488:	bf38      	it	cc
 800548a:	250c      	movcc	r5, #12
 800548c:	2d00      	cmp	r5, #0
 800548e:	4606      	mov	r6, r0
 8005490:	db01      	blt.n	8005496 <_malloc_r+0x1a>
 8005492:	42a9      	cmp	r1, r5
 8005494:	d903      	bls.n	800549e <_malloc_r+0x22>
 8005496:	230c      	movs	r3, #12
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	2000      	movs	r0, #0
 800549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549e:	f000 fc3b 	bl	8005d18 <__malloc_lock>
 80054a2:	4921      	ldr	r1, [pc, #132]	; (8005528 <_malloc_r+0xac>)
 80054a4:	680a      	ldr	r2, [r1, #0]
 80054a6:	4614      	mov	r4, r2
 80054a8:	b99c      	cbnz	r4, 80054d2 <_malloc_r+0x56>
 80054aa:	4f20      	ldr	r7, [pc, #128]	; (800552c <_malloc_r+0xb0>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	b923      	cbnz	r3, 80054ba <_malloc_r+0x3e>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f8ca 	bl	800564c <_sbrk_r>
 80054b8:	6038      	str	r0, [r7, #0]
 80054ba:	4629      	mov	r1, r5
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f8c5 	bl	800564c <_sbrk_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d123      	bne.n	800550e <_malloc_r+0x92>
 80054c6:	230c      	movs	r3, #12
 80054c8:	4630      	mov	r0, r6
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	f000 fc2a 	bl	8005d24 <__malloc_unlock>
 80054d0:	e7e3      	b.n	800549a <_malloc_r+0x1e>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	1b5b      	subs	r3, r3, r5
 80054d6:	d417      	bmi.n	8005508 <_malloc_r+0x8c>
 80054d8:	2b0b      	cmp	r3, #11
 80054da:	d903      	bls.n	80054e4 <_malloc_r+0x68>
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	441c      	add	r4, r3
 80054e0:	6025      	str	r5, [r4, #0]
 80054e2:	e004      	b.n	80054ee <_malloc_r+0x72>
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	42a2      	cmp	r2, r4
 80054e8:	bf0c      	ite	eq
 80054ea:	600b      	streq	r3, [r1, #0]
 80054ec:	6053      	strne	r3, [r2, #4]
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 fc18 	bl	8005d24 <__malloc_unlock>
 80054f4:	f104 000b 	add.w	r0, r4, #11
 80054f8:	1d23      	adds	r3, r4, #4
 80054fa:	f020 0007 	bic.w	r0, r0, #7
 80054fe:	1ac2      	subs	r2, r0, r3
 8005500:	d0cc      	beq.n	800549c <_malloc_r+0x20>
 8005502:	1a1b      	subs	r3, r3, r0
 8005504:	50a3      	str	r3, [r4, r2]
 8005506:	e7c9      	b.n	800549c <_malloc_r+0x20>
 8005508:	4622      	mov	r2, r4
 800550a:	6864      	ldr	r4, [r4, #4]
 800550c:	e7cc      	b.n	80054a8 <_malloc_r+0x2c>
 800550e:	1cc4      	adds	r4, r0, #3
 8005510:	f024 0403 	bic.w	r4, r4, #3
 8005514:	42a0      	cmp	r0, r4
 8005516:	d0e3      	beq.n	80054e0 <_malloc_r+0x64>
 8005518:	1a21      	subs	r1, r4, r0
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f896 	bl	800564c <_sbrk_r>
 8005520:	3001      	adds	r0, #1
 8005522:	d1dd      	bne.n	80054e0 <_malloc_r+0x64>
 8005524:	e7cf      	b.n	80054c6 <_malloc_r+0x4a>
 8005526:	bf00      	nop
 8005528:	200000fc 	.word	0x200000fc
 800552c:	20000100 	.word	0x20000100

08005530 <iprintf>:
 8005530:	b40f      	push	{r0, r1, r2, r3}
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <iprintf+0x2c>)
 8005534:	b513      	push	{r0, r1, r4, lr}
 8005536:	681c      	ldr	r4, [r3, #0]
 8005538:	b124      	cbz	r4, 8005544 <iprintf+0x14>
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	b913      	cbnz	r3, 8005544 <iprintf+0x14>
 800553e:	4620      	mov	r0, r4
 8005540:	f000 fad4 	bl	8005aec <__sinit>
 8005544:	ab05      	add	r3, sp, #20
 8005546:	4620      	mov	r0, r4
 8005548:	9a04      	ldr	r2, [sp, #16]
 800554a:	68a1      	ldr	r1, [r4, #8]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	f000 fc17 	bl	8005d80 <_vfiprintf_r>
 8005552:	b002      	add	sp, #8
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	20000054 	.word	0x20000054

08005560 <_puts_r>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	460e      	mov	r6, r1
 8005564:	4605      	mov	r5, r0
 8005566:	b118      	cbz	r0, 8005570 <_puts_r+0x10>
 8005568:	6983      	ldr	r3, [r0, #24]
 800556a:	b90b      	cbnz	r3, 8005570 <_puts_r+0x10>
 800556c:	f000 fabe 	bl	8005aec <__sinit>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	68ac      	ldr	r4, [r5, #8]
 8005574:	b913      	cbnz	r3, 800557c <_puts_r+0x1c>
 8005576:	4628      	mov	r0, r5
 8005578:	f000 fab8 	bl	8005aec <__sinit>
 800557c:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <_puts_r+0xd0>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d120      	bne.n	80055c4 <_puts_r+0x64>
 8005582:	686c      	ldr	r4, [r5, #4]
 8005584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005586:	07db      	lsls	r3, r3, #31
 8005588:	d405      	bmi.n	8005596 <_puts_r+0x36>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	0598      	lsls	r0, r3, #22
 800558e:	d402      	bmi.n	8005596 <_puts_r+0x36>
 8005590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005592:	f000 fb49 	bl	8005c28 <__retarget_lock_acquire_recursive>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	0719      	lsls	r1, r3, #28
 800559a:	d51d      	bpl.n	80055d8 <_puts_r+0x78>
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b1db      	cbz	r3, 80055d8 <_puts_r+0x78>
 80055a0:	3e01      	subs	r6, #1
 80055a2:	68a3      	ldr	r3, [r4, #8]
 80055a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	bb39      	cbnz	r1, 80055fe <_puts_r+0x9e>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da38      	bge.n	8005624 <_puts_r+0xc4>
 80055b2:	4622      	mov	r2, r4
 80055b4:	210a      	movs	r1, #10
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f89c 	bl	80056f4 <__swbuf_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d011      	beq.n	80055e4 <_puts_r+0x84>
 80055c0:	250a      	movs	r5, #10
 80055c2:	e011      	b.n	80055e8 <_puts_r+0x88>
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <_puts_r+0xd4>)
 80055c6:	429c      	cmp	r4, r3
 80055c8:	d101      	bne.n	80055ce <_puts_r+0x6e>
 80055ca:	68ac      	ldr	r4, [r5, #8]
 80055cc:	e7da      	b.n	8005584 <_puts_r+0x24>
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <_puts_r+0xd8>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	bf08      	it	eq
 80055d4:	68ec      	ldreq	r4, [r5, #12]
 80055d6:	e7d5      	b.n	8005584 <_puts_r+0x24>
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f8ee 	bl	80057bc <__swsetup_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0dd      	beq.n	80055a0 <_puts_r+0x40>
 80055e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ea:	07da      	lsls	r2, r3, #31
 80055ec:	d405      	bmi.n	80055fa <_puts_r+0x9a>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	059b      	lsls	r3, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_puts_r+0x9a>
 80055f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f6:	f000 fb18 	bl	8005c2a <__retarget_lock_release_recursive>
 80055fa:	4628      	mov	r0, r5
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da04      	bge.n	800560c <_puts_r+0xac>
 8005602:	69a2      	ldr	r2, [r4, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	dc06      	bgt.n	8005616 <_puts_r+0xb6>
 8005608:	290a      	cmp	r1, #10
 800560a:	d004      	beq.n	8005616 <_puts_r+0xb6>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	e7c5      	b.n	80055a2 <_puts_r+0x42>
 8005616:	4622      	mov	r2, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f86b 	bl	80056f4 <__swbuf_r>
 800561e:	3001      	adds	r0, #1
 8005620:	d1bf      	bne.n	80055a2 <_puts_r+0x42>
 8005622:	e7df      	b.n	80055e4 <_puts_r+0x84>
 8005624:	250a      	movs	r5, #10
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	701d      	strb	r5, [r3, #0]
 800562e:	e7db      	b.n	80055e8 <_puts_r+0x88>
 8005630:	08006620 	.word	0x08006620
 8005634:	08006640 	.word	0x08006640
 8005638:	08006600 	.word	0x08006600

0800563c <puts>:
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <puts+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7ff bf8d 	b.w	8005560 <_puts_r>
 8005646:	bf00      	nop
 8005648:	20000054 	.word	0x20000054

0800564c <_sbrk_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	2300      	movs	r3, #0
 8005650:	4d05      	ldr	r5, [pc, #20]	; (8005668 <_sbrk_r+0x1c>)
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f7fb fc20 	bl	8000e9c <_sbrk>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_sbrk_r+0x1a>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_sbrk_r+0x1a>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000be8 	.word	0x20000be8

0800566c <__sread>:
 800566c:	b510      	push	{r4, lr}
 800566e:	460c      	mov	r4, r1
 8005670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005674:	f000 fe4a 	bl	800630c <_read_r>
 8005678:	2800      	cmp	r0, #0
 800567a:	bfab      	itete	ge
 800567c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800567e:	89a3      	ldrhlt	r3, [r4, #12]
 8005680:	181b      	addge	r3, r3, r0
 8005682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005686:	bfac      	ite	ge
 8005688:	6563      	strge	r3, [r4, #84]	; 0x54
 800568a:	81a3      	strhlt	r3, [r4, #12]
 800568c:	bd10      	pop	{r4, pc}

0800568e <__swrite>:
 800568e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005692:	461f      	mov	r7, r3
 8005694:	898b      	ldrh	r3, [r1, #12]
 8005696:	4605      	mov	r5, r0
 8005698:	05db      	lsls	r3, r3, #23
 800569a:	460c      	mov	r4, r1
 800569c:	4616      	mov	r6, r2
 800569e:	d505      	bpl.n	80056ac <__swrite+0x1e>
 80056a0:	2302      	movs	r3, #2
 80056a2:	2200      	movs	r2, #0
 80056a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a8:	f000 fac0 	bl	8005c2c <_lseek_r>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	4632      	mov	r2, r6
 80056b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	4628      	mov	r0, r5
 80056b8:	463b      	mov	r3, r7
 80056ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c2:	f000 b869 	b.w	8005798 <_write_r>

080056c6 <__sseek>:
 80056c6:	b510      	push	{r4, lr}
 80056c8:	460c      	mov	r4, r1
 80056ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ce:	f000 faad 	bl	8005c2c <_lseek_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	bf15      	itete	ne
 80056d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056e2:	81a3      	strheq	r3, [r4, #12]
 80056e4:	bf18      	it	ne
 80056e6:	81a3      	strhne	r3, [r4, #12]
 80056e8:	bd10      	pop	{r4, pc}

080056ea <__sclose>:
 80056ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ee:	f000 b8d3 	b.w	8005898 <_close_r>
	...

080056f4 <__swbuf_r>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	460e      	mov	r6, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	4605      	mov	r5, r0
 80056fc:	b118      	cbz	r0, 8005706 <__swbuf_r+0x12>
 80056fe:	6983      	ldr	r3, [r0, #24]
 8005700:	b90b      	cbnz	r3, 8005706 <__swbuf_r+0x12>
 8005702:	f000 f9f3 	bl	8005aec <__sinit>
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <__swbuf_r+0x98>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d12b      	bne.n	8005764 <__swbuf_r+0x70>
 800570c:	686c      	ldr	r4, [r5, #4]
 800570e:	69a3      	ldr	r3, [r4, #24]
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	071a      	lsls	r2, r3, #28
 8005716:	d52f      	bpl.n	8005778 <__swbuf_r+0x84>
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	b36b      	cbz	r3, 8005778 <__swbuf_r+0x84>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	b2f6      	uxtb	r6, r6
 8005722:	1ac0      	subs	r0, r0, r3
 8005724:	6963      	ldr	r3, [r4, #20]
 8005726:	4637      	mov	r7, r6
 8005728:	4283      	cmp	r3, r0
 800572a:	dc04      	bgt.n	8005736 <__swbuf_r+0x42>
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f948 	bl	80059c4 <_fflush_r>
 8005734:	bb30      	cbnz	r0, 8005784 <__swbuf_r+0x90>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	3001      	adds	r0, #1
 800573a:	3b01      	subs	r3, #1
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	701e      	strb	r6, [r3, #0]
 8005746:	6963      	ldr	r3, [r4, #20]
 8005748:	4283      	cmp	r3, r0
 800574a:	d004      	beq.n	8005756 <__swbuf_r+0x62>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d506      	bpl.n	8005760 <__swbuf_r+0x6c>
 8005752:	2e0a      	cmp	r6, #10
 8005754:	d104      	bne.n	8005760 <__swbuf_r+0x6c>
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 f933 	bl	80059c4 <_fflush_r>
 800575e:	b988      	cbnz	r0, 8005784 <__swbuf_r+0x90>
 8005760:	4638      	mov	r0, r7
 8005762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <__swbuf_r+0x9c>)
 8005766:	429c      	cmp	r4, r3
 8005768:	d101      	bne.n	800576e <__swbuf_r+0x7a>
 800576a:	68ac      	ldr	r4, [r5, #8]
 800576c:	e7cf      	b.n	800570e <__swbuf_r+0x1a>
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <__swbuf_r+0xa0>)
 8005770:	429c      	cmp	r4, r3
 8005772:	bf08      	it	eq
 8005774:	68ec      	ldreq	r4, [r5, #12]
 8005776:	e7ca      	b.n	800570e <__swbuf_r+0x1a>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f000 f81e 	bl	80057bc <__swsetup_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0cb      	beq.n	800571c <__swbuf_r+0x28>
 8005784:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005788:	e7ea      	b.n	8005760 <__swbuf_r+0x6c>
 800578a:	bf00      	nop
 800578c:	08006620 	.word	0x08006620
 8005790:	08006640 	.word	0x08006640
 8005794:	08006600 	.word	0x08006600

08005798 <_write_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	2200      	movs	r2, #0
 80057a2:	4d05      	ldr	r5, [pc, #20]	; (80057b8 <_write_r+0x20>)
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fb fb2b 	bl	8000e02 <_write>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_write_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_write_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000be8 	.word	0x20000be8

080057bc <__swsetup_r>:
 80057bc:	4b32      	ldr	r3, [pc, #200]	; (8005888 <__swsetup_r+0xcc>)
 80057be:	b570      	push	{r4, r5, r6, lr}
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	4606      	mov	r6, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	b125      	cbz	r5, 80057d2 <__swsetup_r+0x16>
 80057c8:	69ab      	ldr	r3, [r5, #24]
 80057ca:	b913      	cbnz	r3, 80057d2 <__swsetup_r+0x16>
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f98d 	bl	8005aec <__sinit>
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <__swsetup_r+0xd0>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	d10f      	bne.n	80057f8 <__swsetup_r+0x3c>
 80057d8:	686c      	ldr	r4, [r5, #4]
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e0:	0719      	lsls	r1, r3, #28
 80057e2:	d42c      	bmi.n	800583e <__swsetup_r+0x82>
 80057e4:	06dd      	lsls	r5, r3, #27
 80057e6:	d411      	bmi.n	800580c <__swsetup_r+0x50>
 80057e8:	2309      	movs	r3, #9
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	e03e      	b.n	8005876 <__swsetup_r+0xba>
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <__swsetup_r+0xd4>)
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d101      	bne.n	8005802 <__swsetup_r+0x46>
 80057fe:	68ac      	ldr	r4, [r5, #8]
 8005800:	e7eb      	b.n	80057da <__swsetup_r+0x1e>
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <__swsetup_r+0xd8>)
 8005804:	429c      	cmp	r4, r3
 8005806:	bf08      	it	eq
 8005808:	68ec      	ldreq	r4, [r5, #12]
 800580a:	e7e6      	b.n	80057da <__swsetup_r+0x1e>
 800580c:	0758      	lsls	r0, r3, #29
 800580e:	d512      	bpl.n	8005836 <__swsetup_r+0x7a>
 8005810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005812:	b141      	cbz	r1, 8005826 <__swsetup_r+0x6a>
 8005814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005818:	4299      	cmp	r1, r3
 800581a:	d002      	beq.n	8005822 <__swsetup_r+0x66>
 800581c:	4630      	mov	r0, r6
 800581e:	f7ff fde1 	bl	80053e4 <_free_r>
 8005822:	2300      	movs	r3, #0
 8005824:	6363      	str	r3, [r4, #52]	; 0x34
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	2300      	movs	r3, #0
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	f043 0308 	orr.w	r3, r3, #8
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	b94b      	cbnz	r3, 8005856 <__swsetup_r+0x9a>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d003      	beq.n	8005856 <__swsetup_r+0x9a>
 800584e:	4621      	mov	r1, r4
 8005850:	4630      	mov	r0, r6
 8005852:	f000 fa21 	bl	8005c98 <__smakebuf_r>
 8005856:	89a0      	ldrh	r0, [r4, #12]
 8005858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800585c:	f010 0301 	ands.w	r3, r0, #1
 8005860:	d00a      	beq.n	8005878 <__swsetup_r+0xbc>
 8005862:	2300      	movs	r3, #0
 8005864:	60a3      	str	r3, [r4, #8]
 8005866:	6963      	ldr	r3, [r4, #20]
 8005868:	425b      	negs	r3, r3
 800586a:	61a3      	str	r3, [r4, #24]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	b943      	cbnz	r3, 8005882 <__swsetup_r+0xc6>
 8005870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005874:	d1ba      	bne.n	80057ec <__swsetup_r+0x30>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	0781      	lsls	r1, r0, #30
 800587a:	bf58      	it	pl
 800587c:	6963      	ldrpl	r3, [r4, #20]
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	e7f4      	b.n	800586c <__swsetup_r+0xb0>
 8005882:	2000      	movs	r0, #0
 8005884:	e7f7      	b.n	8005876 <__swsetup_r+0xba>
 8005886:	bf00      	nop
 8005888:	20000054 	.word	0x20000054
 800588c:	08006620 	.word	0x08006620
 8005890:	08006640 	.word	0x08006640
 8005894:	08006600 	.word	0x08006600

08005898 <_close_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	2300      	movs	r3, #0
 800589c:	4d05      	ldr	r5, [pc, #20]	; (80058b4 <_close_r+0x1c>)
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fb fac9 	bl	8000e3a <_close>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_close_r+0x1a>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_close_r+0x1a>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000be8 	.word	0x20000be8

080058b8 <__sflush_r>:
 80058b8:	898a      	ldrh	r2, [r1, #12]
 80058ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	0710      	lsls	r0, r2, #28
 80058c2:	460c      	mov	r4, r1
 80058c4:	d458      	bmi.n	8005978 <__sflush_r+0xc0>
 80058c6:	684b      	ldr	r3, [r1, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dc05      	bgt.n	80058d8 <__sflush_r+0x20>
 80058cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dc02      	bgt.n	80058d8 <__sflush_r+0x20>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d0f9      	beq.n	80058d2 <__sflush_r+0x1a>
 80058de:	2300      	movs	r3, #0
 80058e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e4:	682f      	ldr	r7, [r5, #0]
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	d032      	beq.n	8005950 <__sflush_r+0x98>
 80058ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	075a      	lsls	r2, r3, #29
 80058f0:	d505      	bpl.n	80058fe <__sflush_r+0x46>
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	1ac0      	subs	r0, r0, r3
 80058f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058f8:	b10b      	cbz	r3, 80058fe <__sflush_r+0x46>
 80058fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fc:	1ac0      	subs	r0, r0, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	4602      	mov	r2, r0
 8005902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005904:	4628      	mov	r0, r5
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	47b0      	blx	r6
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	d106      	bne.n	800591e <__sflush_r+0x66>
 8005910:	6829      	ldr	r1, [r5, #0]
 8005912:	291d      	cmp	r1, #29
 8005914:	d82c      	bhi.n	8005970 <__sflush_r+0xb8>
 8005916:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <__sflush_r+0x108>)
 8005918:	40ca      	lsrs	r2, r1
 800591a:	07d6      	lsls	r6, r2, #31
 800591c:	d528      	bpl.n	8005970 <__sflush_r+0xb8>
 800591e:	2200      	movs	r2, #0
 8005920:	6062      	str	r2, [r4, #4]
 8005922:	6922      	ldr	r2, [r4, #16]
 8005924:	04d9      	lsls	r1, r3, #19
 8005926:	6022      	str	r2, [r4, #0]
 8005928:	d504      	bpl.n	8005934 <__sflush_r+0x7c>
 800592a:	1c42      	adds	r2, r0, #1
 800592c:	d101      	bne.n	8005932 <__sflush_r+0x7a>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	b903      	cbnz	r3, 8005934 <__sflush_r+0x7c>
 8005932:	6560      	str	r0, [r4, #84]	; 0x54
 8005934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005936:	602f      	str	r7, [r5, #0]
 8005938:	2900      	cmp	r1, #0
 800593a:	d0ca      	beq.n	80058d2 <__sflush_r+0x1a>
 800593c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005940:	4299      	cmp	r1, r3
 8005942:	d002      	beq.n	800594a <__sflush_r+0x92>
 8005944:	4628      	mov	r0, r5
 8005946:	f7ff fd4d 	bl	80053e4 <_free_r>
 800594a:	2000      	movs	r0, #0
 800594c:	6360      	str	r0, [r4, #52]	; 0x34
 800594e:	e7c1      	b.n	80058d4 <__sflush_r+0x1c>
 8005950:	6a21      	ldr	r1, [r4, #32]
 8005952:	2301      	movs	r3, #1
 8005954:	4628      	mov	r0, r5
 8005956:	47b0      	blx	r6
 8005958:	1c41      	adds	r1, r0, #1
 800595a:	d1c7      	bne.n	80058ec <__sflush_r+0x34>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c4      	beq.n	80058ec <__sflush_r+0x34>
 8005962:	2b1d      	cmp	r3, #29
 8005964:	d001      	beq.n	800596a <__sflush_r+0xb2>
 8005966:	2b16      	cmp	r3, #22
 8005968:	d101      	bne.n	800596e <__sflush_r+0xb6>
 800596a:	602f      	str	r7, [r5, #0]
 800596c:	e7b1      	b.n	80058d2 <__sflush_r+0x1a>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7ad      	b.n	80058d4 <__sflush_r+0x1c>
 8005978:	690f      	ldr	r7, [r1, #16]
 800597a:	2f00      	cmp	r7, #0
 800597c:	d0a9      	beq.n	80058d2 <__sflush_r+0x1a>
 800597e:	0793      	lsls	r3, r2, #30
 8005980:	bf18      	it	ne
 8005982:	2300      	movne	r3, #0
 8005984:	680e      	ldr	r6, [r1, #0]
 8005986:	bf08      	it	eq
 8005988:	694b      	ldreq	r3, [r1, #20]
 800598a:	eba6 0807 	sub.w	r8, r6, r7
 800598e:	600f      	str	r7, [r1, #0]
 8005990:	608b      	str	r3, [r1, #8]
 8005992:	f1b8 0f00 	cmp.w	r8, #0
 8005996:	dd9c      	ble.n	80058d2 <__sflush_r+0x1a>
 8005998:	4643      	mov	r3, r8
 800599a:	463a      	mov	r2, r7
 800599c:	4628      	mov	r0, r5
 800599e:	6a21      	ldr	r1, [r4, #32]
 80059a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059a2:	47b0      	blx	r6
 80059a4:	2800      	cmp	r0, #0
 80059a6:	dc06      	bgt.n	80059b6 <__sflush_r+0xfe>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	e78e      	b.n	80058d4 <__sflush_r+0x1c>
 80059b6:	4407      	add	r7, r0
 80059b8:	eba8 0800 	sub.w	r8, r8, r0
 80059bc:	e7e9      	b.n	8005992 <__sflush_r+0xda>
 80059be:	bf00      	nop
 80059c0:	20400001 	.word	0x20400001

080059c4 <_fflush_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b913      	cbnz	r3, 80059d4 <_fflush_r+0x10>
 80059ce:	2500      	movs	r5, #0
 80059d0:	4628      	mov	r0, r5
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	b118      	cbz	r0, 80059de <_fflush_r+0x1a>
 80059d6:	6983      	ldr	r3, [r0, #24]
 80059d8:	b90b      	cbnz	r3, 80059de <_fflush_r+0x1a>
 80059da:	f000 f887 	bl	8005aec <__sinit>
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <_fflush_r+0x6c>)
 80059e0:	429c      	cmp	r4, r3
 80059e2:	d11b      	bne.n	8005a1c <_fflush_r+0x58>
 80059e4:	686c      	ldr	r4, [r5, #4]
 80059e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ef      	beq.n	80059ce <_fflush_r+0xa>
 80059ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059f0:	07d0      	lsls	r0, r2, #31
 80059f2:	d404      	bmi.n	80059fe <_fflush_r+0x3a>
 80059f4:	0599      	lsls	r1, r3, #22
 80059f6:	d402      	bmi.n	80059fe <_fflush_r+0x3a>
 80059f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fa:	f000 f915 	bl	8005c28 <__retarget_lock_acquire_recursive>
 80059fe:	4628      	mov	r0, r5
 8005a00:	4621      	mov	r1, r4
 8005a02:	f7ff ff59 	bl	80058b8 <__sflush_r>
 8005a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a08:	4605      	mov	r5, r0
 8005a0a:	07da      	lsls	r2, r3, #31
 8005a0c:	d4e0      	bmi.n	80059d0 <_fflush_r+0xc>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	059b      	lsls	r3, r3, #22
 8005a12:	d4dd      	bmi.n	80059d0 <_fflush_r+0xc>
 8005a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a16:	f000 f908 	bl	8005c2a <__retarget_lock_release_recursive>
 8005a1a:	e7d9      	b.n	80059d0 <_fflush_r+0xc>
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <_fflush_r+0x70>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <_fflush_r+0x62>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7df      	b.n	80059e6 <_fflush_r+0x22>
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <_fflush_r+0x74>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7da      	b.n	80059e6 <_fflush_r+0x22>
 8005a30:	08006620 	.word	0x08006620
 8005a34:	08006640 	.word	0x08006640
 8005a38:	08006600 	.word	0x08006600

08005a3c <std>:
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	4604      	mov	r4, r0
 8005a42:	e9c0 3300 	strd	r3, r3, [r0]
 8005a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a4a:	6083      	str	r3, [r0, #8]
 8005a4c:	8181      	strh	r1, [r0, #12]
 8005a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a50:	81c2      	strh	r2, [r0, #14]
 8005a52:	6183      	str	r3, [r0, #24]
 8005a54:	4619      	mov	r1, r3
 8005a56:	2208      	movs	r2, #8
 8005a58:	305c      	adds	r0, #92	; 0x5c
 8005a5a:	f7ff fcbb 	bl	80053d4 <memset>
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <std+0x38>)
 8005a60:	6224      	str	r4, [r4, #32]
 8005a62:	6263      	str	r3, [r4, #36]	; 0x24
 8005a64:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <std+0x3c>)
 8005a66:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <std+0x40>)
 8005a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <std+0x44>)
 8005a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005a70:	bd10      	pop	{r4, pc}
 8005a72:	bf00      	nop
 8005a74:	0800566d 	.word	0x0800566d
 8005a78:	0800568f 	.word	0x0800568f
 8005a7c:	080056c7 	.word	0x080056c7
 8005a80:	080056eb 	.word	0x080056eb

08005a84 <_cleanup_r>:
 8005a84:	4901      	ldr	r1, [pc, #4]	; (8005a8c <_cleanup_r+0x8>)
 8005a86:	f000 b8af 	b.w	8005be8 <_fwalk_reent>
 8005a8a:	bf00      	nop
 8005a8c:	080059c5 	.word	0x080059c5

08005a90 <__sfmoreglue>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	2568      	movs	r5, #104	; 0x68
 8005a94:	1e4a      	subs	r2, r1, #1
 8005a96:	4355      	muls	r5, r2
 8005a98:	460e      	mov	r6, r1
 8005a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a9e:	f7ff fced 	bl	800547c <_malloc_r>
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	b140      	cbz	r0, 8005ab8 <__sfmoreglue+0x28>
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8005aac:	300c      	adds	r0, #12
 8005aae:	60a0      	str	r0, [r4, #8]
 8005ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ab4:	f7ff fc8e 	bl	80053d4 <memset>
 8005ab8:	4620      	mov	r0, r4
 8005aba:	bd70      	pop	{r4, r5, r6, pc}

08005abc <__sfp_lock_acquire>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__sfp_lock_acquire+0x8>)
 8005abe:	f000 b8b3 	b.w	8005c28 <__retarget_lock_acquire_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	20000be4 	.word	0x20000be4

08005ac8 <__sfp_lock_release>:
 8005ac8:	4801      	ldr	r0, [pc, #4]	; (8005ad0 <__sfp_lock_release+0x8>)
 8005aca:	f000 b8ae 	b.w	8005c2a <__retarget_lock_release_recursive>
 8005ace:	bf00      	nop
 8005ad0:	20000be4 	.word	0x20000be4

08005ad4 <__sinit_lock_acquire>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__sinit_lock_acquire+0x8>)
 8005ad6:	f000 b8a7 	b.w	8005c28 <__retarget_lock_acquire_recursive>
 8005ada:	bf00      	nop
 8005adc:	20000bdf 	.word	0x20000bdf

08005ae0 <__sinit_lock_release>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__sinit_lock_release+0x8>)
 8005ae2:	f000 b8a2 	b.w	8005c2a <__retarget_lock_release_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	20000bdf 	.word	0x20000bdf

08005aec <__sinit>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	4604      	mov	r4, r0
 8005af0:	f7ff fff0 	bl	8005ad4 <__sinit_lock_acquire>
 8005af4:	69a3      	ldr	r3, [r4, #24]
 8005af6:	b11b      	cbz	r3, 8005b00 <__sinit+0x14>
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	f7ff bff0 	b.w	8005ae0 <__sinit_lock_release>
 8005b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b04:	6523      	str	r3, [r4, #80]	; 0x50
 8005b06:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <__sinit+0x68>)
 8005b08:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <__sinit+0x6c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	bf08      	it	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	4620      	mov	r0, r4
 8005b16:	bf08      	it	eq
 8005b18:	61a3      	streq	r3, [r4, #24]
 8005b1a:	f000 f81f 	bl	8005b5c <__sfp>
 8005b1e:	6060      	str	r0, [r4, #4]
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f81b 	bl	8005b5c <__sfp>
 8005b26:	60a0      	str	r0, [r4, #8]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 f817 	bl	8005b5c <__sfp>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2104      	movs	r1, #4
 8005b32:	60e0      	str	r0, [r4, #12]
 8005b34:	6860      	ldr	r0, [r4, #4]
 8005b36:	f7ff ff81 	bl	8005a3c <std>
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2109      	movs	r1, #9
 8005b3e:	68a0      	ldr	r0, [r4, #8]
 8005b40:	f7ff ff7c 	bl	8005a3c <std>
 8005b44:	2202      	movs	r2, #2
 8005b46:	2112      	movs	r1, #18
 8005b48:	68e0      	ldr	r0, [r4, #12]
 8005b4a:	f7ff ff77 	bl	8005a3c <std>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	61a3      	str	r3, [r4, #24]
 8005b52:	e7d1      	b.n	8005af8 <__sinit+0xc>
 8005b54:	080065fc 	.word	0x080065fc
 8005b58:	08005a85 	.word	0x08005a85

08005b5c <__sfp>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	4607      	mov	r7, r0
 8005b60:	f7ff ffac 	bl	8005abc <__sfp_lock_acquire>
 8005b64:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <__sfp+0x84>)
 8005b66:	681e      	ldr	r6, [r3, #0]
 8005b68:	69b3      	ldr	r3, [r6, #24]
 8005b6a:	b913      	cbnz	r3, 8005b72 <__sfp+0x16>
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f7ff ffbd 	bl	8005aec <__sinit>
 8005b72:	3648      	adds	r6, #72	; 0x48
 8005b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	d503      	bpl.n	8005b84 <__sfp+0x28>
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	b30b      	cbz	r3, 8005bc4 <__sfp+0x68>
 8005b80:	6836      	ldr	r6, [r6, #0]
 8005b82:	e7f7      	b.n	8005b74 <__sfp+0x18>
 8005b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b88:	b9d5      	cbnz	r5, 8005bc0 <__sfp+0x64>
 8005b8a:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <__sfp+0x88>)
 8005b8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b90:	60e3      	str	r3, [r4, #12]
 8005b92:	6665      	str	r5, [r4, #100]	; 0x64
 8005b94:	f000 f847 	bl	8005c26 <__retarget_lock_init_recursive>
 8005b98:	f7ff ff96 	bl	8005ac8 <__sfp_lock_release>
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ba8:	6025      	str	r5, [r4, #0]
 8005baa:	61a5      	str	r5, [r4, #24]
 8005bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bb0:	f7ff fc10 	bl	80053d4 <memset>
 8005bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc0:	3468      	adds	r4, #104	; 0x68
 8005bc2:	e7d9      	b.n	8005b78 <__sfp+0x1c>
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ff62 	bl	8005a90 <__sfmoreglue>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	6030      	str	r0, [r6, #0]
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d1d5      	bne.n	8005b80 <__sfp+0x24>
 8005bd4:	f7ff ff78 	bl	8005ac8 <__sfp_lock_release>
 8005bd8:	230c      	movs	r3, #12
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	e7ee      	b.n	8005bbc <__sfp+0x60>
 8005bde:	bf00      	nop
 8005be0:	080065fc 	.word	0x080065fc
 8005be4:	ffff0001 	.word	0xffff0001

08005be8 <_fwalk_reent>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	4606      	mov	r6, r0
 8005bee:	4688      	mov	r8, r1
 8005bf0:	2700      	movs	r7, #0
 8005bf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8005bfe:	d505      	bpl.n	8005c0c <_fwalk_reent+0x24>
 8005c00:	6824      	ldr	r4, [r4, #0]
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d1f7      	bne.n	8005bf6 <_fwalk_reent+0xe>
 8005c06:	4638      	mov	r0, r7
 8005c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0c:	89ab      	ldrh	r3, [r5, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d907      	bls.n	8005c22 <_fwalk_reent+0x3a>
 8005c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c16:	3301      	adds	r3, #1
 8005c18:	d003      	beq.n	8005c22 <_fwalk_reent+0x3a>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	47c0      	blx	r8
 8005c20:	4307      	orrs	r7, r0
 8005c22:	3568      	adds	r5, #104	; 0x68
 8005c24:	e7e9      	b.n	8005bfa <_fwalk_reent+0x12>

08005c26 <__retarget_lock_init_recursive>:
 8005c26:	4770      	bx	lr

08005c28 <__retarget_lock_acquire_recursive>:
 8005c28:	4770      	bx	lr

08005c2a <__retarget_lock_release_recursive>:
 8005c2a:	4770      	bx	lr

08005c2c <_lseek_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	2200      	movs	r2, #0
 8005c36:	4d05      	ldr	r5, [pc, #20]	; (8005c4c <_lseek_r+0x20>)
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fb f921 	bl	8000e82 <_lseek>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_lseek_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_lseek_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000be8 	.word	0x20000be8

08005c50 <__swhatbuf_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	460e      	mov	r6, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	4614      	mov	r4, r2
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	b096      	sub	sp, #88	; 0x58
 8005c60:	da07      	bge.n	8005c72 <__swhatbuf_r+0x22>
 8005c62:	2300      	movs	r3, #0
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	89b3      	ldrh	r3, [r6, #12]
 8005c68:	061a      	lsls	r2, r3, #24
 8005c6a:	d410      	bmi.n	8005c8e <__swhatbuf_r+0x3e>
 8005c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c70:	e00e      	b.n	8005c90 <__swhatbuf_r+0x40>
 8005c72:	466a      	mov	r2, sp
 8005c74:	f000 fb5c 	bl	8006330 <_fstat_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	dbf2      	blt.n	8005c62 <__swhatbuf_r+0x12>
 8005c7c:	9a01      	ldr	r2, [sp, #4]
 8005c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c86:	425a      	negs	r2, r3
 8005c88:	415a      	adcs	r2, r3
 8005c8a:	602a      	str	r2, [r5, #0]
 8005c8c:	e7ee      	b.n	8005c6c <__swhatbuf_r+0x1c>
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	2000      	movs	r0, #0
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	b016      	add	sp, #88	; 0x58
 8005c96:	bd70      	pop	{r4, r5, r6, pc}

08005c98 <__smakebuf_r>:
 8005c98:	898b      	ldrh	r3, [r1, #12]
 8005c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c9c:	079d      	lsls	r5, r3, #30
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	d507      	bpl.n	8005cb4 <__smakebuf_r+0x1c>
 8005ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	2301      	movs	r3, #1
 8005cae:	6163      	str	r3, [r4, #20]
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	466a      	mov	r2, sp
 8005cb6:	ab01      	add	r3, sp, #4
 8005cb8:	f7ff ffca 	bl	8005c50 <__swhatbuf_r>
 8005cbc:	9900      	ldr	r1, [sp, #0]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff fbdb 	bl	800547c <_malloc_r>
 8005cc6:	b948      	cbnz	r0, 8005cdc <__smakebuf_r+0x44>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d4ef      	bmi.n	8005cb0 <__smakebuf_r+0x18>
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7e3      	b.n	8005ca4 <__smakebuf_r+0xc>
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <__smakebuf_r+0x7c>)
 8005cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	6120      	str	r0, [r4, #16]
 8005cee:	6163      	str	r3, [r4, #20]
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	b15b      	cbz	r3, 8005d0c <__smakebuf_r+0x74>
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfa:	f000 fb2b 	bl	8006354 <_isatty_r>
 8005cfe:	b128      	cbz	r0, 8005d0c <__smakebuf_r+0x74>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	89a0      	ldrh	r0, [r4, #12]
 8005d0e:	4305      	orrs	r5, r0
 8005d10:	81a5      	strh	r5, [r4, #12]
 8005d12:	e7cd      	b.n	8005cb0 <__smakebuf_r+0x18>
 8005d14:	08005a85 	.word	0x08005a85

08005d18 <__malloc_lock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_lock+0x8>)
 8005d1a:	f7ff bf85 	b.w	8005c28 <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000be0 	.word	0x20000be0

08005d24 <__malloc_unlock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_unlock+0x8>)
 8005d26:	f7ff bf80 	b.w	8005c2a <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000be0 	.word	0x20000be0

08005d30 <__sfputc_r>:
 8005d30:	6893      	ldr	r3, [r2, #8]
 8005d32:	b410      	push	{r4}
 8005d34:	3b01      	subs	r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	6093      	str	r3, [r2, #8]
 8005d3a:	da07      	bge.n	8005d4c <__sfputc_r+0x1c>
 8005d3c:	6994      	ldr	r4, [r2, #24]
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	db01      	blt.n	8005d46 <__sfputc_r+0x16>
 8005d42:	290a      	cmp	r1, #10
 8005d44:	d102      	bne.n	8005d4c <__sfputc_r+0x1c>
 8005d46:	bc10      	pop	{r4}
 8005d48:	f7ff bcd4 	b.w	80056f4 <__swbuf_r>
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	1c58      	adds	r0, r3, #1
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	4608      	mov	r0, r1
 8005d56:	bc10      	pop	{r4}
 8005d58:	4770      	bx	lr

08005d5a <__sfputs_r>:
 8005d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	4614      	mov	r4, r2
 8005d62:	18d5      	adds	r5, r2, r3
 8005d64:	42ac      	cmp	r4, r5
 8005d66:	d101      	bne.n	8005d6c <__sfputs_r+0x12>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e007      	b.n	8005d7c <__sfputs_r+0x22>
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	f7ff ffdc 	bl	8005d30 <__sfputc_r>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d1f3      	bne.n	8005d64 <__sfputs_r+0xa>
 8005d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d80 <_vfiprintf_r>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	460d      	mov	r5, r1
 8005d86:	4614      	mov	r4, r2
 8005d88:	4698      	mov	r8, r3
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b09d      	sub	sp, #116	; 0x74
 8005d8e:	b118      	cbz	r0, 8005d98 <_vfiprintf_r+0x18>
 8005d90:	6983      	ldr	r3, [r0, #24]
 8005d92:	b90b      	cbnz	r3, 8005d98 <_vfiprintf_r+0x18>
 8005d94:	f7ff feaa 	bl	8005aec <__sinit>
 8005d98:	4b89      	ldr	r3, [pc, #548]	; (8005fc0 <_vfiprintf_r+0x240>)
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	d11b      	bne.n	8005dd6 <_vfiprintf_r+0x56>
 8005d9e:	6875      	ldr	r5, [r6, #4]
 8005da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_vfiprintf_r+0x32>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_vfiprintf_r+0x32>
 8005dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dae:	f7ff ff3b 	bl	8005c28 <__retarget_lock_acquire_recursive>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	071b      	lsls	r3, r3, #28
 8005db6:	d501      	bpl.n	8005dbc <_vfiprintf_r+0x3c>
 8005db8:	692b      	ldr	r3, [r5, #16]
 8005dba:	b9eb      	cbnz	r3, 8005df8 <_vfiprintf_r+0x78>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff fcfc 	bl	80057bc <__swsetup_r>
 8005dc4:	b1c0      	cbz	r0, 8005df8 <_vfiprintf_r+0x78>
 8005dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc8:	07dc      	lsls	r4, r3, #31
 8005dca:	d50e      	bpl.n	8005dea <_vfiprintf_r+0x6a>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dd0:	b01d      	add	sp, #116	; 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	; (8005fc4 <_vfiprintf_r+0x244>)
 8005dd8:	429d      	cmp	r5, r3
 8005dda:	d101      	bne.n	8005de0 <_vfiprintf_r+0x60>
 8005ddc:	68b5      	ldr	r5, [r6, #8]
 8005dde:	e7df      	b.n	8005da0 <_vfiprintf_r+0x20>
 8005de0:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <_vfiprintf_r+0x248>)
 8005de2:	429d      	cmp	r5, r3
 8005de4:	bf08      	it	eq
 8005de6:	68f5      	ldreq	r5, [r6, #12]
 8005de8:	e7da      	b.n	8005da0 <_vfiprintf_r+0x20>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	0598      	lsls	r0, r3, #22
 8005dee:	d4ed      	bmi.n	8005dcc <_vfiprintf_r+0x4c>
 8005df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df2:	f7ff ff1a 	bl	8005c2a <__retarget_lock_release_recursive>
 8005df6:	e7e9      	b.n	8005dcc <_vfiprintf_r+0x4c>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e02:	2330      	movs	r3, #48	; 0x30
 8005e04:	f04f 0901 	mov.w	r9, #1
 8005e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fcc <_vfiprintf_r+0x24c>
 8005e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e14:	4623      	mov	r3, r4
 8005e16:	469a      	mov	sl, r3
 8005e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_vfiprintf_r+0xa2>
 8005e1e:	2a25      	cmp	r2, #37	; 0x25
 8005e20:	d1f9      	bne.n	8005e16 <_vfiprintf_r+0x96>
 8005e22:	ebba 0b04 	subs.w	fp, sl, r4
 8005e26:	d00b      	beq.n	8005e40 <_vfiprintf_r+0xc0>
 8005e28:	465b      	mov	r3, fp
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff93 	bl	8005d5a <__sfputs_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	f000 80aa 	beq.w	8005f8e <_vfiprintf_r+0x20e>
 8005e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e3c:	445a      	add	r2, fp
 8005e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e40:	f89a 3000 	ldrb.w	r3, [sl]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80a2 	beq.w	8005f8e <_vfiprintf_r+0x20e>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e54:	f10a 0a01 	add.w	sl, sl, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e60:	931a      	str	r3, [sp, #104]	; 0x68
 8005e62:	4654      	mov	r4, sl
 8005e64:	2205      	movs	r2, #5
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	4858      	ldr	r0, [pc, #352]	; (8005fcc <_vfiprintf_r+0x24c>)
 8005e6c:	f000 fa82 	bl	8006374 <memchr>
 8005e70:	9a04      	ldr	r2, [sp, #16]
 8005e72:	b9d8      	cbnz	r0, 8005eac <_vfiprintf_r+0x12c>
 8005e74:	06d1      	lsls	r1, r2, #27
 8005e76:	bf44      	itt	mi
 8005e78:	2320      	movmi	r3, #32
 8005e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7e:	0713      	lsls	r3, r2, #28
 8005e80:	bf44      	itt	mi
 8005e82:	232b      	movmi	r3, #43	; 0x2b
 8005e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e88:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8e:	d015      	beq.n	8005ebc <_vfiprintf_r+0x13c>
 8005e90:	4654      	mov	r4, sl
 8005e92:	2000      	movs	r0, #0
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	9a07      	ldr	r2, [sp, #28]
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea0:	3b30      	subs	r3, #48	; 0x30
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d94e      	bls.n	8005f44 <_vfiprintf_r+0x1c4>
 8005ea6:	b1b0      	cbz	r0, 8005ed6 <_vfiprintf_r+0x156>
 8005ea8:	9207      	str	r2, [sp, #28]
 8005eaa:	e014      	b.n	8005ed6 <_vfiprintf_r+0x156>
 8005eac:	eba0 0308 	sub.w	r3, r0, r8
 8005eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	e7d2      	b.n	8005e62 <_vfiprintf_r+0xe2>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1d19      	adds	r1, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9103      	str	r1, [sp, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfbb      	ittet	lt
 8005ec8:	425b      	neglt	r3, r3
 8005eca:	f042 0202 	orrlt.w	r2, r2, #2
 8005ece:	9307      	strge	r3, [sp, #28]
 8005ed0:	9307      	strlt	r3, [sp, #28]
 8005ed2:	bfb8      	it	lt
 8005ed4:	9204      	strlt	r2, [sp, #16]
 8005ed6:	7823      	ldrb	r3, [r4, #0]
 8005ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eda:	d10c      	bne.n	8005ef6 <_vfiprintf_r+0x176>
 8005edc:	7863      	ldrb	r3, [r4, #1]
 8005ede:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee0:	d135      	bne.n	8005f4e <_vfiprintf_r+0x1ce>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3402      	adds	r4, #2
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9203      	str	r2, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb8      	it	lt
 8005ef0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fdc <_vfiprintf_r+0x25c>
 8005efa:	2203      	movs	r2, #3
 8005efc:	4650      	mov	r0, sl
 8005efe:	7821      	ldrb	r1, [r4, #0]
 8005f00:	f000 fa38 	bl	8006374 <memchr>
 8005f04:	b140      	cbz	r0, 8005f18 <_vfiprintf_r+0x198>
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	eba0 000a 	sub.w	r0, r0, sl
 8005f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	3401      	adds	r4, #1
 8005f14:	4303      	orrs	r3, r0
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	482c      	ldr	r0, [pc, #176]	; (8005fd0 <_vfiprintf_r+0x250>)
 8005f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f24:	f000 fa26 	bl	8006374 <memchr>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d03f      	beq.n	8005fac <_vfiprintf_r+0x22c>
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <_vfiprintf_r+0x254>)
 8005f2e:	bb1b      	cbnz	r3, 8005f78 <_vfiprintf_r+0x1f8>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	3307      	adds	r3, #7
 8005f34:	f023 0307 	bic.w	r3, r3, #7
 8005f38:	3308      	adds	r3, #8
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3e:	443b      	add	r3, r7
 8005f40:	9309      	str	r3, [sp, #36]	; 0x24
 8005f42:	e767      	b.n	8005e14 <_vfiprintf_r+0x94>
 8005f44:	460c      	mov	r4, r1
 8005f46:	2001      	movs	r0, #1
 8005f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4c:	e7a5      	b.n	8005e9a <_vfiprintf_r+0x11a>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4619      	mov	r1, r3
 8005f56:	3401      	adds	r4, #1
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f60:	3a30      	subs	r2, #48	; 0x30
 8005f62:	2a09      	cmp	r2, #9
 8005f64:	d903      	bls.n	8005f6e <_vfiprintf_r+0x1ee>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0c5      	beq.n	8005ef6 <_vfiprintf_r+0x176>
 8005f6a:	9105      	str	r1, [sp, #20]
 8005f6c:	e7c3      	b.n	8005ef6 <_vfiprintf_r+0x176>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	2301      	movs	r3, #1
 8005f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f76:	e7f0      	b.n	8005f5a <_vfiprintf_r+0x1da>
 8005f78:	ab03      	add	r3, sp, #12
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <_vfiprintf_r+0x258>)
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	f3af 8000 	nop.w
 8005f88:	4607      	mov	r7, r0
 8005f8a:	1c78      	adds	r0, r7, #1
 8005f8c:	d1d6      	bne.n	8005f3c <_vfiprintf_r+0x1bc>
 8005f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f90:	07d9      	lsls	r1, r3, #31
 8005f92:	d405      	bmi.n	8005fa0 <_vfiprintf_r+0x220>
 8005f94:	89ab      	ldrh	r3, [r5, #12]
 8005f96:	059a      	lsls	r2, r3, #22
 8005f98:	d402      	bmi.n	8005fa0 <_vfiprintf_r+0x220>
 8005f9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f9c:	f7ff fe45 	bl	8005c2a <__retarget_lock_release_recursive>
 8005fa0:	89ab      	ldrh	r3, [r5, #12]
 8005fa2:	065b      	lsls	r3, r3, #25
 8005fa4:	f53f af12 	bmi.w	8005dcc <_vfiprintf_r+0x4c>
 8005fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005faa:	e711      	b.n	8005dd0 <_vfiprintf_r+0x50>
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <_vfiprintf_r+0x258>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	f000 f882 	bl	80060c0 <_printf_i>
 8005fbc:	e7e4      	b.n	8005f88 <_vfiprintf_r+0x208>
 8005fbe:	bf00      	nop
 8005fc0:	08006620 	.word	0x08006620
 8005fc4:	08006640 	.word	0x08006640
 8005fc8:	08006600 	.word	0x08006600
 8005fcc:	08006660 	.word	0x08006660
 8005fd0:	0800666a 	.word	0x0800666a
 8005fd4:	00000000 	.word	0x00000000
 8005fd8:	08005d5b 	.word	0x08005d5b
 8005fdc:	08006666 	.word	0x08006666

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	4607      	mov	r7, r0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfb8      	it	lt
 8005ff2:	4613      	movlt	r3, r2
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc28      	bgt.n	800607a <_printf_common+0x9a>
 8006028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800602c:	1e13      	subs	r3, r2, #0
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42d      	bmi.n	8006094 <_printf_common+0xb4>
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d020      	beq.n	8006088 <_printf_common+0xa8>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	68e5      	ldr	r5, [r4, #12]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf18      	it	ne
 8006052:	2500      	movne	r5, #0
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	bf08      	it	eq
 800605e:	1aad      	subeq	r5, r5, r2
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	bf08      	it	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	4293      	cmp	r3, r2
 800606a:	bfc4      	itt	gt
 800606c:	1a9b      	subgt	r3, r3, r2
 800606e:	18ed      	addgt	r5, r5, r3
 8006070:	341a      	adds	r4, #26
 8006072:	42b5      	cmp	r5, r6
 8006074:	d11a      	bne.n	80060ac <_printf_common+0xcc>
 8006076:	2000      	movs	r0, #0
 8006078:	e008      	b.n	800608c <_printf_common+0xac>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4649      	mov	r1, r9
 8006080:	4638      	mov	r0, r7
 8006082:	47c0      	blx	r8
 8006084:	3001      	adds	r0, #1
 8006086:	d103      	bne.n	8006090 <_printf_common+0xb0>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006090:	3501      	adds	r5, #1
 8006092:	e7c4      	b.n	800601e <_printf_common+0x3e>
 8006094:	2030      	movs	r0, #48	; 0x30
 8006096:	18e1      	adds	r1, r4, r3
 8006098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a2:	4422      	add	r2, r4
 80060a4:	3302      	adds	r3, #2
 80060a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060aa:	e7c5      	b.n	8006038 <_printf_common+0x58>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4622      	mov	r2, r4
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa8>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7d9      	b.n	8006072 <_printf_common+0x92>
	...

080060c0 <_printf_i>:
 80060c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	7e27      	ldrb	r7, [r4, #24]
 80060c8:	4691      	mov	r9, r2
 80060ca:	2f78      	cmp	r7, #120	; 0x78
 80060cc:	4680      	mov	r8, r0
 80060ce:	469a      	mov	sl, r3
 80060d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d6:	d807      	bhi.n	80060e8 <_printf_i+0x28>
 80060d8:	2f62      	cmp	r7, #98	; 0x62
 80060da:	d80a      	bhi.n	80060f2 <_printf_i+0x32>
 80060dc:	2f00      	cmp	r7, #0
 80060de:	f000 80d9 	beq.w	8006294 <_printf_i+0x1d4>
 80060e2:	2f58      	cmp	r7, #88	; 0x58
 80060e4:	f000 80a4 	beq.w	8006230 <_printf_i+0x170>
 80060e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f0:	e03a      	b.n	8006168 <_printf_i+0xa8>
 80060f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f6:	2b15      	cmp	r3, #21
 80060f8:	d8f6      	bhi.n	80060e8 <_printf_i+0x28>
 80060fa:	a001      	add	r0, pc, #4	; (adr r0, 8006100 <_printf_i+0x40>)
 80060fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006100:	08006159 	.word	0x08006159
 8006104:	0800616d 	.word	0x0800616d
 8006108:	080060e9 	.word	0x080060e9
 800610c:	080060e9 	.word	0x080060e9
 8006110:	080060e9 	.word	0x080060e9
 8006114:	080060e9 	.word	0x080060e9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060e9 	.word	0x080060e9
 8006120:	080060e9 	.word	0x080060e9
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	0800627b 	.word	0x0800627b
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800625d 	.word	0x0800625d
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	0800629d 	.word	0x0800629d
 8006144:	080060e9 	.word	0x080060e9
 8006148:	0800619d 	.word	0x0800619d
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	08006265 	.word	0x08006265
 8006158:	680b      	ldr	r3, [r1, #0]
 800615a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	600a      	str	r2, [r1, #0]
 8006164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006168:	2301      	movs	r3, #1
 800616a:	e0a4      	b.n	80062b6 <_printf_i+0x1f6>
 800616c:	6825      	ldr	r5, [r4, #0]
 800616e:	6808      	ldr	r0, [r1, #0]
 8006170:	062e      	lsls	r6, r5, #24
 8006172:	f100 0304 	add.w	r3, r0, #4
 8006176:	d50a      	bpl.n	800618e <_printf_i+0xce>
 8006178:	6805      	ldr	r5, [r0, #0]
 800617a:	600b      	str	r3, [r1, #0]
 800617c:	2d00      	cmp	r5, #0
 800617e:	da03      	bge.n	8006188 <_printf_i+0xc8>
 8006180:	232d      	movs	r3, #45	; 0x2d
 8006182:	426d      	negs	r5, r5
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	230a      	movs	r3, #10
 800618a:	485e      	ldr	r0, [pc, #376]	; (8006304 <_printf_i+0x244>)
 800618c:	e019      	b.n	80061c2 <_printf_i+0x102>
 800618e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006192:	6805      	ldr	r5, [r0, #0]
 8006194:	600b      	str	r3, [r1, #0]
 8006196:	bf18      	it	ne
 8006198:	b22d      	sxthne	r5, r5
 800619a:	e7ef      	b.n	800617c <_printf_i+0xbc>
 800619c:	680b      	ldr	r3, [r1, #0]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	1d18      	adds	r0, r3, #4
 80061a2:	6008      	str	r0, [r1, #0]
 80061a4:	0628      	lsls	r0, r5, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xec>
 80061a8:	681d      	ldr	r5, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0xf2>
 80061ac:	0669      	lsls	r1, r5, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xe8>
 80061b0:	881d      	ldrh	r5, [r3, #0]
 80061b2:	2f6f      	cmp	r7, #111	; 0x6f
 80061b4:	bf0c      	ite	eq
 80061b6:	2308      	moveq	r3, #8
 80061b8:	230a      	movne	r3, #10
 80061ba:	4852      	ldr	r0, [pc, #328]	; (8006304 <_printf_i+0x244>)
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c2:	6866      	ldr	r6, [r4, #4]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	bfa8      	it	ge
 80061c8:	6821      	ldrge	r1, [r4, #0]
 80061ca:	60a6      	str	r6, [r4, #8]
 80061cc:	bfa4      	itt	ge
 80061ce:	f021 0104 	bicge.w	r1, r1, #4
 80061d2:	6021      	strge	r1, [r4, #0]
 80061d4:	b90d      	cbnz	r5, 80061da <_printf_i+0x11a>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d04d      	beq.n	8006276 <_printf_i+0x1b6>
 80061da:	4616      	mov	r6, r2
 80061dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e0:	fb03 5711 	mls	r7, r3, r1, r5
 80061e4:	5dc7      	ldrb	r7, [r0, r7]
 80061e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ea:	462f      	mov	r7, r5
 80061ec:	42bb      	cmp	r3, r7
 80061ee:	460d      	mov	r5, r1
 80061f0:	d9f4      	bls.n	80061dc <_printf_i+0x11c>
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d10b      	bne.n	800620e <_printf_i+0x14e>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	07df      	lsls	r7, r3, #31
 80061fa:	d508      	bpl.n	800620e <_printf_i+0x14e>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	4299      	cmp	r1, r3
 8006202:	bfde      	ittt	le
 8006204:	2330      	movle	r3, #48	; 0x30
 8006206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800620a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800620e:	1b92      	subs	r2, r2, r6
 8006210:	6122      	str	r2, [r4, #16]
 8006212:	464b      	mov	r3, r9
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	aa03      	add	r2, sp, #12
 800621e:	f7ff fedf 	bl	8005fe0 <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	d14c      	bne.n	80062c0 <_printf_i+0x200>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622a:	b004      	add	sp, #16
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	4834      	ldr	r0, [pc, #208]	; (8006304 <_printf_i+0x244>)
 8006232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006236:	680e      	ldr	r6, [r1, #0]
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f856 5b04 	ldr.w	r5, [r6], #4
 800623e:	061f      	lsls	r7, r3, #24
 8006240:	600e      	str	r6, [r1, #0]
 8006242:	d514      	bpl.n	800626e <_printf_i+0x1ae>
 8006244:	07d9      	lsls	r1, r3, #31
 8006246:	bf44      	itt	mi
 8006248:	f043 0320 	orrmi.w	r3, r3, #32
 800624c:	6023      	strmi	r3, [r4, #0]
 800624e:	b91d      	cbnz	r5, 8006258 <_printf_i+0x198>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	2310      	movs	r3, #16
 800625a:	e7af      	b.n	80061bc <_printf_i+0xfc>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2378      	movs	r3, #120	; 0x78
 8006266:	4828      	ldr	r0, [pc, #160]	; (8006308 <_printf_i+0x248>)
 8006268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800626c:	e7e3      	b.n	8006236 <_printf_i+0x176>
 800626e:	065e      	lsls	r6, r3, #25
 8006270:	bf48      	it	mi
 8006272:	b2ad      	uxthmi	r5, r5
 8006274:	e7e6      	b.n	8006244 <_printf_i+0x184>
 8006276:	4616      	mov	r6, r2
 8006278:	e7bb      	b.n	80061f2 <_printf_i+0x132>
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	6826      	ldr	r6, [r4, #0]
 800627e:	1d1d      	adds	r5, r3, #4
 8006280:	6960      	ldr	r0, [r4, #20]
 8006282:	600d      	str	r5, [r1, #0]
 8006284:	0635      	lsls	r5, r6, #24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	d501      	bpl.n	800628e <_printf_i+0x1ce>
 800628a:	6018      	str	r0, [r3, #0]
 800628c:	e002      	b.n	8006294 <_printf_i+0x1d4>
 800628e:	0671      	lsls	r1, r6, #25
 8006290:	d5fb      	bpl.n	800628a <_printf_i+0x1ca>
 8006292:	8018      	strh	r0, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	4616      	mov	r6, r2
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	e7ba      	b.n	8006212 <_printf_i+0x152>
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	600a      	str	r2, [r1, #0]
 80062a2:	681e      	ldr	r6, [r3, #0]
 80062a4:	2100      	movs	r1, #0
 80062a6:	4630      	mov	r0, r6
 80062a8:	6862      	ldr	r2, [r4, #4]
 80062aa:	f000 f863 	bl	8006374 <memchr>
 80062ae:	b108      	cbz	r0, 80062b4 <_printf_i+0x1f4>
 80062b0:	1b80      	subs	r0, r0, r6
 80062b2:	6060      	str	r0, [r4, #4]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	2300      	movs	r3, #0
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062be:	e7a8      	b.n	8006212 <_printf_i+0x152>
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	47d0      	blx	sl
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0ab      	beq.n	8006226 <_printf_i+0x166>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	079b      	lsls	r3, r3, #30
 80062d2:	d413      	bmi.n	80062fc <_printf_i+0x23c>
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	4298      	cmp	r0, r3
 80062da:	bfb8      	it	lt
 80062dc:	4618      	movlt	r0, r3
 80062de:	e7a4      	b.n	800622a <_printf_i+0x16a>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4632      	mov	r2, r6
 80062e4:	4649      	mov	r1, r9
 80062e6:	4640      	mov	r0, r8
 80062e8:	47d0      	blx	sl
 80062ea:	3001      	adds	r0, #1
 80062ec:	d09b      	beq.n	8006226 <_printf_i+0x166>
 80062ee:	3501      	adds	r5, #1
 80062f0:	68e3      	ldr	r3, [r4, #12]
 80062f2:	9903      	ldr	r1, [sp, #12]
 80062f4:	1a5b      	subs	r3, r3, r1
 80062f6:	42ab      	cmp	r3, r5
 80062f8:	dcf2      	bgt.n	80062e0 <_printf_i+0x220>
 80062fa:	e7eb      	b.n	80062d4 <_printf_i+0x214>
 80062fc:	2500      	movs	r5, #0
 80062fe:	f104 0619 	add.w	r6, r4, #25
 8006302:	e7f5      	b.n	80062f0 <_printf_i+0x230>
 8006304:	08006671 	.word	0x08006671
 8006308:	08006682 	.word	0x08006682

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	2200      	movs	r2, #0
 8006316:	4d05      	ldr	r5, [pc, #20]	; (800632c <_read_r+0x20>)
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fa fd54 	bl	8000dc8 <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000be8 	.word	0x20000be8

08006330 <_fstat_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	2300      	movs	r3, #0
 8006334:	4d06      	ldr	r5, [pc, #24]	; (8006350 <_fstat_r+0x20>)
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f7fa fd87 	bl	8000e50 <_fstat>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d102      	bne.n	800634c <_fstat_r+0x1c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b103      	cbz	r3, 800634c <_fstat_r+0x1c>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	20000be8 	.word	0x20000be8

08006354 <_isatty_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	2300      	movs	r3, #0
 8006358:	4d05      	ldr	r5, [pc, #20]	; (8006370 <_isatty_r+0x1c>)
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fa fd85 	bl	8000e6e <_isatty>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_isatty_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_isatty_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	20000be8 	.word	0x20000be8

08006374 <memchr>:
 8006374:	4603      	mov	r3, r0
 8006376:	b510      	push	{r4, lr}
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	4402      	add	r2, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	4618      	mov	r0, r3
 8006380:	d101      	bne.n	8006386 <memchr+0x12>
 8006382:	2000      	movs	r0, #0
 8006384:	e003      	b.n	800638e <memchr+0x1a>
 8006386:	7804      	ldrb	r4, [r0, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	428c      	cmp	r4, r1
 800638c:	d1f6      	bne.n	800637c <memchr+0x8>
 800638e:	bd10      	pop	{r4, pc}

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
