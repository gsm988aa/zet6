
zet6net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003390  08003390  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003390  08003390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08003408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08003408  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096c2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d04  00000000  00000000  0002975b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2ad  00000000  00000000  0002c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c9a  00000000  00000000  00046785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930ca  00000000  00000000  0005041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e34e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000e353c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003278 	.word	0x08003278

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003278 	.word	0x08003278

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_GPIO_Init+0x78>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <MX_GPIO_Init+0x78>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_GPIO_Init+0x78>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_GPIO_Init+0x78>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <MX_GPIO_Init+0x78>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_GPIO_Init+0x78>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <MX_GPIO_Init+0x7c>)
 8000270:	f000 fde0 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000282:	2302      	movs	r3, #2
 8000284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	4619      	mov	r1, r3
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_GPIO_Init+0x7c>)
 800028e:	f000 fc3d 	bl	8000b0c <HAL_GPIO_Init>

}
 8000292:	bf00      	nop
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	40011400 	.word	0x40011400

080002a4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80002ac:	1d39      	adds	r1, r7, #4
 80002ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002b2:	2201      	movs	r2, #1
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <__io_putchar+0x20>)
 80002b6:	f001 fe6c 	bl	8001f92 <HAL_UART_Transmit>
  return ch;
 80002ba:	687b      	ldr	r3, [r7, #4]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000019c 	.word	0x2000019c

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 fab4 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */
//  Spi_Buff[]=0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f000 f848 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d4:	f7ff ffa6 	bl	8000224 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d8:	f000 f890 	bl	80003fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002dc:	f000 fa10 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   printf("init ok");
 80002e0:	4819      	ldr	r0, [pc, #100]	; (8000348 <main+0x80>)
 80002e2:	f001 fff3 	bl	80022cc <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("init7 \r\n");
 80002e6:	4819      	ldr	r0, [pc, #100]	; (800034c <main+0x84>)
 80002e8:	f002 f876 	bl	80023d8 <puts>


	  HAL_SPI_Receive(&hspi1,(uint8_t *)Spi_Buff,sizeof(Spi_Buff),HAL_MAX_DELAY);
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	2252      	movs	r2, #82	; 0x52
 80002f2:	4917      	ldr	r1, [pc, #92]	; (8000350 <main+0x88>)
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <main+0x8c>)
 80002f6:	f001 fa53 	bl	80017a0 <HAL_SPI_Receive>
	  printf("size = %d \r\n", sizeof(Spi_Buff));
 80002fa:	2152      	movs	r1, #82	; 0x52
 80002fc:	4816      	ldr	r0, [pc, #88]	; (8000358 <main+0x90>)
 80002fe:	f001 ffe5 	bl	80022cc <iprintf>
	      for (j = 0; j < 82; j++)
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <main+0x94>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
 8000308:	e014      	b.n	8000334 <main+0x6c>
	      {
	        printf("ADC_Receive_array[%d] = %d \r\n", j, Spi_Buff[j]);
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <main+0x94>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <main+0x94>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <main+0x88>)
 8000318:	5c9b      	ldrb	r3, [r3, r2]
 800031a:	461a      	mov	r2, r3
 800031c:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0x98>)
 800031e:	f001 ffd5 	bl	80022cc <iprintf>
	        HAL_Delay(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f000 faea 	bl	80008fc <HAL_Delay>
	      for (j = 0; j < 82; j++)
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <main+0x94>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <main+0x94>)
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <main+0x94>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b51      	cmp	r3, #81	; 0x51
 800033a:	d9e6      	bls.n	800030a <main+0x42>
	      }
	      HAL_Delay(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f000 fadc 	bl	80008fc <HAL_Delay>
	  printf("init7 \r\n");
 8000344:	e7cf      	b.n	80002e6 <main+0x1e>
 8000346:	bf00      	nop
 8000348:	08003290 	.word	0x08003290
 800034c:	08003298 	.word	0x08003298
 8000350:	2000009c 	.word	0x2000009c
 8000354:	20000144 	.word	0x20000144
 8000358:	080032a0 	.word	0x080032a0
 800035c:	20000098 	.word	0x20000098
 8000360:	080032b0 	.word	0x080032b0

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b090      	sub	sp, #64	; 0x40
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f001 ffa2 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000386:	2301      	movs	r3, #1
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	2302      	movs	r3, #2
 800039a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fd59 	bl	8000e64 <HAL_RCC_OscConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003b8:	f000 f819 	bl	80003ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003bc:	230f      	movs	r3, #15
 80003be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	2302      	movs	r3, #2
 80003c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 ffc4 	bl	8001364 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e2:	f000 f804 	bl	80003ee <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3740      	adds	r7, #64	; 0x40
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
	...

080003fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_SPI1_Init+0x64>)
 8000402:	4a18      	ldr	r2, [pc, #96]	; (8000464 <MX_SPI1_Init+0x68>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_SPI1_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_SPI1_Init+0x64>)
 800040e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_SPI1_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_SPI1_Init+0x64>)
 8000428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_SPI1_Init+0x64>)
 8000430:	2210      	movs	r2, #16
 8000432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_SPI1_Init+0x64>)
 8000448:	220a      	movs	r2, #10
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_SPI1_Init+0x64>)
 800044e:	f001 f923 	bl	8001698 <HAL_SPI_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000458:	f7ff ffc9 	bl	80003ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000144 	.word	0x20000144
 8000464:	40013000 	.word	0x40013000

08000468 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <HAL_SPI_MspInit+0x88>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d12f      	bne.n	80004e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a19      	ldr	r2, [pc, #100]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 800048e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <HAL_SPI_MspInit+0x8c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004b8:	2320      	movs	r3, #32
 80004ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_SPI_MspInit+0x90>)
 80004cc:	f000 fb1e 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	2302      	movs	r3, #2
 80004d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <HAL_SPI_MspInit+0x90>)
 80004e4:	f000 fb12 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40013000 	.word	0x40013000
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <HardFault_Handler+0x4>

08000572 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <MemManage_Handler+0x4>

08000578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <BusFault_Handler+0x4>

0800057e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <UsageFault_Handler+0x4>

08000584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f98a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e00a      	b.n	80005dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005c6:	f3af 8000 	nop.w
 80005ca:	4601      	mov	r1, r0
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf0      	blt.n	80005c6 <_read+0x12>
	}

return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe4b 	bl	80002a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
	}
	return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_close>:

int _close(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064c:	605a      	str	r2, [r3, #4]
	return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <_isatty>:

int _isatty(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	return 1;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066e:	b480      	push	{r7}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
	...

08000688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <_sbrk+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <_sbrk+0x60>)
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <_sbrk+0x64>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <_sbrk+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b8:	f001 fdd6 	bl	8002268 <__errno>
 80006bc:	4603      	mov	r3, r0
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	e009      	b.n	80006dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <_sbrk+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20010000 	.word	0x20010000
 80006e8:	00000400 	.word	0x00000400
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	200001f0 	.word	0x200001f0

080006f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 fbde 	bl	8001ef8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f7ff fe54 	bl	80003ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000019c 	.word	0x2000019c
 8000750:	40013800 	.word	0x40013800

08000754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007ba:	f000 f9a7 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007d4:	f000 f99a 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ee:	e003      	b.n	80007f8 <LoopCopyDataInit>

080007f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007f6:	3104      	adds	r1, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000800:	d3f6      	bcc.n	80007f0 <CopyDataInit>
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000804:	e002      	b.n	800080c <LoopFillZerobss>

08000806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000808:	f842 3b04 	str.w	r3, [r2], #4

0800080c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000810:	d3f9      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ff6f 	bl	80006f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 fd2d 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fd55 	bl	80002c8 <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r3, =_sidata
 8000820:	08003398 	.word	0x08003398
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000828:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800082c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000830:	200001f0 	.word	0x200001f0

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f92b 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe52 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f935 	bl	8000af2 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f90b 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200001dc 	.word	0x200001dc

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200001dc 	.word	0x200001dc

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff90 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff49 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff5e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff90 	bl	80009fc <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5f 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffb0 	bl	8000a60 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e179      	b.n	8000e14 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8168 	bne.w	8000e0e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4aa0      	ldr	r2, [pc, #640]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a9e      	ldr	r2, [pc, #632]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a9e      	ldr	r2, [pc, #632]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a9c      	ldr	r2, [pc, #624]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a9c      	ldr	r2, [pc, #624]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a9a      	ldr	r2, [pc, #616]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a98      	ldr	r2, [pc, #608]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a98      	ldr	r2, [pc, #608]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a96      	ldr	r2, [pc, #600]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a7f      	ldr	r2, [pc, #508]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80c1 	beq.w	8000e0e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a52      	ldr	r2, [pc, #328]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a4e      	ldr	r2, [pc, #312]	; (8000de0 <HAL_GPIO_Init+0x2d4>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a46      	ldr	r2, [pc, #280]	; (8000de4 <HAL_GPIO_Init+0x2d8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d01f      	beq.n	8000d10 <HAL_GPIO_Init+0x204>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a45      	ldr	r2, [pc, #276]	; (8000de8 <HAL_GPIO_Init+0x2dc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d019      	beq.n	8000d0c <HAL_GPIO_Init+0x200>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a44      	ldr	r2, [pc, #272]	; (8000dec <HAL_GPIO_Init+0x2e0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1fc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a43      	ldr	r2, [pc, #268]	; (8000df0 <HAL_GPIO_Init+0x2e4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1f8>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a42      	ldr	r2, [pc, #264]	; (8000df4 <HAL_GPIO_Init+0x2e8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1f4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a41      	ldr	r2, [pc, #260]	; (8000df8 <HAL_GPIO_Init+0x2ec>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1f0>
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	e00a      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	e008      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d04:	2303      	movs	r3, #3
 8000d06:	e004      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_GPIO_Init+0x206>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x2d4>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	492e      	ldr	r1, [pc, #184]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	492a      	ldr	r1, [pc, #168]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4924      	ldr	r1, [pc, #144]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4920      	ldr	r1, [pc, #128]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	491a      	ldr	r1, [pc, #104]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4916      	ldr	r1, [pc, #88]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d025      	beq.n	8000e00 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	4910      	ldr	r1, [pc, #64]	; (8000dfc <HAL_GPIO_Init+0x2f0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	e025      	b.n	8000e0e <HAL_GPIO_Init+0x302>
 8000dc2:	bf00      	nop
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10310000 	.word	0x10310000
 8000dcc:	10220000 	.word	0x10220000
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40011800 	.word	0x40011800
 8000df8:	40011c00 	.word	0x40011c00
 8000dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_GPIO_Init+0x324>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae7e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	372c      	adds	r7, #44	; 0x2c
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e50:	e003      	b.n	8000e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	041a      	lsls	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e26c      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8087 	beq.w	8000f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e84:	4b92      	ldr	r3, [pc, #584]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d00c      	beq.n	8000eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e90:	4b8f      	ldr	r3, [pc, #572]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d112      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x5e>
 8000e9c:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	4b89      	ldr	r3, [pc, #548]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d06c      	beq.n	8000f90 <HAL_RCC_OscConfig+0x12c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d168      	bne.n	8000f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e246      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x76>
 8000ecc:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a7f      	ldr	r2, [pc, #508]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e02e      	b.n	8000f38 <HAL_RCC_OscConfig+0xd4>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10c      	bne.n	8000efc <HAL_RCC_OscConfig+0x98>
 8000ee2:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7a      	ldr	r2, [pc, #488]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	4b78      	ldr	r3, [pc, #480]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e01d      	b.n	8000f38 <HAL_RCC_OscConfig+0xd4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0xbc>
 8000f06:	4b72      	ldr	r3, [pc, #456]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a71      	ldr	r2, [pc, #452]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a6e      	ldr	r2, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0xd4>
 8000f20:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a6a      	ldr	r2, [pc, #424]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a67      	ldr	r2, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d013      	beq.n	8000f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcd2 	bl	80008e8 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fcce 	bl	80008e8 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1fa      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f0      	beq.n	8000f48 <HAL_RCC_OscConfig+0xe4>
 8000f66:	e014      	b.n	8000f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fcbe 	bl	80008e8 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fcba 	bl	80008e8 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e1e6      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x10c>
 8000f8e:	e000      	b.n	8000f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d063      	beq.n	8001066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d11c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x18c>
 8000fb6:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d116      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <HAL_RCC_OscConfig+0x176>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d001      	beq.n	8000fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e1ba      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4939      	ldr	r1, [pc, #228]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	e03a      	b.n	8001066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fc73 	bl	80008e8 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fc6f 	bl	80008e8 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e19b      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4927      	ldr	r1, [pc, #156]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_RCC_OscConfig+0x270>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc52 	bl	80008e8 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff fc4e 	bl	80008e8 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e17a      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	2b00      	cmp	r3, #0
 8001070:	d03a      	beq.n	80010e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d019      	beq.n	80010ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_RCC_OscConfig+0x274>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001080:	f7ff fc32 	bl	80008e8 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fc2e 	bl	80008e8 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e15a      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_RCC_OscConfig+0x26c>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fad8 	bl	800165c <RCC_Delay>
 80010ac:	e01c      	b.n	80010e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_RCC_OscConfig+0x274>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc18 	bl	80008e8 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ba:	e00f      	b.n	80010dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc14 	bl	80008e8 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d908      	bls.n	80010dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e140      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	42420000 	.word	0x42420000
 80010d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	4b9e      	ldr	r3, [pc, #632]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1e9      	bne.n	80010bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a6 	beq.w	8001242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fa:	4b97      	ldr	r3, [pc, #604]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10d      	bne.n	8001122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b94      	ldr	r3, [pc, #592]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a93      	ldr	r2, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b91      	ldr	r3, [pc, #580]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111e:	2301      	movs	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001122:	4b8e      	ldr	r3, [pc, #568]	; (800135c <HAL_RCC_OscConfig+0x4f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112e:	4b8b      	ldr	r3, [pc, #556]	; (800135c <HAL_RCC_OscConfig+0x4f8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a8a      	ldr	r2, [pc, #552]	; (800135c <HAL_RCC_OscConfig+0x4f8>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113a:	f7ff fbd5 	bl	80008e8 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001142:	f7ff fbd1 	bl	80008e8 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0fd      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	4b81      	ldr	r3, [pc, #516]	; (800135c <HAL_RCC_OscConfig+0x4f8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x312>
 8001168:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4a7a      	ldr	r2, [pc, #488]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6213      	str	r3, [r2, #32]
 8001174:	e02d      	b.n	80011d2 <HAL_RCC_OscConfig+0x36e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x334>
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	e01c      	b.n	80011d2 <HAL_RCC_OscConfig+0x36e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d10c      	bne.n	80011ba <HAL_RCC_OscConfig+0x356>
 80011a0:	4b6d      	ldr	r3, [pc, #436]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4a6c      	ldr	r2, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6213      	str	r3, [r2, #32]
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a69      	ldr	r2, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e00b      	b.n	80011d2 <HAL_RCC_OscConfig+0x36e>
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a66      	ldr	r2, [pc, #408]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4b64      	ldr	r3, [pc, #400]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a63      	ldr	r2, [pc, #396]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d015      	beq.n	8001206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb85 	bl	80008e8 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb81 	bl	80008e8 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0ab      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ee      	beq.n	80011e2 <HAL_RCC_OscConfig+0x37e>
 8001204:	e014      	b.n	8001230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fb6f 	bl	80008e8 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fb6b 	bl	80008e8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e095      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1ee      	bne.n	800120e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d105      	bne.n	8001242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a47      	ldr	r2, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8081 	beq.w	800134e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b08      	cmp	r3, #8
 8001256:	d061      	beq.n	800131c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d146      	bne.n	80012ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <HAL_RCC_OscConfig+0x4fc>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fb3f 	bl	80008e8 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff fb3b 	bl	80008e8 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e067      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d108      	bne.n	80012a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	492d      	ldr	r1, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a19      	ldr	r1, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	430b      	orrs	r3, r1
 80012ba:	4927      	ldr	r1, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x4fc>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb0f 	bl	80008e8 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fb0b 	bl	80008e8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e037      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x46a>
 80012ec:	e02f      	b.n	800134e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_RCC_OscConfig+0x4fc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff faf8 	bl	80008e8 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff faf4 	bl	80008e8 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e020      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x498>
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e013      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40007000 	.word	0x40007000
 8001360:	42420060 	.word	0x42420060

08001364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0d0      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001378:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d910      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0207 	bic.w	r2, r3, #7
 800138e:	4965      	ldr	r1, [pc, #404]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b8      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	494d      	ldr	r1, [pc, #308]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d040      	beq.n	8001484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d115      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e07f      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e073      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e06b      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 0203 	bic.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4936      	ldr	r1, [pc, #216]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fa48 	bl	80008e8 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff fa44 	bl	80008e8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e053      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 020c 	and.w	r2, r3, #12
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	429a      	cmp	r2, r3
 8001482:	d1eb      	bne.n	800145c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d210      	bcs.n	80014b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0207 	bic.w	r2, r3, #7
 800149a:	4922      	ldr	r1, [pc, #136]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e032      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014f2:	f000 f821 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	490a      	ldr	r1, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x1c8>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_RCC_ClockConfig+0x1cc>)
 800150c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x1d0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f9a6 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000
 8001528:	40021000 	.word	0x40021000
 800152c:	080032e0 	.word	0x080032e0
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b490      	push	{r4, r7}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001540:	1d3c      	adds	r4, r7, #4
 8001542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001548:	f240 2301 	movw	r3, #513	; 0x201
 800154c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x40>
 8001572:	2b08      	cmp	r3, #8
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x46>
 8001576:	e02d      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800157a:	623b      	str	r3, [r7, #32]
      break;
 800157c:	e02d      	b.n	80015da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800158a:	4413      	add	r3, r2
 800158c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001590:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	0c5b      	lsrs	r3, r3, #17
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015aa:	4413      	add	r3, r2
 80015ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b6:	fb02 f203 	mul.w	r2, r2, r3
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e004      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	623b      	str	r3, [r7, #32]
      break;
 80015d2:	e002      	b.n	80015da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	623b      	str	r3, [r7, #32]
      break;
 80015d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015da:	6a3b      	ldr	r3, [r7, #32]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc90      	pop	{r4, r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	080032d0 	.word	0x080032d0
 80015ec:	40021000 	.word	0x40021000
 80015f0:	007a1200 	.word	0x007a1200
 80015f4:	003d0900 	.word	0x003d0900

080015f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001610:	f7ff fff2 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	080032f0 	.word	0x080032f0

08001634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001638:	f7ff ffde 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	080032f0 	.word	0x080032f0

0800165c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <RCC_Delay+0x34>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <RCC_Delay+0x38>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001678:	bf00      	nop
  }
  while (Delay --);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <RCC_Delay+0x1c>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000000 	.word	0x20000000
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e076      	b.n	8001798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ba:	d009      	beq.n	80016d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
 80016c2:	e005      	b.n	80016d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe febc 	bl	8000468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001754:	ea42 0103 	orr.w	r1, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	0c1a      	lsrs	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f002 0204 	and.w	r2, r2, #4
 8001776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017bc:	d112      	bne.n	80017e4 <HAL_SPI_Receive+0x44>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10e      	bne.n	80017e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2204      	movs	r2, #4
 80017ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f8f1 	bl	80019c2 <HAL_SPI_TransmitReceive>
 80017e0:	4603      	mov	r3, r0
 80017e2:	e0ea      	b.n	80019ba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_SPI_Receive+0x52>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0e3      	b.n	80019ba <HAL_SPI_Receive+0x21a>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017fa:	f7ff f875 	bl	80008e8 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d002      	beq.n	8001812 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001810:	e0ca      	b.n	80019a8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_SPI_Receive+0x7e>
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001822:	e0c1      	b.n	80019a8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2204      	movs	r2, #4
 8001828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800186a:	d10f      	bne.n	800188c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800188a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	2b40      	cmp	r3, #64	; 0x40
 8001898:	d007      	beq.n	80018aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d162      	bne.n	8001978 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80018b2:	e02e      	b.n	8001912 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d115      	bne.n	80018ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f103 020c 	add.w	r2, r3, #12
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018ec:	e011      	b.n	8001912 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018ee:	f7fe fffb 	bl	80008e8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d803      	bhi.n	8001906 <HAL_SPI_Receive+0x166>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d102      	bne.n	800190c <HAL_SPI_Receive+0x16c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001910:	e04a      	b.n	80019a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001916:	b29b      	uxth	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1cb      	bne.n	80018b4 <HAL_SPI_Receive+0x114>
 800191c:	e031      	b.n	8001982 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d113      	bne.n	8001954 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	b292      	uxth	r2, r2
 8001938:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	1c9a      	adds	r2, r3, #2
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001952:	e011      	b.n	8001978 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001954:	f7fe ffc8 	bl	80008e8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d803      	bhi.n	800196c <HAL_SPI_Receive+0x1cc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196a:	d102      	bne.n	8001972 <HAL_SPI_Receive+0x1d2>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001976:	e017      	b.n	80019a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1cd      	bne.n	800191e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fa46 	bl	8001e18 <SPI_EndRxTransaction>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	e000      	b.n	80019a8 <HAL_SPI_Receive+0x208>
  }

error :
 80019a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b08c      	sub	sp, #48	; 0x30
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_SPI_TransmitReceive+0x26>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e18a      	b.n	8001cfe <HAL_SPI_TransmitReceive+0x33c>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f0:	f7fe ff7a 	bl	80008e8 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00f      	beq.n	8001a32 <HAL_SPI_TransmitReceive+0x70>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a18:	d107      	bne.n	8001a2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <HAL_SPI_TransmitReceive+0x68>
 8001a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a30:	e15b      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_SPI_TransmitReceive+0x82>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_SPI_TransmitReceive+0x82>
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d103      	bne.n	8001a4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a4a:	e14e      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d003      	beq.n	8001a60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d007      	beq.n	8001ab4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001abc:	d178      	bne.n	8001bb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_SPI_TransmitReceive+0x10a>
 8001ac6:	8b7b      	ldrh	r3, [r7, #26]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d166      	bne.n	8001b9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	1c9a      	adds	r2, r3, #2
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001af0:	e053      	b.n	8001b9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d11b      	bne.n	8001b38 <HAL_SPI_TransmitReceive+0x176>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d016      	beq.n	8001b38 <HAL_SPI_TransmitReceive+0x176>
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d113      	bne.n	8001b38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	1c9a      	adds	r2, r3, #2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d119      	bne.n	8001b7a <HAL_SPI_TransmitReceive+0x1b8>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d014      	beq.n	8001b7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	1c9a      	adds	r2, r3, #2
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b76:	2301      	movs	r3, #1
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b7a:	f7fe feb5 	bl	80008e8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d807      	bhi.n	8001b9a <HAL_SPI_TransmitReceive+0x1d8>
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d003      	beq.n	8001b9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b98:	e0a7      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1a6      	bne.n	8001af2 <HAL_SPI_TransmitReceive+0x130>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1a1      	bne.n	8001af2 <HAL_SPI_TransmitReceive+0x130>
 8001bae:	e07c      	b.n	8001caa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_SPI_TransmitReceive+0x1fc>
 8001bb8:	8b7b      	ldrh	r3, [r7, #26]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d16b      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be4:	e057      	b.n	8001c96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d11c      	bne.n	8001c2e <HAL_SPI_TransmitReceive+0x26c>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d017      	beq.n	8001c2e <HAL_SPI_TransmitReceive+0x26c>
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d114      	bne.n	8001c2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d119      	bne.n	8001c70 <HAL_SPI_TransmitReceive+0x2ae>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d014      	beq.n	8001c70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c70:	f7fe fe3a 	bl	80008e8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d803      	bhi.n	8001c88 <HAL_SPI_TransmitReceive+0x2c6>
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d102      	bne.n	8001c8e <HAL_SPI_TransmitReceive+0x2cc>
 8001c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c94:	e029      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1a2      	bne.n	8001be6 <HAL_SPI_TransmitReceive+0x224>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d19d      	bne.n	8001be6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f904 	bl	8001ebc <SPI_EndRxTxTransaction>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cc6:	e010      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10b      	bne.n	8001ce8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	e000      	b.n	8001cea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001ce8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d18:	f7fe fde6 	bl	80008e8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d28:	f7fe fdde 	bl	80008e8 <HAL_GetTick>
 8001d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	0d1b      	lsrs	r3, r3, #20
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d3e:	e054      	b.n	8001dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d46:	d050      	beq.n	8001dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d48:	f7fe fdce 	bl	80008e8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d902      	bls.n	8001d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d13d      	bne.n	8001dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d76:	d111      	bne.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d80:	d004      	beq.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8a:	d107      	bne.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da4:	d10f      	bne.n	8001dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e017      	b.n	8001e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d19b      	bne.n	8001d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e2c:	d111      	bne.n	8001e52 <SPI_EndRxTransaction+0x3a>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e36:	d004      	beq.n	8001e42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e40:	d107      	bne.n	8001e52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e50:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e5a:	d117      	bne.n	8001e8c <SPI_EndRxTransaction+0x74>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	d112      	bne.n	8001e8c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2101      	movs	r1, #1
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff ff49 	bl	8001d08 <SPI_WaitFlagStateUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01a      	beq.n	8001eb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f043 0220 	orr.w	r2, r3, #32
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e013      	b.n	8001eb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff ff36 	bl	8001d08 <SPI_WaitFlagStateUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e000      	b.n	8001eb4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff ff18 	bl	8001d08 <SPI_WaitFlagStateUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	f043 0220 	orr.w	r2, r3, #32
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e000      	b.n	8001ef0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e03f      	b.n	8001f8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fc18 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f905 	bl	800214c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08a      	sub	sp, #40	; 0x28
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d17c      	bne.n	80020ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_UART_Transmit+0x2c>
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e075      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_UART_Transmit+0x3e>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e06e      	b.n	80020ae <HAL_UART_Transmit+0x11c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	; 0x21
 8001fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe fc7f 	bl	80008e8 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x82>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002024:	e02a      	b.n	800207c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f840 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e036      	b.n	80020ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cf      	bne.n	8002026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f810 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c6:	e02c      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d028      	beq.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80020d6:	f7fe fc07 	bl	80008e8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d21d      	bcs.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e00f      	b.n	8002142 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d0c3      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002186:	f023 030c 	bic.w	r3, r3, #12
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	430b      	orrs	r3, r1
 8002192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <UART_SetConfig+0x114>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fa3e 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fa26 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	0119      	lsls	r1, r3, #4
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <UART_SetConfig+0x118>)
 80021fa:	fba3 0302 	umull	r0, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <UART_SetConfig+0x118>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002218:	4419      	add	r1, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	440a      	add	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013800 	.word	0x40013800
 8002264:	51eb851f 	.word	0x51eb851f

08002268 <__errno>:
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <__errno+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000000c 	.word	0x2000000c

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	2600      	movs	r6, #0
 8002278:	4d0c      	ldr	r5, [pc, #48]	; (80022ac <__libc_init_array+0x38>)
 800227a:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	42a6      	cmp	r6, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	f000 fff8 	bl	8003278 <_init>
 8002288:	2600      	movs	r6, #0
 800228a:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <__libc_init_array+0x40>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <__libc_init_array+0x44>)
 800228e:	1b64      	subs	r4, r4, r5
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	42a6      	cmp	r6, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f855 3b04 	ldr.w	r3, [r5], #4
 800229c:	4798      	blx	r3
 800229e:	3601      	adds	r6, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a6:	4798      	blx	r3
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08003390 	.word	0x08003390
 80022b0:	08003390 	.word	0x08003390
 80022b4:	08003390 	.word	0x08003390
 80022b8:	08003394 	.word	0x08003394

080022bc <memset>:
 80022bc:	4603      	mov	r3, r0
 80022be:	4402      	add	r2, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <iprintf>:
 80022cc:	b40f      	push	{r0, r1, r2, r3}
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <iprintf+0x2c>)
 80022d0:	b513      	push	{r0, r1, r4, lr}
 80022d2:	681c      	ldr	r4, [r3, #0]
 80022d4:	b124      	cbz	r4, 80022e0 <iprintf+0x14>
 80022d6:	69a3      	ldr	r3, [r4, #24]
 80022d8:	b913      	cbnz	r3, 80022e0 <iprintf+0x14>
 80022da:	4620      	mov	r0, r4
 80022dc:	f000 fa5e 	bl	800279c <__sinit>
 80022e0:	ab05      	add	r3, sp, #20
 80022e2:	4620      	mov	r0, r4
 80022e4:	9a04      	ldr	r2, [sp, #16]
 80022e6:	68a1      	ldr	r1, [r4, #8]
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f000 fc29 	bl	8002b40 <_vfiprintf_r>
 80022ee:	b002      	add	sp, #8
 80022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f4:	b004      	add	sp, #16
 80022f6:	4770      	bx	lr
 80022f8:	2000000c 	.word	0x2000000c

080022fc <_puts_r>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	460e      	mov	r6, r1
 8002300:	4605      	mov	r5, r0
 8002302:	b118      	cbz	r0, 800230c <_puts_r+0x10>
 8002304:	6983      	ldr	r3, [r0, #24]
 8002306:	b90b      	cbnz	r3, 800230c <_puts_r+0x10>
 8002308:	f000 fa48 	bl	800279c <__sinit>
 800230c:	69ab      	ldr	r3, [r5, #24]
 800230e:	68ac      	ldr	r4, [r5, #8]
 8002310:	b913      	cbnz	r3, 8002318 <_puts_r+0x1c>
 8002312:	4628      	mov	r0, r5
 8002314:	f000 fa42 	bl	800279c <__sinit>
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <_puts_r+0xd0>)
 800231a:	429c      	cmp	r4, r3
 800231c:	d120      	bne.n	8002360 <_puts_r+0x64>
 800231e:	686c      	ldr	r4, [r5, #4]
 8002320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002322:	07db      	lsls	r3, r3, #31
 8002324:	d405      	bmi.n	8002332 <_puts_r+0x36>
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	0598      	lsls	r0, r3, #22
 800232a:	d402      	bmi.n	8002332 <_puts_r+0x36>
 800232c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800232e:	f000 fad3 	bl	80028d8 <__retarget_lock_acquire_recursive>
 8002332:	89a3      	ldrh	r3, [r4, #12]
 8002334:	0719      	lsls	r1, r3, #28
 8002336:	d51d      	bpl.n	8002374 <_puts_r+0x78>
 8002338:	6923      	ldr	r3, [r4, #16]
 800233a:	b1db      	cbz	r3, 8002374 <_puts_r+0x78>
 800233c:	3e01      	subs	r6, #1
 800233e:	68a3      	ldr	r3, [r4, #8]
 8002340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002344:	3b01      	subs	r3, #1
 8002346:	60a3      	str	r3, [r4, #8]
 8002348:	bb39      	cbnz	r1, 800239a <_puts_r+0x9e>
 800234a:	2b00      	cmp	r3, #0
 800234c:	da38      	bge.n	80023c0 <_puts_r+0xc4>
 800234e:	4622      	mov	r2, r4
 8002350:	210a      	movs	r1, #10
 8002352:	4628      	mov	r0, r5
 8002354:	f000 f848 	bl	80023e8 <__swbuf_r>
 8002358:	3001      	adds	r0, #1
 800235a:	d011      	beq.n	8002380 <_puts_r+0x84>
 800235c:	250a      	movs	r5, #10
 800235e:	e011      	b.n	8002384 <_puts_r+0x88>
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <_puts_r+0xd4>)
 8002362:	429c      	cmp	r4, r3
 8002364:	d101      	bne.n	800236a <_puts_r+0x6e>
 8002366:	68ac      	ldr	r4, [r5, #8]
 8002368:	e7da      	b.n	8002320 <_puts_r+0x24>
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <_puts_r+0xd8>)
 800236c:	429c      	cmp	r4, r3
 800236e:	bf08      	it	eq
 8002370:	68ec      	ldreq	r4, [r5, #12]
 8002372:	e7d5      	b.n	8002320 <_puts_r+0x24>
 8002374:	4621      	mov	r1, r4
 8002376:	4628      	mov	r0, r5
 8002378:	f000 f888 	bl	800248c <__swsetup_r>
 800237c:	2800      	cmp	r0, #0
 800237e:	d0dd      	beq.n	800233c <_puts_r+0x40>
 8002380:	f04f 35ff 	mov.w	r5, #4294967295
 8002384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002386:	07da      	lsls	r2, r3, #31
 8002388:	d405      	bmi.n	8002396 <_puts_r+0x9a>
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	059b      	lsls	r3, r3, #22
 800238e:	d402      	bmi.n	8002396 <_puts_r+0x9a>
 8002390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002392:	f000 faa2 	bl	80028da <__retarget_lock_release_recursive>
 8002396:	4628      	mov	r0, r5
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	2b00      	cmp	r3, #0
 800239c:	da04      	bge.n	80023a8 <_puts_r+0xac>
 800239e:	69a2      	ldr	r2, [r4, #24]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dc06      	bgt.n	80023b2 <_puts_r+0xb6>
 80023a4:	290a      	cmp	r1, #10
 80023a6:	d004      	beq.n	80023b2 <_puts_r+0xb6>
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	6022      	str	r2, [r4, #0]
 80023ae:	7019      	strb	r1, [r3, #0]
 80023b0:	e7c5      	b.n	800233e <_puts_r+0x42>
 80023b2:	4622      	mov	r2, r4
 80023b4:	4628      	mov	r0, r5
 80023b6:	f000 f817 	bl	80023e8 <__swbuf_r>
 80023ba:	3001      	adds	r0, #1
 80023bc:	d1bf      	bne.n	800233e <_puts_r+0x42>
 80023be:	e7df      	b.n	8002380 <_puts_r+0x84>
 80023c0:	250a      	movs	r5, #10
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	6022      	str	r2, [r4, #0]
 80023c8:	701d      	strb	r5, [r3, #0]
 80023ca:	e7db      	b.n	8002384 <_puts_r+0x88>
 80023cc:	0800331c 	.word	0x0800331c
 80023d0:	0800333c 	.word	0x0800333c
 80023d4:	080032fc 	.word	0x080032fc

080023d8 <puts>:
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <puts+0xc>)
 80023da:	4601      	mov	r1, r0
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f7ff bf8d 	b.w	80022fc <_puts_r>
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c

080023e8 <__swbuf_r>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	460e      	mov	r6, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	4605      	mov	r5, r0
 80023f0:	b118      	cbz	r0, 80023fa <__swbuf_r+0x12>
 80023f2:	6983      	ldr	r3, [r0, #24]
 80023f4:	b90b      	cbnz	r3, 80023fa <__swbuf_r+0x12>
 80023f6:	f000 f9d1 	bl	800279c <__sinit>
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <__swbuf_r+0x98>)
 80023fc:	429c      	cmp	r4, r3
 80023fe:	d12b      	bne.n	8002458 <__swbuf_r+0x70>
 8002400:	686c      	ldr	r4, [r5, #4]
 8002402:	69a3      	ldr	r3, [r4, #24]
 8002404:	60a3      	str	r3, [r4, #8]
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	071a      	lsls	r2, r3, #28
 800240a:	d52f      	bpl.n	800246c <__swbuf_r+0x84>
 800240c:	6923      	ldr	r3, [r4, #16]
 800240e:	b36b      	cbz	r3, 800246c <__swbuf_r+0x84>
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	b2f6      	uxtb	r6, r6
 8002416:	1ac0      	subs	r0, r0, r3
 8002418:	6963      	ldr	r3, [r4, #20]
 800241a:	4637      	mov	r7, r6
 800241c:	4283      	cmp	r3, r0
 800241e:	dc04      	bgt.n	800242a <__swbuf_r+0x42>
 8002420:	4621      	mov	r1, r4
 8002422:	4628      	mov	r0, r5
 8002424:	f000 f926 	bl	8002674 <_fflush_r>
 8002428:	bb30      	cbnz	r0, 8002478 <__swbuf_r+0x90>
 800242a:	68a3      	ldr	r3, [r4, #8]
 800242c:	3001      	adds	r0, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	60a3      	str	r3, [r4, #8]
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	6022      	str	r2, [r4, #0]
 8002438:	701e      	strb	r6, [r3, #0]
 800243a:	6963      	ldr	r3, [r4, #20]
 800243c:	4283      	cmp	r3, r0
 800243e:	d004      	beq.n	800244a <__swbuf_r+0x62>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	07db      	lsls	r3, r3, #31
 8002444:	d506      	bpl.n	8002454 <__swbuf_r+0x6c>
 8002446:	2e0a      	cmp	r6, #10
 8002448:	d104      	bne.n	8002454 <__swbuf_r+0x6c>
 800244a:	4621      	mov	r1, r4
 800244c:	4628      	mov	r0, r5
 800244e:	f000 f911 	bl	8002674 <_fflush_r>
 8002452:	b988      	cbnz	r0, 8002478 <__swbuf_r+0x90>
 8002454:	4638      	mov	r0, r7
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <__swbuf_r+0x9c>)
 800245a:	429c      	cmp	r4, r3
 800245c:	d101      	bne.n	8002462 <__swbuf_r+0x7a>
 800245e:	68ac      	ldr	r4, [r5, #8]
 8002460:	e7cf      	b.n	8002402 <__swbuf_r+0x1a>
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <__swbuf_r+0xa0>)
 8002464:	429c      	cmp	r4, r3
 8002466:	bf08      	it	eq
 8002468:	68ec      	ldreq	r4, [r5, #12]
 800246a:	e7ca      	b.n	8002402 <__swbuf_r+0x1a>
 800246c:	4621      	mov	r1, r4
 800246e:	4628      	mov	r0, r5
 8002470:	f000 f80c 	bl	800248c <__swsetup_r>
 8002474:	2800      	cmp	r0, #0
 8002476:	d0cb      	beq.n	8002410 <__swbuf_r+0x28>
 8002478:	f04f 37ff 	mov.w	r7, #4294967295
 800247c:	e7ea      	b.n	8002454 <__swbuf_r+0x6c>
 800247e:	bf00      	nop
 8002480:	0800331c 	.word	0x0800331c
 8002484:	0800333c 	.word	0x0800333c
 8002488:	080032fc 	.word	0x080032fc

0800248c <__swsetup_r>:
 800248c:	4b32      	ldr	r3, [pc, #200]	; (8002558 <__swsetup_r+0xcc>)
 800248e:	b570      	push	{r4, r5, r6, lr}
 8002490:	681d      	ldr	r5, [r3, #0]
 8002492:	4606      	mov	r6, r0
 8002494:	460c      	mov	r4, r1
 8002496:	b125      	cbz	r5, 80024a2 <__swsetup_r+0x16>
 8002498:	69ab      	ldr	r3, [r5, #24]
 800249a:	b913      	cbnz	r3, 80024a2 <__swsetup_r+0x16>
 800249c:	4628      	mov	r0, r5
 800249e:	f000 f97d 	bl	800279c <__sinit>
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <__swsetup_r+0xd0>)
 80024a4:	429c      	cmp	r4, r3
 80024a6:	d10f      	bne.n	80024c8 <__swsetup_r+0x3c>
 80024a8:	686c      	ldr	r4, [r5, #4]
 80024aa:	89a3      	ldrh	r3, [r4, #12]
 80024ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024b0:	0719      	lsls	r1, r3, #28
 80024b2:	d42c      	bmi.n	800250e <__swsetup_r+0x82>
 80024b4:	06dd      	lsls	r5, r3, #27
 80024b6:	d411      	bmi.n	80024dc <__swsetup_r+0x50>
 80024b8:	2309      	movs	r3, #9
 80024ba:	6033      	str	r3, [r6, #0]
 80024bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	e03e      	b.n	8002546 <__swsetup_r+0xba>
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <__swsetup_r+0xd4>)
 80024ca:	429c      	cmp	r4, r3
 80024cc:	d101      	bne.n	80024d2 <__swsetup_r+0x46>
 80024ce:	68ac      	ldr	r4, [r5, #8]
 80024d0:	e7eb      	b.n	80024aa <__swsetup_r+0x1e>
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <__swsetup_r+0xd8>)
 80024d4:	429c      	cmp	r4, r3
 80024d6:	bf08      	it	eq
 80024d8:	68ec      	ldreq	r4, [r5, #12]
 80024da:	e7e6      	b.n	80024aa <__swsetup_r+0x1e>
 80024dc:	0758      	lsls	r0, r3, #29
 80024de:	d512      	bpl.n	8002506 <__swsetup_r+0x7a>
 80024e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024e2:	b141      	cbz	r1, 80024f6 <__swsetup_r+0x6a>
 80024e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d002      	beq.n	80024f2 <__swsetup_r+0x66>
 80024ec:	4630      	mov	r0, r6
 80024ee:	f000 fa59 	bl	80029a4 <_free_r>
 80024f2:	2300      	movs	r3, #0
 80024f4:	6363      	str	r3, [r4, #52]	; 0x34
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80024fc:	81a3      	strh	r3, [r4, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	6063      	str	r3, [r4, #4]
 8002502:	6923      	ldr	r3, [r4, #16]
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	81a3      	strh	r3, [r4, #12]
 800250e:	6923      	ldr	r3, [r4, #16]
 8002510:	b94b      	cbnz	r3, 8002526 <__swsetup_r+0x9a>
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251c:	d003      	beq.n	8002526 <__swsetup_r+0x9a>
 800251e:	4621      	mov	r1, r4
 8002520:	4630      	mov	r0, r6
 8002522:	f000 f9ff 	bl	8002924 <__smakebuf_r>
 8002526:	89a0      	ldrh	r0, [r4, #12]
 8002528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800252c:	f010 0301 	ands.w	r3, r0, #1
 8002530:	d00a      	beq.n	8002548 <__swsetup_r+0xbc>
 8002532:	2300      	movs	r3, #0
 8002534:	60a3      	str	r3, [r4, #8]
 8002536:	6963      	ldr	r3, [r4, #20]
 8002538:	425b      	negs	r3, r3
 800253a:	61a3      	str	r3, [r4, #24]
 800253c:	6923      	ldr	r3, [r4, #16]
 800253e:	b943      	cbnz	r3, 8002552 <__swsetup_r+0xc6>
 8002540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002544:	d1ba      	bne.n	80024bc <__swsetup_r+0x30>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	0781      	lsls	r1, r0, #30
 800254a:	bf58      	it	pl
 800254c:	6963      	ldrpl	r3, [r4, #20]
 800254e:	60a3      	str	r3, [r4, #8]
 8002550:	e7f4      	b.n	800253c <__swsetup_r+0xb0>
 8002552:	2000      	movs	r0, #0
 8002554:	e7f7      	b.n	8002546 <__swsetup_r+0xba>
 8002556:	bf00      	nop
 8002558:	2000000c 	.word	0x2000000c
 800255c:	0800331c 	.word	0x0800331c
 8002560:	0800333c 	.word	0x0800333c
 8002564:	080032fc 	.word	0x080032fc

08002568 <__sflush_r>:
 8002568:	898a      	ldrh	r2, [r1, #12]
 800256a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800256e:	4605      	mov	r5, r0
 8002570:	0710      	lsls	r0, r2, #28
 8002572:	460c      	mov	r4, r1
 8002574:	d458      	bmi.n	8002628 <__sflush_r+0xc0>
 8002576:	684b      	ldr	r3, [r1, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	dc05      	bgt.n	8002588 <__sflush_r+0x20>
 800257c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	dc02      	bgt.n	8002588 <__sflush_r+0x20>
 8002582:	2000      	movs	r0, #0
 8002584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800258a:	2e00      	cmp	r6, #0
 800258c:	d0f9      	beq.n	8002582 <__sflush_r+0x1a>
 800258e:	2300      	movs	r3, #0
 8002590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002594:	682f      	ldr	r7, [r5, #0]
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	d032      	beq.n	8002600 <__sflush_r+0x98>
 800259a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	075a      	lsls	r2, r3, #29
 80025a0:	d505      	bpl.n	80025ae <__sflush_r+0x46>
 80025a2:	6863      	ldr	r3, [r4, #4]
 80025a4:	1ac0      	subs	r0, r0, r3
 80025a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025a8:	b10b      	cbz	r3, 80025ae <__sflush_r+0x46>
 80025aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ac:	1ac0      	subs	r0, r0, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	4602      	mov	r2, r0
 80025b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025b4:	4628      	mov	r0, r5
 80025b6:	6a21      	ldr	r1, [r4, #32]
 80025b8:	47b0      	blx	r6
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	d106      	bne.n	80025ce <__sflush_r+0x66>
 80025c0:	6829      	ldr	r1, [r5, #0]
 80025c2:	291d      	cmp	r1, #29
 80025c4:	d82c      	bhi.n	8002620 <__sflush_r+0xb8>
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <__sflush_r+0x108>)
 80025c8:	40ca      	lsrs	r2, r1
 80025ca:	07d6      	lsls	r6, r2, #31
 80025cc:	d528      	bpl.n	8002620 <__sflush_r+0xb8>
 80025ce:	2200      	movs	r2, #0
 80025d0:	6062      	str	r2, [r4, #4]
 80025d2:	6922      	ldr	r2, [r4, #16]
 80025d4:	04d9      	lsls	r1, r3, #19
 80025d6:	6022      	str	r2, [r4, #0]
 80025d8:	d504      	bpl.n	80025e4 <__sflush_r+0x7c>
 80025da:	1c42      	adds	r2, r0, #1
 80025dc:	d101      	bne.n	80025e2 <__sflush_r+0x7a>
 80025de:	682b      	ldr	r3, [r5, #0]
 80025e0:	b903      	cbnz	r3, 80025e4 <__sflush_r+0x7c>
 80025e2:	6560      	str	r0, [r4, #84]	; 0x54
 80025e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025e6:	602f      	str	r7, [r5, #0]
 80025e8:	2900      	cmp	r1, #0
 80025ea:	d0ca      	beq.n	8002582 <__sflush_r+0x1a>
 80025ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025f0:	4299      	cmp	r1, r3
 80025f2:	d002      	beq.n	80025fa <__sflush_r+0x92>
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 f9d5 	bl	80029a4 <_free_r>
 80025fa:	2000      	movs	r0, #0
 80025fc:	6360      	str	r0, [r4, #52]	; 0x34
 80025fe:	e7c1      	b.n	8002584 <__sflush_r+0x1c>
 8002600:	6a21      	ldr	r1, [r4, #32]
 8002602:	2301      	movs	r3, #1
 8002604:	4628      	mov	r0, r5
 8002606:	47b0      	blx	r6
 8002608:	1c41      	adds	r1, r0, #1
 800260a:	d1c7      	bne.n	800259c <__sflush_r+0x34>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0c4      	beq.n	800259c <__sflush_r+0x34>
 8002612:	2b1d      	cmp	r3, #29
 8002614:	d001      	beq.n	800261a <__sflush_r+0xb2>
 8002616:	2b16      	cmp	r3, #22
 8002618:	d101      	bne.n	800261e <__sflush_r+0xb6>
 800261a:	602f      	str	r7, [r5, #0]
 800261c:	e7b1      	b.n	8002582 <__sflush_r+0x1a>
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	81a3      	strh	r3, [r4, #12]
 8002626:	e7ad      	b.n	8002584 <__sflush_r+0x1c>
 8002628:	690f      	ldr	r7, [r1, #16]
 800262a:	2f00      	cmp	r7, #0
 800262c:	d0a9      	beq.n	8002582 <__sflush_r+0x1a>
 800262e:	0793      	lsls	r3, r2, #30
 8002630:	bf18      	it	ne
 8002632:	2300      	movne	r3, #0
 8002634:	680e      	ldr	r6, [r1, #0]
 8002636:	bf08      	it	eq
 8002638:	694b      	ldreq	r3, [r1, #20]
 800263a:	eba6 0807 	sub.w	r8, r6, r7
 800263e:	600f      	str	r7, [r1, #0]
 8002640:	608b      	str	r3, [r1, #8]
 8002642:	f1b8 0f00 	cmp.w	r8, #0
 8002646:	dd9c      	ble.n	8002582 <__sflush_r+0x1a>
 8002648:	4643      	mov	r3, r8
 800264a:	463a      	mov	r2, r7
 800264c:	4628      	mov	r0, r5
 800264e:	6a21      	ldr	r1, [r4, #32]
 8002650:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002652:	47b0      	blx	r6
 8002654:	2800      	cmp	r0, #0
 8002656:	dc06      	bgt.n	8002666 <__sflush_r+0xfe>
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	f04f 30ff 	mov.w	r0, #4294967295
 800265e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002662:	81a3      	strh	r3, [r4, #12]
 8002664:	e78e      	b.n	8002584 <__sflush_r+0x1c>
 8002666:	4407      	add	r7, r0
 8002668:	eba8 0800 	sub.w	r8, r8, r0
 800266c:	e7e9      	b.n	8002642 <__sflush_r+0xda>
 800266e:	bf00      	nop
 8002670:	20400001 	.word	0x20400001

08002674 <_fflush_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	4605      	mov	r5, r0
 800267a:	460c      	mov	r4, r1
 800267c:	b913      	cbnz	r3, 8002684 <_fflush_r+0x10>
 800267e:	2500      	movs	r5, #0
 8002680:	4628      	mov	r0, r5
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	b118      	cbz	r0, 800268e <_fflush_r+0x1a>
 8002686:	6983      	ldr	r3, [r0, #24]
 8002688:	b90b      	cbnz	r3, 800268e <_fflush_r+0x1a>
 800268a:	f000 f887 	bl	800279c <__sinit>
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <_fflush_r+0x6c>)
 8002690:	429c      	cmp	r4, r3
 8002692:	d11b      	bne.n	80026cc <_fflush_r+0x58>
 8002694:	686c      	ldr	r4, [r5, #4]
 8002696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ef      	beq.n	800267e <_fflush_r+0xa>
 800269e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026a0:	07d0      	lsls	r0, r2, #31
 80026a2:	d404      	bmi.n	80026ae <_fflush_r+0x3a>
 80026a4:	0599      	lsls	r1, r3, #22
 80026a6:	d402      	bmi.n	80026ae <_fflush_r+0x3a>
 80026a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026aa:	f000 f915 	bl	80028d8 <__retarget_lock_acquire_recursive>
 80026ae:	4628      	mov	r0, r5
 80026b0:	4621      	mov	r1, r4
 80026b2:	f7ff ff59 	bl	8002568 <__sflush_r>
 80026b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026b8:	4605      	mov	r5, r0
 80026ba:	07da      	lsls	r2, r3, #31
 80026bc:	d4e0      	bmi.n	8002680 <_fflush_r+0xc>
 80026be:	89a3      	ldrh	r3, [r4, #12]
 80026c0:	059b      	lsls	r3, r3, #22
 80026c2:	d4dd      	bmi.n	8002680 <_fflush_r+0xc>
 80026c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026c6:	f000 f908 	bl	80028da <__retarget_lock_release_recursive>
 80026ca:	e7d9      	b.n	8002680 <_fflush_r+0xc>
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <_fflush_r+0x70>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d101      	bne.n	80026d6 <_fflush_r+0x62>
 80026d2:	68ac      	ldr	r4, [r5, #8]
 80026d4:	e7df      	b.n	8002696 <_fflush_r+0x22>
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <_fflush_r+0x74>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	bf08      	it	eq
 80026dc:	68ec      	ldreq	r4, [r5, #12]
 80026de:	e7da      	b.n	8002696 <_fflush_r+0x22>
 80026e0:	0800331c 	.word	0x0800331c
 80026e4:	0800333c 	.word	0x0800333c
 80026e8:	080032fc 	.word	0x080032fc

080026ec <std>:
 80026ec:	2300      	movs	r3, #0
 80026ee:	b510      	push	{r4, lr}
 80026f0:	4604      	mov	r4, r0
 80026f2:	e9c0 3300 	strd	r3, r3, [r0]
 80026f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026fa:	6083      	str	r3, [r0, #8]
 80026fc:	8181      	strh	r1, [r0, #12]
 80026fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002700:	81c2      	strh	r2, [r0, #14]
 8002702:	6183      	str	r3, [r0, #24]
 8002704:	4619      	mov	r1, r3
 8002706:	2208      	movs	r2, #8
 8002708:	305c      	adds	r0, #92	; 0x5c
 800270a:	f7ff fdd7 	bl	80022bc <memset>
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <std+0x38>)
 8002710:	6224      	str	r4, [r4, #32]
 8002712:	6263      	str	r3, [r4, #36]	; 0x24
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <std+0x3c>)
 8002716:	62a3      	str	r3, [r4, #40]	; 0x28
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <std+0x40>)
 800271a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <std+0x44>)
 800271e:	6323      	str	r3, [r4, #48]	; 0x30
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	080030ed 	.word	0x080030ed
 8002728:	0800310f 	.word	0x0800310f
 800272c:	08003147 	.word	0x08003147
 8002730:	0800316b 	.word	0x0800316b

08002734 <_cleanup_r>:
 8002734:	4901      	ldr	r1, [pc, #4]	; (800273c <_cleanup_r+0x8>)
 8002736:	f000 b8af 	b.w	8002898 <_fwalk_reent>
 800273a:	bf00      	nop
 800273c:	08002675 	.word	0x08002675

08002740 <__sfmoreglue>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2568      	movs	r5, #104	; 0x68
 8002744:	1e4a      	subs	r2, r1, #1
 8002746:	4355      	muls	r5, r2
 8002748:	460e      	mov	r6, r1
 800274a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800274e:	f000 f975 	bl	8002a3c <_malloc_r>
 8002752:	4604      	mov	r4, r0
 8002754:	b140      	cbz	r0, 8002768 <__sfmoreglue+0x28>
 8002756:	2100      	movs	r1, #0
 8002758:	e9c0 1600 	strd	r1, r6, [r0]
 800275c:	300c      	adds	r0, #12
 800275e:	60a0      	str	r0, [r4, #8]
 8002760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002764:	f7ff fdaa 	bl	80022bc <memset>
 8002768:	4620      	mov	r0, r4
 800276a:	bd70      	pop	{r4, r5, r6, pc}

0800276c <__sfp_lock_acquire>:
 800276c:	4801      	ldr	r0, [pc, #4]	; (8002774 <__sfp_lock_acquire+0x8>)
 800276e:	f000 b8b3 	b.w	80028d8 <__retarget_lock_acquire_recursive>
 8002772:	bf00      	nop
 8002774:	200001e8 	.word	0x200001e8

08002778 <__sfp_lock_release>:
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <__sfp_lock_release+0x8>)
 800277a:	f000 b8ae 	b.w	80028da <__retarget_lock_release_recursive>
 800277e:	bf00      	nop
 8002780:	200001e8 	.word	0x200001e8

08002784 <__sinit_lock_acquire>:
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <__sinit_lock_acquire+0x8>)
 8002786:	f000 b8a7 	b.w	80028d8 <__retarget_lock_acquire_recursive>
 800278a:	bf00      	nop
 800278c:	200001e3 	.word	0x200001e3

08002790 <__sinit_lock_release>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__sinit_lock_release+0x8>)
 8002792:	f000 b8a2 	b.w	80028da <__retarget_lock_release_recursive>
 8002796:	bf00      	nop
 8002798:	200001e3 	.word	0x200001e3

0800279c <__sinit>:
 800279c:	b510      	push	{r4, lr}
 800279e:	4604      	mov	r4, r0
 80027a0:	f7ff fff0 	bl	8002784 <__sinit_lock_acquire>
 80027a4:	69a3      	ldr	r3, [r4, #24]
 80027a6:	b11b      	cbz	r3, 80027b0 <__sinit+0x14>
 80027a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ac:	f7ff bff0 	b.w	8002790 <__sinit_lock_release>
 80027b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027b4:	6523      	str	r3, [r4, #80]	; 0x50
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <__sinit+0x68>)
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <__sinit+0x6c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80027be:	42a3      	cmp	r3, r4
 80027c0:	bf08      	it	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	4620      	mov	r0, r4
 80027c6:	bf08      	it	eq
 80027c8:	61a3      	streq	r3, [r4, #24]
 80027ca:	f000 f81f 	bl	800280c <__sfp>
 80027ce:	6060      	str	r0, [r4, #4]
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 f81b 	bl	800280c <__sfp>
 80027d6:	60a0      	str	r0, [r4, #8]
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 f817 	bl	800280c <__sfp>
 80027de:	2200      	movs	r2, #0
 80027e0:	2104      	movs	r1, #4
 80027e2:	60e0      	str	r0, [r4, #12]
 80027e4:	6860      	ldr	r0, [r4, #4]
 80027e6:	f7ff ff81 	bl	80026ec <std>
 80027ea:	2201      	movs	r2, #1
 80027ec:	2109      	movs	r1, #9
 80027ee:	68a0      	ldr	r0, [r4, #8]
 80027f0:	f7ff ff7c 	bl	80026ec <std>
 80027f4:	2202      	movs	r2, #2
 80027f6:	2112      	movs	r1, #18
 80027f8:	68e0      	ldr	r0, [r4, #12]
 80027fa:	f7ff ff77 	bl	80026ec <std>
 80027fe:	2301      	movs	r3, #1
 8002800:	61a3      	str	r3, [r4, #24]
 8002802:	e7d1      	b.n	80027a8 <__sinit+0xc>
 8002804:	080032f8 	.word	0x080032f8
 8002808:	08002735 	.word	0x08002735

0800280c <__sfp>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	4607      	mov	r7, r0
 8002810:	f7ff ffac 	bl	800276c <__sfp_lock_acquire>
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <__sfp+0x84>)
 8002816:	681e      	ldr	r6, [r3, #0]
 8002818:	69b3      	ldr	r3, [r6, #24]
 800281a:	b913      	cbnz	r3, 8002822 <__sfp+0x16>
 800281c:	4630      	mov	r0, r6
 800281e:	f7ff ffbd 	bl	800279c <__sinit>
 8002822:	3648      	adds	r6, #72	; 0x48
 8002824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002828:	3b01      	subs	r3, #1
 800282a:	d503      	bpl.n	8002834 <__sfp+0x28>
 800282c:	6833      	ldr	r3, [r6, #0]
 800282e:	b30b      	cbz	r3, 8002874 <__sfp+0x68>
 8002830:	6836      	ldr	r6, [r6, #0]
 8002832:	e7f7      	b.n	8002824 <__sfp+0x18>
 8002834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002838:	b9d5      	cbnz	r5, 8002870 <__sfp+0x64>
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <__sfp+0x88>)
 800283c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002840:	60e3      	str	r3, [r4, #12]
 8002842:	6665      	str	r5, [r4, #100]	; 0x64
 8002844:	f000 f847 	bl	80028d6 <__retarget_lock_init_recursive>
 8002848:	f7ff ff96 	bl	8002778 <__sfp_lock_release>
 800284c:	2208      	movs	r2, #8
 800284e:	4629      	mov	r1, r5
 8002850:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002854:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002858:	6025      	str	r5, [r4, #0]
 800285a:	61a5      	str	r5, [r4, #24]
 800285c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002860:	f7ff fd2c 	bl	80022bc <memset>
 8002864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800286c:	4620      	mov	r0, r4
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002870:	3468      	adds	r4, #104	; 0x68
 8002872:	e7d9      	b.n	8002828 <__sfp+0x1c>
 8002874:	2104      	movs	r1, #4
 8002876:	4638      	mov	r0, r7
 8002878:	f7ff ff62 	bl	8002740 <__sfmoreglue>
 800287c:	4604      	mov	r4, r0
 800287e:	6030      	str	r0, [r6, #0]
 8002880:	2800      	cmp	r0, #0
 8002882:	d1d5      	bne.n	8002830 <__sfp+0x24>
 8002884:	f7ff ff78 	bl	8002778 <__sfp_lock_release>
 8002888:	230c      	movs	r3, #12
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	e7ee      	b.n	800286c <__sfp+0x60>
 800288e:	bf00      	nop
 8002890:	080032f8 	.word	0x080032f8
 8002894:	ffff0001 	.word	0xffff0001

08002898 <_fwalk_reent>:
 8002898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800289c:	4606      	mov	r6, r0
 800289e:	4688      	mov	r8, r1
 80028a0:	2700      	movs	r7, #0
 80028a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028aa:	f1b9 0901 	subs.w	r9, r9, #1
 80028ae:	d505      	bpl.n	80028bc <_fwalk_reent+0x24>
 80028b0:	6824      	ldr	r4, [r4, #0]
 80028b2:	2c00      	cmp	r4, #0
 80028b4:	d1f7      	bne.n	80028a6 <_fwalk_reent+0xe>
 80028b6:	4638      	mov	r0, r7
 80028b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028bc:	89ab      	ldrh	r3, [r5, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d907      	bls.n	80028d2 <_fwalk_reent+0x3a>
 80028c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028c6:	3301      	adds	r3, #1
 80028c8:	d003      	beq.n	80028d2 <_fwalk_reent+0x3a>
 80028ca:	4629      	mov	r1, r5
 80028cc:	4630      	mov	r0, r6
 80028ce:	47c0      	blx	r8
 80028d0:	4307      	orrs	r7, r0
 80028d2:	3568      	adds	r5, #104	; 0x68
 80028d4:	e7e9      	b.n	80028aa <_fwalk_reent+0x12>

080028d6 <__retarget_lock_init_recursive>:
 80028d6:	4770      	bx	lr

080028d8 <__retarget_lock_acquire_recursive>:
 80028d8:	4770      	bx	lr

080028da <__retarget_lock_release_recursive>:
 80028da:	4770      	bx	lr

080028dc <__swhatbuf_r>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	460e      	mov	r6, r1
 80028e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e4:	4614      	mov	r4, r2
 80028e6:	2900      	cmp	r1, #0
 80028e8:	461d      	mov	r5, r3
 80028ea:	b096      	sub	sp, #88	; 0x58
 80028ec:	da07      	bge.n	80028fe <__swhatbuf_r+0x22>
 80028ee:	2300      	movs	r3, #0
 80028f0:	602b      	str	r3, [r5, #0]
 80028f2:	89b3      	ldrh	r3, [r6, #12]
 80028f4:	061a      	lsls	r2, r3, #24
 80028f6:	d410      	bmi.n	800291a <__swhatbuf_r+0x3e>
 80028f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fc:	e00e      	b.n	800291c <__swhatbuf_r+0x40>
 80028fe:	466a      	mov	r2, sp
 8002900:	f000 fc5a 	bl	80031b8 <_fstat_r>
 8002904:	2800      	cmp	r0, #0
 8002906:	dbf2      	blt.n	80028ee <__swhatbuf_r+0x12>
 8002908:	9a01      	ldr	r2, [sp, #4]
 800290a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800290e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002912:	425a      	negs	r2, r3
 8002914:	415a      	adcs	r2, r3
 8002916:	602a      	str	r2, [r5, #0]
 8002918:	e7ee      	b.n	80028f8 <__swhatbuf_r+0x1c>
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	2000      	movs	r0, #0
 800291e:	6023      	str	r3, [r4, #0]
 8002920:	b016      	add	sp, #88	; 0x58
 8002922:	bd70      	pop	{r4, r5, r6, pc}

08002924 <__smakebuf_r>:
 8002924:	898b      	ldrh	r3, [r1, #12]
 8002926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002928:	079d      	lsls	r5, r3, #30
 800292a:	4606      	mov	r6, r0
 800292c:	460c      	mov	r4, r1
 800292e:	d507      	bpl.n	8002940 <__smakebuf_r+0x1c>
 8002930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	6123      	str	r3, [r4, #16]
 8002938:	2301      	movs	r3, #1
 800293a:	6163      	str	r3, [r4, #20]
 800293c:	b002      	add	sp, #8
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	466a      	mov	r2, sp
 8002942:	ab01      	add	r3, sp, #4
 8002944:	f7ff ffca 	bl	80028dc <__swhatbuf_r>
 8002948:	9900      	ldr	r1, [sp, #0]
 800294a:	4605      	mov	r5, r0
 800294c:	4630      	mov	r0, r6
 800294e:	f000 f875 	bl	8002a3c <_malloc_r>
 8002952:	b948      	cbnz	r0, 8002968 <__smakebuf_r+0x44>
 8002954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002958:	059a      	lsls	r2, r3, #22
 800295a:	d4ef      	bmi.n	800293c <__smakebuf_r+0x18>
 800295c:	f023 0303 	bic.w	r3, r3, #3
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	e7e3      	b.n	8002930 <__smakebuf_r+0xc>
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <__smakebuf_r+0x7c>)
 800296a:	62b3      	str	r3, [r6, #40]	; 0x28
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	6020      	str	r0, [r4, #0]
 8002970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	9b00      	ldr	r3, [sp, #0]
 8002978:	6120      	str	r0, [r4, #16]
 800297a:	6163      	str	r3, [r4, #20]
 800297c:	9b01      	ldr	r3, [sp, #4]
 800297e:	b15b      	cbz	r3, 8002998 <__smakebuf_r+0x74>
 8002980:	4630      	mov	r0, r6
 8002982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002986:	f000 fc29 	bl	80031dc <_isatty_r>
 800298a:	b128      	cbz	r0, 8002998 <__smakebuf_r+0x74>
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	89a0      	ldrh	r0, [r4, #12]
 800299a:	4305      	orrs	r5, r0
 800299c:	81a5      	strh	r5, [r4, #12]
 800299e:	e7cd      	b.n	800293c <__smakebuf_r+0x18>
 80029a0:	08002735 	.word	0x08002735

080029a4 <_free_r>:
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	4605      	mov	r5, r0
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d043      	beq.n	8002a34 <_free_r+0x90>
 80029ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029b0:	1f0c      	subs	r4, r1, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bfb8      	it	lt
 80029b6:	18e4      	addlt	r4, r4, r3
 80029b8:	f000 fc40 	bl	800323c <__malloc_lock>
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <_free_r+0x94>)
 80029be:	6813      	ldr	r3, [r2, #0]
 80029c0:	4610      	mov	r0, r2
 80029c2:	b933      	cbnz	r3, 80029d2 <_free_r+0x2e>
 80029c4:	6063      	str	r3, [r4, #4]
 80029c6:	6014      	str	r4, [r2, #0]
 80029c8:	4628      	mov	r0, r5
 80029ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029ce:	f000 bc3b 	b.w	8003248 <__malloc_unlock>
 80029d2:	42a3      	cmp	r3, r4
 80029d4:	d90a      	bls.n	80029ec <_free_r+0x48>
 80029d6:	6821      	ldr	r1, [r4, #0]
 80029d8:	1862      	adds	r2, r4, r1
 80029da:	4293      	cmp	r3, r2
 80029dc:	bf01      	itttt	eq
 80029de:	681a      	ldreq	r2, [r3, #0]
 80029e0:	685b      	ldreq	r3, [r3, #4]
 80029e2:	1852      	addeq	r2, r2, r1
 80029e4:	6022      	streq	r2, [r4, #0]
 80029e6:	6063      	str	r3, [r4, #4]
 80029e8:	6004      	str	r4, [r0, #0]
 80029ea:	e7ed      	b.n	80029c8 <_free_r+0x24>
 80029ec:	461a      	mov	r2, r3
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b10b      	cbz	r3, 80029f6 <_free_r+0x52>
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	d9fa      	bls.n	80029ec <_free_r+0x48>
 80029f6:	6811      	ldr	r1, [r2, #0]
 80029f8:	1850      	adds	r0, r2, r1
 80029fa:	42a0      	cmp	r0, r4
 80029fc:	d10b      	bne.n	8002a16 <_free_r+0x72>
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	4401      	add	r1, r0
 8002a02:	1850      	adds	r0, r2, r1
 8002a04:	4283      	cmp	r3, r0
 8002a06:	6011      	str	r1, [r2, #0]
 8002a08:	d1de      	bne.n	80029c8 <_free_r+0x24>
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4401      	add	r1, r0
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	6053      	str	r3, [r2, #4]
 8002a14:	e7d8      	b.n	80029c8 <_free_r+0x24>
 8002a16:	d902      	bls.n	8002a1e <_free_r+0x7a>
 8002a18:	230c      	movs	r3, #12
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	e7d4      	b.n	80029c8 <_free_r+0x24>
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	1821      	adds	r1, r4, r0
 8002a22:	428b      	cmp	r3, r1
 8002a24:	bf01      	itttt	eq
 8002a26:	6819      	ldreq	r1, [r3, #0]
 8002a28:	685b      	ldreq	r3, [r3, #4]
 8002a2a:	1809      	addeq	r1, r1, r0
 8002a2c:	6021      	streq	r1, [r4, #0]
 8002a2e:	6063      	str	r3, [r4, #4]
 8002a30:	6054      	str	r4, [r2, #4]
 8002a32:	e7c9      	b.n	80029c8 <_free_r+0x24>
 8002a34:	bd38      	pop	{r3, r4, r5, pc}
 8002a36:	bf00      	nop
 8002a38:	20000090 	.word	0x20000090

08002a3c <_malloc_r>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	1ccd      	adds	r5, r1, #3
 8002a40:	f025 0503 	bic.w	r5, r5, #3
 8002a44:	3508      	adds	r5, #8
 8002a46:	2d0c      	cmp	r5, #12
 8002a48:	bf38      	it	cc
 8002a4a:	250c      	movcc	r5, #12
 8002a4c:	2d00      	cmp	r5, #0
 8002a4e:	4606      	mov	r6, r0
 8002a50:	db01      	blt.n	8002a56 <_malloc_r+0x1a>
 8002a52:	42a9      	cmp	r1, r5
 8002a54:	d903      	bls.n	8002a5e <_malloc_r+0x22>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6033      	str	r3, [r6, #0]
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a5e:	f000 fbed 	bl	800323c <__malloc_lock>
 8002a62:	4921      	ldr	r1, [pc, #132]	; (8002ae8 <_malloc_r+0xac>)
 8002a64:	680a      	ldr	r2, [r1, #0]
 8002a66:	4614      	mov	r4, r2
 8002a68:	b99c      	cbnz	r4, 8002a92 <_malloc_r+0x56>
 8002a6a:	4f20      	ldr	r7, [pc, #128]	; (8002aec <_malloc_r+0xb0>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b923      	cbnz	r3, 8002a7a <_malloc_r+0x3e>
 8002a70:	4621      	mov	r1, r4
 8002a72:	4630      	mov	r0, r6
 8002a74:	f000 fb2a 	bl	80030cc <_sbrk_r>
 8002a78:	6038      	str	r0, [r7, #0]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f000 fb25 	bl	80030cc <_sbrk_r>
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	d123      	bne.n	8002ace <_malloc_r+0x92>
 8002a86:	230c      	movs	r3, #12
 8002a88:	4630      	mov	r0, r6
 8002a8a:	6033      	str	r3, [r6, #0]
 8002a8c:	f000 fbdc 	bl	8003248 <__malloc_unlock>
 8002a90:	e7e3      	b.n	8002a5a <_malloc_r+0x1e>
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	1b5b      	subs	r3, r3, r5
 8002a96:	d417      	bmi.n	8002ac8 <_malloc_r+0x8c>
 8002a98:	2b0b      	cmp	r3, #11
 8002a9a:	d903      	bls.n	8002aa4 <_malloc_r+0x68>
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	441c      	add	r4, r3
 8002aa0:	6025      	str	r5, [r4, #0]
 8002aa2:	e004      	b.n	8002aae <_malloc_r+0x72>
 8002aa4:	6863      	ldr	r3, [r4, #4]
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	bf0c      	ite	eq
 8002aaa:	600b      	streq	r3, [r1, #0]
 8002aac:	6053      	strne	r3, [r2, #4]
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f000 fbca 	bl	8003248 <__malloc_unlock>
 8002ab4:	f104 000b 	add.w	r0, r4, #11
 8002ab8:	1d23      	adds	r3, r4, #4
 8002aba:	f020 0007 	bic.w	r0, r0, #7
 8002abe:	1ac2      	subs	r2, r0, r3
 8002ac0:	d0cc      	beq.n	8002a5c <_malloc_r+0x20>
 8002ac2:	1a1b      	subs	r3, r3, r0
 8002ac4:	50a3      	str	r3, [r4, r2]
 8002ac6:	e7c9      	b.n	8002a5c <_malloc_r+0x20>
 8002ac8:	4622      	mov	r2, r4
 8002aca:	6864      	ldr	r4, [r4, #4]
 8002acc:	e7cc      	b.n	8002a68 <_malloc_r+0x2c>
 8002ace:	1cc4      	adds	r4, r0, #3
 8002ad0:	f024 0403 	bic.w	r4, r4, #3
 8002ad4:	42a0      	cmp	r0, r4
 8002ad6:	d0e3      	beq.n	8002aa0 <_malloc_r+0x64>
 8002ad8:	1a21      	subs	r1, r4, r0
 8002ada:	4630      	mov	r0, r6
 8002adc:	f000 faf6 	bl	80030cc <_sbrk_r>
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d1dd      	bne.n	8002aa0 <_malloc_r+0x64>
 8002ae4:	e7cf      	b.n	8002a86 <_malloc_r+0x4a>
 8002ae6:	bf00      	nop
 8002ae8:	20000090 	.word	0x20000090
 8002aec:	20000094 	.word	0x20000094

08002af0 <__sfputc_r>:
 8002af0:	6893      	ldr	r3, [r2, #8]
 8002af2:	b410      	push	{r4}
 8002af4:	3b01      	subs	r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	6093      	str	r3, [r2, #8]
 8002afa:	da07      	bge.n	8002b0c <__sfputc_r+0x1c>
 8002afc:	6994      	ldr	r4, [r2, #24]
 8002afe:	42a3      	cmp	r3, r4
 8002b00:	db01      	blt.n	8002b06 <__sfputc_r+0x16>
 8002b02:	290a      	cmp	r1, #10
 8002b04:	d102      	bne.n	8002b0c <__sfputc_r+0x1c>
 8002b06:	bc10      	pop	{r4}
 8002b08:	f7ff bc6e 	b.w	80023e8 <__swbuf_r>
 8002b0c:	6813      	ldr	r3, [r2, #0]
 8002b0e:	1c58      	adds	r0, r3, #1
 8002b10:	6010      	str	r0, [r2, #0]
 8002b12:	7019      	strb	r1, [r3, #0]
 8002b14:	4608      	mov	r0, r1
 8002b16:	bc10      	pop	{r4}
 8002b18:	4770      	bx	lr

08002b1a <__sfputs_r>:
 8002b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	460f      	mov	r7, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	18d5      	adds	r5, r2, r3
 8002b24:	42ac      	cmp	r4, r5
 8002b26:	d101      	bne.n	8002b2c <__sfputs_r+0x12>
 8002b28:	2000      	movs	r0, #0
 8002b2a:	e007      	b.n	8002b3c <__sfputs_r+0x22>
 8002b2c:	463a      	mov	r2, r7
 8002b2e:	4630      	mov	r0, r6
 8002b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b34:	f7ff ffdc 	bl	8002af0 <__sfputc_r>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	d1f3      	bne.n	8002b24 <__sfputs_r+0xa>
 8002b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b40 <_vfiprintf_r>:
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	460d      	mov	r5, r1
 8002b46:	4614      	mov	r4, r2
 8002b48:	4698      	mov	r8, r3
 8002b4a:	4606      	mov	r6, r0
 8002b4c:	b09d      	sub	sp, #116	; 0x74
 8002b4e:	b118      	cbz	r0, 8002b58 <_vfiprintf_r+0x18>
 8002b50:	6983      	ldr	r3, [r0, #24]
 8002b52:	b90b      	cbnz	r3, 8002b58 <_vfiprintf_r+0x18>
 8002b54:	f7ff fe22 	bl	800279c <__sinit>
 8002b58:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <_vfiprintf_r+0x240>)
 8002b5a:	429d      	cmp	r5, r3
 8002b5c:	d11b      	bne.n	8002b96 <_vfiprintf_r+0x56>
 8002b5e:	6875      	ldr	r5, [r6, #4]
 8002b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b62:	07d9      	lsls	r1, r3, #31
 8002b64:	d405      	bmi.n	8002b72 <_vfiprintf_r+0x32>
 8002b66:	89ab      	ldrh	r3, [r5, #12]
 8002b68:	059a      	lsls	r2, r3, #22
 8002b6a:	d402      	bmi.n	8002b72 <_vfiprintf_r+0x32>
 8002b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b6e:	f7ff feb3 	bl	80028d8 <__retarget_lock_acquire_recursive>
 8002b72:	89ab      	ldrh	r3, [r5, #12]
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	d501      	bpl.n	8002b7c <_vfiprintf_r+0x3c>
 8002b78:	692b      	ldr	r3, [r5, #16]
 8002b7a:	b9eb      	cbnz	r3, 8002bb8 <_vfiprintf_r+0x78>
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f7ff fc84 	bl	800248c <__swsetup_r>
 8002b84:	b1c0      	cbz	r0, 8002bb8 <_vfiprintf_r+0x78>
 8002b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b88:	07dc      	lsls	r4, r3, #31
 8002b8a:	d50e      	bpl.n	8002baa <_vfiprintf_r+0x6a>
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	b01d      	add	sp, #116	; 0x74
 8002b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b96:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <_vfiprintf_r+0x244>)
 8002b98:	429d      	cmp	r5, r3
 8002b9a:	d101      	bne.n	8002ba0 <_vfiprintf_r+0x60>
 8002b9c:	68b5      	ldr	r5, [r6, #8]
 8002b9e:	e7df      	b.n	8002b60 <_vfiprintf_r+0x20>
 8002ba0:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <_vfiprintf_r+0x248>)
 8002ba2:	429d      	cmp	r5, r3
 8002ba4:	bf08      	it	eq
 8002ba6:	68f5      	ldreq	r5, [r6, #12]
 8002ba8:	e7da      	b.n	8002b60 <_vfiprintf_r+0x20>
 8002baa:	89ab      	ldrh	r3, [r5, #12]
 8002bac:	0598      	lsls	r0, r3, #22
 8002bae:	d4ed      	bmi.n	8002b8c <_vfiprintf_r+0x4c>
 8002bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bb2:	f7ff fe92 	bl	80028da <__retarget_lock_release_recursive>
 8002bb6:	e7e9      	b.n	8002b8c <_vfiprintf_r+0x4c>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bc2:	2330      	movs	r3, #48	; 0x30
 8002bc4:	f04f 0901 	mov.w	r9, #1
 8002bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d8c <_vfiprintf_r+0x24c>
 8002bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bdc:	b10a      	cbz	r2, 8002be2 <_vfiprintf_r+0xa2>
 8002bde:	2a25      	cmp	r2, #37	; 0x25
 8002be0:	d1f9      	bne.n	8002bd6 <_vfiprintf_r+0x96>
 8002be2:	ebba 0b04 	subs.w	fp, sl, r4
 8002be6:	d00b      	beq.n	8002c00 <_vfiprintf_r+0xc0>
 8002be8:	465b      	mov	r3, fp
 8002bea:	4622      	mov	r2, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f7ff ff93 	bl	8002b1a <__sfputs_r>
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	f000 80aa 	beq.w	8002d4e <_vfiprintf_r+0x20e>
 8002bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bfc:	445a      	add	r2, fp
 8002bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8002c00:	f89a 3000 	ldrb.w	r3, [sl]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a2 	beq.w	8002d4e <_vfiprintf_r+0x20e>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c14:	f10a 0a01 	add.w	sl, sl, #1
 8002c18:	9304      	str	r3, [sp, #16]
 8002c1a:	9307      	str	r3, [sp, #28]
 8002c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c20:	931a      	str	r3, [sp, #104]	; 0x68
 8002c22:	4654      	mov	r4, sl
 8002c24:	2205      	movs	r2, #5
 8002c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c2a:	4858      	ldr	r0, [pc, #352]	; (8002d8c <_vfiprintf_r+0x24c>)
 8002c2c:	f000 faf8 	bl	8003220 <memchr>
 8002c30:	9a04      	ldr	r2, [sp, #16]
 8002c32:	b9d8      	cbnz	r0, 8002c6c <_vfiprintf_r+0x12c>
 8002c34:	06d1      	lsls	r1, r2, #27
 8002c36:	bf44      	itt	mi
 8002c38:	2320      	movmi	r3, #32
 8002c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c3e:	0713      	lsls	r3, r2, #28
 8002c40:	bf44      	itt	mi
 8002c42:	232b      	movmi	r3, #43	; 0x2b
 8002c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c48:	f89a 3000 	ldrb.w	r3, [sl]
 8002c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4e:	d015      	beq.n	8002c7c <_vfiprintf_r+0x13c>
 8002c50:	4654      	mov	r4, sl
 8002c52:	2000      	movs	r0, #0
 8002c54:	f04f 0c0a 	mov.w	ip, #10
 8002c58:	9a07      	ldr	r2, [sp, #28]
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c60:	3b30      	subs	r3, #48	; 0x30
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	d94e      	bls.n	8002d04 <_vfiprintf_r+0x1c4>
 8002c66:	b1b0      	cbz	r0, 8002c96 <_vfiprintf_r+0x156>
 8002c68:	9207      	str	r2, [sp, #28]
 8002c6a:	e014      	b.n	8002c96 <_vfiprintf_r+0x156>
 8002c6c:	eba0 0308 	sub.w	r3, r0, r8
 8002c70:	fa09 f303 	lsl.w	r3, r9, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	46a2      	mov	sl, r4
 8002c78:	9304      	str	r3, [sp, #16]
 8002c7a:	e7d2      	b.n	8002c22 <_vfiprintf_r+0xe2>
 8002c7c:	9b03      	ldr	r3, [sp, #12]
 8002c7e:	1d19      	adds	r1, r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	9103      	str	r1, [sp, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bfbb      	ittet	lt
 8002c88:	425b      	neglt	r3, r3
 8002c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8002c8e:	9307      	strge	r3, [sp, #28]
 8002c90:	9307      	strlt	r3, [sp, #28]
 8002c92:	bfb8      	it	lt
 8002c94:	9204      	strlt	r2, [sp, #16]
 8002c96:	7823      	ldrb	r3, [r4, #0]
 8002c98:	2b2e      	cmp	r3, #46	; 0x2e
 8002c9a:	d10c      	bne.n	8002cb6 <_vfiprintf_r+0x176>
 8002c9c:	7863      	ldrb	r3, [r4, #1]
 8002c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca0:	d135      	bne.n	8002d0e <_vfiprintf_r+0x1ce>
 8002ca2:	9b03      	ldr	r3, [sp, #12]
 8002ca4:	3402      	adds	r4, #2
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	9203      	str	r2, [sp, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfb8      	it	lt
 8002cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cb4:	9305      	str	r3, [sp, #20]
 8002cb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d9c <_vfiprintf_r+0x25c>
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	7821      	ldrb	r1, [r4, #0]
 8002cc0:	f000 faae 	bl	8003220 <memchr>
 8002cc4:	b140      	cbz	r0, 8002cd8 <_vfiprintf_r+0x198>
 8002cc6:	2340      	movs	r3, #64	; 0x40
 8002cc8:	eba0 000a 	sub.w	r0, r0, sl
 8002ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8002cd0:	9b04      	ldr	r3, [sp, #16]
 8002cd2:	3401      	adds	r4, #1
 8002cd4:	4303      	orrs	r3, r0
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cdc:	2206      	movs	r2, #6
 8002cde:	482c      	ldr	r0, [pc, #176]	; (8002d90 <_vfiprintf_r+0x250>)
 8002ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ce4:	f000 fa9c 	bl	8003220 <memchr>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d03f      	beq.n	8002d6c <_vfiprintf_r+0x22c>
 8002cec:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <_vfiprintf_r+0x254>)
 8002cee:	bb1b      	cbnz	r3, 8002d38 <_vfiprintf_r+0x1f8>
 8002cf0:	9b03      	ldr	r3, [sp, #12]
 8002cf2:	3307      	adds	r3, #7
 8002cf4:	f023 0307 	bic.w	r3, r3, #7
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	9303      	str	r3, [sp, #12]
 8002cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cfe:	443b      	add	r3, r7
 8002d00:	9309      	str	r3, [sp, #36]	; 0x24
 8002d02:	e767      	b.n	8002bd4 <_vfiprintf_r+0x94>
 8002d04:	460c      	mov	r4, r1
 8002d06:	2001      	movs	r0, #1
 8002d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d0c:	e7a5      	b.n	8002c5a <_vfiprintf_r+0x11a>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f04f 0c0a 	mov.w	ip, #10
 8002d14:	4619      	mov	r1, r3
 8002d16:	3401      	adds	r4, #1
 8002d18:	9305      	str	r3, [sp, #20]
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d20:	3a30      	subs	r2, #48	; 0x30
 8002d22:	2a09      	cmp	r2, #9
 8002d24:	d903      	bls.n	8002d2e <_vfiprintf_r+0x1ee>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0c5      	beq.n	8002cb6 <_vfiprintf_r+0x176>
 8002d2a:	9105      	str	r1, [sp, #20]
 8002d2c:	e7c3      	b.n	8002cb6 <_vfiprintf_r+0x176>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	2301      	movs	r3, #1
 8002d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d36:	e7f0      	b.n	8002d1a <_vfiprintf_r+0x1da>
 8002d38:	ab03      	add	r3, sp, #12
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <_vfiprintf_r+0x258>)
 8002d42:	a904      	add	r1, sp, #16
 8002d44:	f3af 8000 	nop.w
 8002d48:	4607      	mov	r7, r0
 8002d4a:	1c78      	adds	r0, r7, #1
 8002d4c:	d1d6      	bne.n	8002cfc <_vfiprintf_r+0x1bc>
 8002d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d50:	07d9      	lsls	r1, r3, #31
 8002d52:	d405      	bmi.n	8002d60 <_vfiprintf_r+0x220>
 8002d54:	89ab      	ldrh	r3, [r5, #12]
 8002d56:	059a      	lsls	r2, r3, #22
 8002d58:	d402      	bmi.n	8002d60 <_vfiprintf_r+0x220>
 8002d5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d5c:	f7ff fdbd 	bl	80028da <__retarget_lock_release_recursive>
 8002d60:	89ab      	ldrh	r3, [r5, #12]
 8002d62:	065b      	lsls	r3, r3, #25
 8002d64:	f53f af12 	bmi.w	8002b8c <_vfiprintf_r+0x4c>
 8002d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d6a:	e711      	b.n	8002b90 <_vfiprintf_r+0x50>
 8002d6c:	ab03      	add	r3, sp, #12
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	462a      	mov	r2, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <_vfiprintf_r+0x258>)
 8002d76:	a904      	add	r1, sp, #16
 8002d78:	f000 f882 	bl	8002e80 <_printf_i>
 8002d7c:	e7e4      	b.n	8002d48 <_vfiprintf_r+0x208>
 8002d7e:	bf00      	nop
 8002d80:	0800331c 	.word	0x0800331c
 8002d84:	0800333c 	.word	0x0800333c
 8002d88:	080032fc 	.word	0x080032fc
 8002d8c:	0800335c 	.word	0x0800335c
 8002d90:	08003366 	.word	0x08003366
 8002d94:	00000000 	.word	0x00000000
 8002d98:	08002b1b 	.word	0x08002b1b
 8002d9c:	08003362 	.word	0x08003362

08002da0 <_printf_common>:
 8002da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da4:	4616      	mov	r6, r2
 8002da6:	4699      	mov	r9, r3
 8002da8:	688a      	ldr	r2, [r1, #8]
 8002daa:	690b      	ldr	r3, [r1, #16]
 8002dac:	4607      	mov	r7, r0
 8002dae:	4293      	cmp	r3, r2
 8002db0:	bfb8      	it	lt
 8002db2:	4613      	movlt	r3, r2
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dba:	460c      	mov	r4, r1
 8002dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dc0:	b10a      	cbz	r2, 8002dc6 <_printf_common+0x26>
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	6033      	str	r3, [r6, #0]
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	0699      	lsls	r1, r3, #26
 8002dca:	bf42      	ittt	mi
 8002dcc:	6833      	ldrmi	r3, [r6, #0]
 8002dce:	3302      	addmi	r3, #2
 8002dd0:	6033      	strmi	r3, [r6, #0]
 8002dd2:	6825      	ldr	r5, [r4, #0]
 8002dd4:	f015 0506 	ands.w	r5, r5, #6
 8002dd8:	d106      	bne.n	8002de8 <_printf_common+0x48>
 8002dda:	f104 0a19 	add.w	sl, r4, #25
 8002dde:	68e3      	ldr	r3, [r4, #12]
 8002de0:	6832      	ldr	r2, [r6, #0]
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	42ab      	cmp	r3, r5
 8002de6:	dc28      	bgt.n	8002e3a <_printf_common+0x9a>
 8002de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dec:	1e13      	subs	r3, r2, #0
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	bf18      	it	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	0692      	lsls	r2, r2, #26
 8002df6:	d42d      	bmi.n	8002e54 <_printf_common+0xb4>
 8002df8:	4649      	mov	r1, r9
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e00:	47c0      	blx	r8
 8002e02:	3001      	adds	r0, #1
 8002e04:	d020      	beq.n	8002e48 <_printf_common+0xa8>
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	68e5      	ldr	r5, [r4, #12]
 8002e0a:	f003 0306 	and.w	r3, r3, #6
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf18      	it	ne
 8002e12:	2500      	movne	r5, #0
 8002e14:	6832      	ldr	r2, [r6, #0]
 8002e16:	f04f 0600 	mov.w	r6, #0
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	bf08      	it	eq
 8002e1e:	1aad      	subeq	r5, r5, r2
 8002e20:	6922      	ldr	r2, [r4, #16]
 8002e22:	bf08      	it	eq
 8002e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bfc4      	itt	gt
 8002e2c:	1a9b      	subgt	r3, r3, r2
 8002e2e:	18ed      	addgt	r5, r5, r3
 8002e30:	341a      	adds	r4, #26
 8002e32:	42b5      	cmp	r5, r6
 8002e34:	d11a      	bne.n	8002e6c <_printf_common+0xcc>
 8002e36:	2000      	movs	r0, #0
 8002e38:	e008      	b.n	8002e4c <_printf_common+0xac>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4652      	mov	r2, sl
 8002e3e:	4649      	mov	r1, r9
 8002e40:	4638      	mov	r0, r7
 8002e42:	47c0      	blx	r8
 8002e44:	3001      	adds	r0, #1
 8002e46:	d103      	bne.n	8002e50 <_printf_common+0xb0>
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e50:	3501      	adds	r5, #1
 8002e52:	e7c4      	b.n	8002dde <_printf_common+0x3e>
 8002e54:	2030      	movs	r0, #48	; 0x30
 8002e56:	18e1      	adds	r1, r4, r3
 8002e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e62:	4422      	add	r2, r4
 8002e64:	3302      	adds	r3, #2
 8002e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e6a:	e7c5      	b.n	8002df8 <_printf_common+0x58>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4649      	mov	r1, r9
 8002e72:	4638      	mov	r0, r7
 8002e74:	47c0      	blx	r8
 8002e76:	3001      	adds	r0, #1
 8002e78:	d0e6      	beq.n	8002e48 <_printf_common+0xa8>
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7d9      	b.n	8002e32 <_printf_common+0x92>
	...

08002e80 <_printf_i>:
 8002e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	460c      	mov	r4, r1
 8002e86:	7e27      	ldrb	r7, [r4, #24]
 8002e88:	4691      	mov	r9, r2
 8002e8a:	2f78      	cmp	r7, #120	; 0x78
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	469a      	mov	sl, r3
 8002e90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e96:	d807      	bhi.n	8002ea8 <_printf_i+0x28>
 8002e98:	2f62      	cmp	r7, #98	; 0x62
 8002e9a:	d80a      	bhi.n	8002eb2 <_printf_i+0x32>
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	f000 80d9 	beq.w	8003054 <_printf_i+0x1d4>
 8002ea2:	2f58      	cmp	r7, #88	; 0x58
 8002ea4:	f000 80a4 	beq.w	8002ff0 <_printf_i+0x170>
 8002ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002eb0:	e03a      	b.n	8002f28 <_printf_i+0xa8>
 8002eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eb6:	2b15      	cmp	r3, #21
 8002eb8:	d8f6      	bhi.n	8002ea8 <_printf_i+0x28>
 8002eba:	a001      	add	r0, pc, #4	; (adr r0, 8002ec0 <_printf_i+0x40>)
 8002ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ec0:	08002f19 	.word	0x08002f19
 8002ec4:	08002f2d 	.word	0x08002f2d
 8002ec8:	08002ea9 	.word	0x08002ea9
 8002ecc:	08002ea9 	.word	0x08002ea9
 8002ed0:	08002ea9 	.word	0x08002ea9
 8002ed4:	08002ea9 	.word	0x08002ea9
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002ea9 	.word	0x08002ea9
 8002ee0:	08002ea9 	.word	0x08002ea9
 8002ee4:	08002ea9 	.word	0x08002ea9
 8002ee8:	08002ea9 	.word	0x08002ea9
 8002eec:	0800303b 	.word	0x0800303b
 8002ef0:	08002f5d 	.word	0x08002f5d
 8002ef4:	0800301d 	.word	0x0800301d
 8002ef8:	08002ea9 	.word	0x08002ea9
 8002efc:	08002ea9 	.word	0x08002ea9
 8002f00:	0800305d 	.word	0x0800305d
 8002f04:	08002ea9 	.word	0x08002ea9
 8002f08:	08002f5d 	.word	0x08002f5d
 8002f0c:	08002ea9 	.word	0x08002ea9
 8002f10:	08002ea9 	.word	0x08002ea9
 8002f14:	08003025 	.word	0x08003025
 8002f18:	680b      	ldr	r3, [r1, #0]
 8002f1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f1e:	1d1a      	adds	r2, r3, #4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	600a      	str	r2, [r1, #0]
 8002f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0a4      	b.n	8003076 <_printf_i+0x1f6>
 8002f2c:	6825      	ldr	r5, [r4, #0]
 8002f2e:	6808      	ldr	r0, [r1, #0]
 8002f30:	062e      	lsls	r6, r5, #24
 8002f32:	f100 0304 	add.w	r3, r0, #4
 8002f36:	d50a      	bpl.n	8002f4e <_printf_i+0xce>
 8002f38:	6805      	ldr	r5, [r0, #0]
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	da03      	bge.n	8002f48 <_printf_i+0xc8>
 8002f40:	232d      	movs	r3, #45	; 0x2d
 8002f42:	426d      	negs	r5, r5
 8002f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f48:	230a      	movs	r3, #10
 8002f4a:	485e      	ldr	r0, [pc, #376]	; (80030c4 <_printf_i+0x244>)
 8002f4c:	e019      	b.n	8002f82 <_printf_i+0x102>
 8002f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f52:	6805      	ldr	r5, [r0, #0]
 8002f54:	600b      	str	r3, [r1, #0]
 8002f56:	bf18      	it	ne
 8002f58:	b22d      	sxthne	r5, r5
 8002f5a:	e7ef      	b.n	8002f3c <_printf_i+0xbc>
 8002f5c:	680b      	ldr	r3, [r1, #0]
 8002f5e:	6825      	ldr	r5, [r4, #0]
 8002f60:	1d18      	adds	r0, r3, #4
 8002f62:	6008      	str	r0, [r1, #0]
 8002f64:	0628      	lsls	r0, r5, #24
 8002f66:	d501      	bpl.n	8002f6c <_printf_i+0xec>
 8002f68:	681d      	ldr	r5, [r3, #0]
 8002f6a:	e002      	b.n	8002f72 <_printf_i+0xf2>
 8002f6c:	0669      	lsls	r1, r5, #25
 8002f6e:	d5fb      	bpl.n	8002f68 <_printf_i+0xe8>
 8002f70:	881d      	ldrh	r5, [r3, #0]
 8002f72:	2f6f      	cmp	r7, #111	; 0x6f
 8002f74:	bf0c      	ite	eq
 8002f76:	2308      	moveq	r3, #8
 8002f78:	230a      	movne	r3, #10
 8002f7a:	4852      	ldr	r0, [pc, #328]	; (80030c4 <_printf_i+0x244>)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f82:	6866      	ldr	r6, [r4, #4]
 8002f84:	2e00      	cmp	r6, #0
 8002f86:	bfa8      	it	ge
 8002f88:	6821      	ldrge	r1, [r4, #0]
 8002f8a:	60a6      	str	r6, [r4, #8]
 8002f8c:	bfa4      	itt	ge
 8002f8e:	f021 0104 	bicge.w	r1, r1, #4
 8002f92:	6021      	strge	r1, [r4, #0]
 8002f94:	b90d      	cbnz	r5, 8002f9a <_printf_i+0x11a>
 8002f96:	2e00      	cmp	r6, #0
 8002f98:	d04d      	beq.n	8003036 <_printf_i+0x1b6>
 8002f9a:	4616      	mov	r6, r2
 8002f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8002fa4:	5dc7      	ldrb	r7, [r0, r7]
 8002fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002faa:	462f      	mov	r7, r5
 8002fac:	42bb      	cmp	r3, r7
 8002fae:	460d      	mov	r5, r1
 8002fb0:	d9f4      	bls.n	8002f9c <_printf_i+0x11c>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d10b      	bne.n	8002fce <_printf_i+0x14e>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	07df      	lsls	r7, r3, #31
 8002fba:	d508      	bpl.n	8002fce <_printf_i+0x14e>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	6861      	ldr	r1, [r4, #4]
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	bfde      	ittt	le
 8002fc4:	2330      	movle	r3, #48	; 0x30
 8002fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fce:	1b92      	subs	r2, r2, r6
 8002fd0:	6122      	str	r2, [r4, #16]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	f8cd a000 	str.w	sl, [sp]
 8002fdc:	aa03      	add	r2, sp, #12
 8002fde:	f7ff fedf 	bl	8002da0 <_printf_common>
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d14c      	bne.n	8003080 <_printf_i+0x200>
 8002fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fea:	b004      	add	sp, #16
 8002fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff0:	4834      	ldr	r0, [pc, #208]	; (80030c4 <_printf_i+0x244>)
 8002ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ff6:	680e      	ldr	r6, [r1, #0]
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ffe:	061f      	lsls	r7, r3, #24
 8003000:	600e      	str	r6, [r1, #0]
 8003002:	d514      	bpl.n	800302e <_printf_i+0x1ae>
 8003004:	07d9      	lsls	r1, r3, #31
 8003006:	bf44      	itt	mi
 8003008:	f043 0320 	orrmi.w	r3, r3, #32
 800300c:	6023      	strmi	r3, [r4, #0]
 800300e:	b91d      	cbnz	r5, 8003018 <_printf_i+0x198>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f023 0320 	bic.w	r3, r3, #32
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	2310      	movs	r3, #16
 800301a:	e7af      	b.n	8002f7c <_printf_i+0xfc>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	2378      	movs	r3, #120	; 0x78
 8003026:	4828      	ldr	r0, [pc, #160]	; (80030c8 <_printf_i+0x248>)
 8003028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800302c:	e7e3      	b.n	8002ff6 <_printf_i+0x176>
 800302e:	065e      	lsls	r6, r3, #25
 8003030:	bf48      	it	mi
 8003032:	b2ad      	uxthmi	r5, r5
 8003034:	e7e6      	b.n	8003004 <_printf_i+0x184>
 8003036:	4616      	mov	r6, r2
 8003038:	e7bb      	b.n	8002fb2 <_printf_i+0x132>
 800303a:	680b      	ldr	r3, [r1, #0]
 800303c:	6826      	ldr	r6, [r4, #0]
 800303e:	1d1d      	adds	r5, r3, #4
 8003040:	6960      	ldr	r0, [r4, #20]
 8003042:	600d      	str	r5, [r1, #0]
 8003044:	0635      	lsls	r5, r6, #24
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	d501      	bpl.n	800304e <_printf_i+0x1ce>
 800304a:	6018      	str	r0, [r3, #0]
 800304c:	e002      	b.n	8003054 <_printf_i+0x1d4>
 800304e:	0671      	lsls	r1, r6, #25
 8003050:	d5fb      	bpl.n	800304a <_printf_i+0x1ca>
 8003052:	8018      	strh	r0, [r3, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	4616      	mov	r6, r2
 8003058:	6123      	str	r3, [r4, #16]
 800305a:	e7ba      	b.n	8002fd2 <_printf_i+0x152>
 800305c:	680b      	ldr	r3, [r1, #0]
 800305e:	1d1a      	adds	r2, r3, #4
 8003060:	600a      	str	r2, [r1, #0]
 8003062:	681e      	ldr	r6, [r3, #0]
 8003064:	2100      	movs	r1, #0
 8003066:	4630      	mov	r0, r6
 8003068:	6862      	ldr	r2, [r4, #4]
 800306a:	f000 f8d9 	bl	8003220 <memchr>
 800306e:	b108      	cbz	r0, 8003074 <_printf_i+0x1f4>
 8003070:	1b80      	subs	r0, r0, r6
 8003072:	6060      	str	r0, [r4, #4]
 8003074:	6863      	ldr	r3, [r4, #4]
 8003076:	6123      	str	r3, [r4, #16]
 8003078:	2300      	movs	r3, #0
 800307a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307e:	e7a8      	b.n	8002fd2 <_printf_i+0x152>
 8003080:	4632      	mov	r2, r6
 8003082:	4649      	mov	r1, r9
 8003084:	4640      	mov	r0, r8
 8003086:	6923      	ldr	r3, [r4, #16]
 8003088:	47d0      	blx	sl
 800308a:	3001      	adds	r0, #1
 800308c:	d0ab      	beq.n	8002fe6 <_printf_i+0x166>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	079b      	lsls	r3, r3, #30
 8003092:	d413      	bmi.n	80030bc <_printf_i+0x23c>
 8003094:	68e0      	ldr	r0, [r4, #12]
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	4298      	cmp	r0, r3
 800309a:	bfb8      	it	lt
 800309c:	4618      	movlt	r0, r3
 800309e:	e7a4      	b.n	8002fea <_printf_i+0x16a>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4632      	mov	r2, r6
 80030a4:	4649      	mov	r1, r9
 80030a6:	4640      	mov	r0, r8
 80030a8:	47d0      	blx	sl
 80030aa:	3001      	adds	r0, #1
 80030ac:	d09b      	beq.n	8002fe6 <_printf_i+0x166>
 80030ae:	3501      	adds	r5, #1
 80030b0:	68e3      	ldr	r3, [r4, #12]
 80030b2:	9903      	ldr	r1, [sp, #12]
 80030b4:	1a5b      	subs	r3, r3, r1
 80030b6:	42ab      	cmp	r3, r5
 80030b8:	dcf2      	bgt.n	80030a0 <_printf_i+0x220>
 80030ba:	e7eb      	b.n	8003094 <_printf_i+0x214>
 80030bc:	2500      	movs	r5, #0
 80030be:	f104 0619 	add.w	r6, r4, #25
 80030c2:	e7f5      	b.n	80030b0 <_printf_i+0x230>
 80030c4:	0800336d 	.word	0x0800336d
 80030c8:	0800337e 	.word	0x0800337e

080030cc <_sbrk_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	2300      	movs	r3, #0
 80030d0:	4d05      	ldr	r5, [pc, #20]	; (80030e8 <_sbrk_r+0x1c>)
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	f7fd fad6 	bl	8000688 <_sbrk>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d102      	bne.n	80030e6 <_sbrk_r+0x1a>
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	b103      	cbz	r3, 80030e6 <_sbrk_r+0x1a>
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	200001ec 	.word	0x200001ec

080030ec <__sread>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	460c      	mov	r4, r1
 80030f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f4:	f000 f8ae 	bl	8003254 <_read_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	bfab      	itete	ge
 80030fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003100:	181b      	addge	r3, r3, r0
 8003102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003106:	bfac      	ite	ge
 8003108:	6563      	strge	r3, [r4, #84]	; 0x54
 800310a:	81a3      	strhlt	r3, [r4, #12]
 800310c:	bd10      	pop	{r4, pc}

0800310e <__swrite>:
 800310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003112:	461f      	mov	r7, r3
 8003114:	898b      	ldrh	r3, [r1, #12]
 8003116:	4605      	mov	r5, r0
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	460c      	mov	r4, r1
 800311c:	4616      	mov	r6, r2
 800311e:	d505      	bpl.n	800312c <__swrite+0x1e>
 8003120:	2302      	movs	r3, #2
 8003122:	2200      	movs	r2, #0
 8003124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003128:	f000 f868 	bl	80031fc <_lseek_r>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	4632      	mov	r2, r6
 8003130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	4628      	mov	r0, r5
 8003138:	463b      	mov	r3, r7
 800313a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800313e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003142:	f000 b817 	b.w	8003174 <_write_r>

08003146 <__sseek>:
 8003146:	b510      	push	{r4, lr}
 8003148:	460c      	mov	r4, r1
 800314a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314e:	f000 f855 	bl	80031fc <_lseek_r>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	bf15      	itete	ne
 8003158:	6560      	strne	r0, [r4, #84]	; 0x54
 800315a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800315e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003162:	81a3      	strheq	r3, [r4, #12]
 8003164:	bf18      	it	ne
 8003166:	81a3      	strhne	r3, [r4, #12]
 8003168:	bd10      	pop	{r4, pc}

0800316a <__sclose>:
 800316a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316e:	f000 b813 	b.w	8003198 <_close_r>
	...

08003174 <_write_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	2200      	movs	r2, #0
 800317e:	4d05      	ldr	r5, [pc, #20]	; (8003194 <_write_r+0x20>)
 8003180:	602a      	str	r2, [r5, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	f7fd fa33 	bl	80005ee <_write>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_write_r+0x1e>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_write_r+0x1e>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	200001ec 	.word	0x200001ec

08003198 <_close_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	2300      	movs	r3, #0
 800319c:	4d05      	ldr	r5, [pc, #20]	; (80031b4 <_close_r+0x1c>)
 800319e:	4604      	mov	r4, r0
 80031a0:	4608      	mov	r0, r1
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	f7fd fa3f 	bl	8000626 <_close>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_close_r+0x1a>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_close_r+0x1a>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	200001ec 	.word	0x200001ec

080031b8 <_fstat_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	2300      	movs	r3, #0
 80031bc:	4d06      	ldr	r5, [pc, #24]	; (80031d8 <_fstat_r+0x20>)
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	f7fd fa39 	bl	800063c <_fstat>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d102      	bne.n	80031d4 <_fstat_r+0x1c>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b103      	cbz	r3, 80031d4 <_fstat_r+0x1c>
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	200001ec 	.word	0x200001ec

080031dc <_isatty_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	2300      	movs	r3, #0
 80031e0:	4d05      	ldr	r5, [pc, #20]	; (80031f8 <_isatty_r+0x1c>)
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	f7fd fa37 	bl	800065a <_isatty>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_isatty_r+0x1a>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_isatty_r+0x1a>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	200001ec 	.word	0x200001ec

080031fc <_lseek_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4604      	mov	r4, r0
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	2200      	movs	r2, #0
 8003206:	4d05      	ldr	r5, [pc, #20]	; (800321c <_lseek_r+0x20>)
 8003208:	602a      	str	r2, [r5, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f7fd fa2f 	bl	800066e <_lseek>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_lseek_r+0x1e>
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	b103      	cbz	r3, 800321a <_lseek_r+0x1e>
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	200001ec 	.word	0x200001ec

08003220 <memchr>:
 8003220:	4603      	mov	r3, r0
 8003222:	b510      	push	{r4, lr}
 8003224:	b2c9      	uxtb	r1, r1
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	4618      	mov	r0, r3
 800322c:	d101      	bne.n	8003232 <memchr+0x12>
 800322e:	2000      	movs	r0, #0
 8003230:	e003      	b.n	800323a <memchr+0x1a>
 8003232:	7804      	ldrb	r4, [r0, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	428c      	cmp	r4, r1
 8003238:	d1f6      	bne.n	8003228 <memchr+0x8>
 800323a:	bd10      	pop	{r4, pc}

0800323c <__malloc_lock>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__malloc_lock+0x8>)
 800323e:	f7ff bb4b 	b.w	80028d8 <__retarget_lock_acquire_recursive>
 8003242:	bf00      	nop
 8003244:	200001e4 	.word	0x200001e4

08003248 <__malloc_unlock>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__malloc_unlock+0x8>)
 800324a:	f7ff bb46 	b.w	80028da <__retarget_lock_release_recursive>
 800324e:	bf00      	nop
 8003250:	200001e4 	.word	0x200001e4

08003254 <_read_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4604      	mov	r4, r0
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	2200      	movs	r2, #0
 800325e:	4d05      	ldr	r5, [pc, #20]	; (8003274 <_read_r+0x20>)
 8003260:	602a      	str	r2, [r5, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f7fd f9a6 	bl	80005b4 <_read>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d102      	bne.n	8003272 <_read_r+0x1e>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	b103      	cbz	r3, 8003272 <_read_r+0x1e>
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	200001ec 	.word	0x200001ec

08003278 <_init>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

08003284 <_fini>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr
